package com.testwa.distest.config;import org.springframework.amqp.core.*;import org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory;import org.springframework.amqp.rabbit.connection.ConnectionFactory;import org.springframework.amqp.rabbit.core.RabbitAdmin;import org.springframework.amqp.rabbit.core.RabbitMessagingTemplate;import org.springframework.amqp.rabbit.core.RabbitTemplate;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.messaging.converter.MappingJackson2MessageConverter;/** * @Program: distest * @Description: * @Author: wen * @Create: 2018-05-31 17:34 **/@Configurationpublic class QueueConfig {    @Bean    RabbitAdmin rabbitAdmin(ConnectionFactory connectionFactory) {        return new RabbitAdmin(connectionFactory);    }    @Bean    Queue queueEmailSender(RabbitAdmin rabbitAdmin) {        Queue queue = new Queue("queue.emailactivesender", true);        rabbitAdmin.declareQueue(queue);        return queue;    }    @Bean    TopicExchange exchange(RabbitAdmin rabbitAdmin) {        TopicExchange topicExchange = new TopicExchange("exchange.emailactivesender");        rabbitAdmin.declareExchange(topicExchange);        return topicExchange;    }    @Bean    Binding bindingExchangeEmailSender(Queue queueEmailSender, TopicExchange exchange, RabbitAdmin rabbitAdmin) {        Binding binding = BindingBuilder.bind(queueEmailSender).to(exchange).with("queue.emailactivesender");        rabbitAdmin.declareBinding(binding);        return binding;    }    @Bean    public RabbitMessagingTemplate rabbitMessagingTemplate(RabbitTemplate rabbitTemplate) {        rabbitTemplate.setMessageConverter(new ProtobufMessageConverter());        RabbitMessagingTemplate rabbitMessagingTemplate = new RabbitMessagingTemplate();        rabbitMessagingTemplate.setRabbitTemplate(rabbitTemplate);        return rabbitMessagingTemplate;    }    @Bean    public SimpleRabbitListenerContainerFactory rabbitListenerContainerFactory(ConnectionFactory connectionFactory) {        SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory();        factory.setConnectionFactory(connectionFactory);        factory.setMessageConverter(new ProtobufMessageConverter());        factory.setAcknowledgeMode(AcknowledgeMode.AUTO);        return factory;    }}