package com.testwa.distest.config.tomcat;import lombok.extern.slf4j.Slf4j;import org.apache.catalina.valves.AccessLogValve;import org.apache.catalina.valves.Constants;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainer;import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;import org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;import org.springframework.stereotype.Component;import java.io.File;import java.io.IOException;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;/** * @Program: distest * @Description: * @Author: wen * @Create: 2018-04-24 10:05 **/@Slf4j@Componentpublic class DistestEmbeddedServletContainerCustomizer implements EmbeddedServletContainerCustomizer {    @Value("${logging.path}")    private String loggingPath;    @Override    public void customize(ConfigurableEmbeddedServletContainer container) {        //org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory        //说明默认是的Tomcat容器        log.info(container.getClass().getName());        TomcatEmbeddedServletContainerFactory factory = (TomcatEmbeddedServletContainerFactory) container;        //设置端口        factory.setPort(8080);        //设置Tomcat的根目录//        worker.setBaseDirectory(new File(loggingPath));        //设置访问日志存放目录        factory.addContextValves(getLogAccessLogValue());        //设置Tomcat线程数和连接数        factory.addConnectorCustomizers(new DistestTomcatConnectorCustomizer());        //初始化servletContext对象        factory.addInitializers((servletContext) -> {            log.info(" = = = = 获取服务器信息 = = " + servletContext.getServerInfo());        });    }    private AccessLogValve getLogAccessLogValue() {        Path logdir = Paths.get(loggingPath, "distest-web");        if(!Files.exists(logdir)){            try {                Files.createDirectories(logdir);            } catch (IOException e) {                log.error("Files.createDirectories({}) error", logdir.toString(), e);            }        }        AccessLogValve accessLogValve = new AccessLogValve();        accessLogValve.setDirectory(logdir.toString());        accessLogValve.setEnabled(true);        accessLogValve.setPattern(Constants.AccessLog.COMMON_PATTERN);        accessLogValve.setPrefix("tomcat-access");        accessLogValve.setSuffix(".log");        return accessLogValve;    }}