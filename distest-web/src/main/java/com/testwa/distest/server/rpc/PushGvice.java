package com.testwa.distest.server.rpc;import com.testwa.distest.common.enums.DB;import com.testwa.distest.config.security.JwtTokenUtil;import com.testwa.distest.server.entity.Device;import com.testwa.distest.server.entity.IOSDeviceDict;import com.testwa.distest.server.entity.User;import com.testwa.distest.server.service.device.service.DeviceService;import com.testwa.distest.server.rpc.cache.CacheUtil;import com.testwa.distest.server.service.user.service.UserService;import com.testwa.distest.server.web.device.auth.DeviceAuthMgr;import io.grpc.stub.StreamObserver;import io.rpc.testwa.push.*;import lombok.extern.slf4j.Slf4j;import org.lognet.springboot.grpc.GRpcService;import org.springframework.beans.factory.annotation.Autowired;/** * @Program: distest * @Description: pushtest * @Author: wen * @Create: 2018-05-08 15:21 **/@Slf4j@GRpcServicepublic class PushGvice extends PushGrpc.PushImplBase {    @Autowired    private DeviceAuthMgr deviceAuthMgr;    @Autowired    private DeviceService deviceService;    @Autowired    private UserService userService;    @Autowired    private JwtTokenUtil jwtTokenUtil;    @Override    public void registerToServer(ClientInfo request, StreamObserver<Message> responseObserver) {        log.info("device client [{}-{}-{}] register", request.getDeviceId(), request.getBrand(), request.getModel());        String username = jwtTokenUtil.getUsernameFromToken(request.getUserFlag());        User user = userService.findByUsername(username);        Device device = new Device();        device.setBrand(request.getBrand());        device.setCpuabi(request.getCpuabi());        device.setDensity(request.getDensity());        device.setDeviceId(request.getDeviceId());        device.setHost(request.getHost());        device.setOsName(request.getOsName());        device.setOsVersion(request.getVersion());        device.setSdk(request.getSdk());        device.setAppiumserverdebugInstall(request.getAppiumUiautomator2ServerInstall());        device.setAppiumserverInstall(request.getAppiumUiautomator2ServerInstall());        device.setKeyboardserviceInstall(request.getKeyboardserviceInstall());        device.setStfagentInstall(request.getSftagentInstall());        device.setSettingsInstall(request.getSettingsInstall());        device.setUnicodeIMEInstall(request.getUnicodeIMEInstall());        device.setUnlockInstall(request.getUnlockInstall());        device.setSelendroidInstall(request.getSelendroidInstall());        if(user != null) {            device.setLastUserId(user.getId());        }        device.setLastUserToken(request.getUserFlag());        if("android".equals(device.getOsName().toLowerCase())) {            device.setModel(request.getModel());            device.setHeight(request.getHeight());            device.setWidth(request.getWidth());            device.setPhoneOS(DB.PhoneOS.ANDROID);        } else if("ios".equals(device.getOsName().toLowerCase())) {            String model = request.getModel();            IOSDeviceDict dict = deviceService.getIOSDict(model);            if(dict != null){                device.setModel(dict.getName());                device.setHeight(String.valueOf(dict.getHeight()));                device.setWidth(String.valueOf(dict.getWidth()));            }else{                log.warn("NOT found the ios [{}] device dict info.", model);            }            device.setPhoneOS(DB.PhoneOS.IOS);        }else{            device.setPhoneOS(DB.PhoneOS.ANDROID);        }        // 连接上来的设备设置为在线状态        device.setOnlineStatus(DB.PhoneOnlineStatus.ONLINE);        // 设置为空闲状态        device.setWorkStatus(DB.DeviceWorkStatus.FREE);        device.setDebugStatus(DB.DeviceDebugStatus.FREE);        Device deviceBase = deviceService.findByDeviceId(request.getDeviceId());        if(deviceBase == null){            deviceService.insertAndroid(device);        }else{            deviceService.updateAndroid(device);        }        deviceAuthMgr.online(request.getDeviceId());        CacheUtil.serverCache.registerToServer(request, responseObserver);    }    @Override    public void logoutFromServer(ClientInfo request, StreamObserver<Status> responseObserver) {        Status status = CacheUtil.serverCache.logoutFromServer(request);        responseObserver.onNext(status);        responseObserver.onCompleted();    }    @Override    public void subscribe(TopicInfo topicInfo, StreamObserver<Status> responseObserver) {        Status status = CacheUtil.topicCache.subscribeTopic(topicInfo);        responseObserver.onNext(status);        responseObserver.onCompleted();    }    @Override    public void cancel(TopicInfo topicInfo, StreamObserver<Status> responseObserver) {        Status status = CacheUtil.topicCache.cancelTopic(topicInfo);        responseObserver.onNext(status);        responseObserver.onCompleted();    }}