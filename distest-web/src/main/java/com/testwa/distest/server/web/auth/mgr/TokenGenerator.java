package com.testwa.distest.server.web.auth.mgr;import io.jsonwebtoken.Claims;import io.jsonwebtoken.CompressionCodecs;import io.jsonwebtoken.Jwts;import io.jsonwebtoken.SignatureAlgorithm;import lombok.extern.slf4j.Slf4j;import java.util.Date;import java.util.HashMap;import java.util.Map;/** * @Program: distest * @Description: * @Author: wen * @Create: 2018-06-01 16:05 **/@Slf4jpublic class TokenGenerator {    private static final String CLAIM_KEY_USER_CODE = "user_code";    private static final SignatureAlgorithm SIGNATURE_ALGORITHM = SignatureAlgorithm.HS256;    private static final String secret = "2vj&g34Q1Wkbuf9lmCCSCRNQ*v$nkYY4";    public static String getUserCode(String token) {        String userCode;        try {            final Claims claims = Jwts.parser()                    .setSigningKey(secret)                    .parseClaimsJws(token)                    .getBody();            userCode = (String) claims.get(CLAIM_KEY_USER_CODE);        } catch (Exception e) {            userCode = null;            log.error("解析token失败", e);        }        return userCode;    }    public static String generator(String orderCode, String subject, Long expiration) {        Map<String, Object> claims = new HashMap<>();        claims.put(CLAIM_KEY_USER_CODE, orderCode);        return Jwts.builder()                .setClaims(claims)                .setSubject(subject)                .setId(java.util.UUID.randomUUID().toString())                .setIssuedAt(new Date())                .setExpiration(generateExpirationDate(expiration))                .compressWith(CompressionCodecs.DEFLATE)                .signWith(SIGNATURE_ALGORITHM, secret)                .compact();    }    private static Date generateExpirationDate(long expiration) {        return new Date(System.currentTimeMillis() + expiration * 1000);    }    public static void main(String[] args) {        String token = "eyJhbGciOiJIUzI1NiIsInppcCI6IkRFRiJ9.eNocy0sOwjAMRdG9eNxIseP8ug_GlQkuChNQkkqVEHsnMHmDo3ff0I8rrND0XvvQBgscXdtWnjedfNkQOVFmT54CkXNhPvR8wYqekkX2HBeoMv4QE2P8wWPUWStLsTM1LBzmJGeykDXOY9xt5l1Khs8XAAD__w.9-9welIVICZ9dB5OKKDqPlKNOC44FKkuQevwS3yW6NY";        String userCode = getUserCode(token);        System.out.println(userCode);    }}