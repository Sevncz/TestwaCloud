package com.testwa.distest.server.mongo.service;import com.testwa.core.base.vo.PageResult;import com.testwa.distest.server.mongo.model.Step;import com.testwa.distest.server.mongo.repository.StepRepository;import com.testwa.distest.server.service.task.form.StepListForm;import com.testwa.distest.server.service.task.form.StepPageForm;import io.rpc.testwa.task.StepRequest;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.data.domain.Page;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Sort;import org.springframework.data.mongodb.core.query.Criteria;import org.springframework.data.mongodb.core.query.Query;import org.springframework.stereotype.Service;import java.util.Arrays;import java.util.List;/** * @Program: distest * @Description: * @Author: wen * @Create: 2018-05-21 21:51 **/@Servicepublic class StepService extends BaseService {    private static final List<String> exceptTheRunStep = Arrays.asList(StepRequest.StepAction.installApp.name(),            StepRequest.StepAction.launch.name(), StepRequest.StepAction.uninstallApp.name()            );    @Autowired    private StepRepository stepRepository;    public void save(Step entity){        stepRepository.save(entity);    }    public void delete(String entityId){        stepRepository.delete(entityId);    }    public Page<Step> findAll(PageRequest pageRequest) {        return stepRepository.findAll(pageRequest);    }    public List<Step> findBy(Long taskId) {        return stepRepository.findByTaskCode(taskId);    }    public List<Step> findBy(Long taskId, String deviceId) {        return stepRepository.findByTaskCodeAndDeviceId(taskId, deviceId);    }    public PageResult<Step> pageCompatibilityStep(Long taskCode, String deviceId, StepPageForm form) {        Query query = new Query();        query.addCriteria(Criteria.where("taskCode").is(taskCode));        query.addCriteria(Criteria.where("deviceId").is(deviceId));        int pageNum = form.getPageNo();        int rows = form.getPageSize();        String sortField = "timestamp";        Sort sort = new Sort(Sort.Direction.ASC, sortField);        PageRequest pageRequest = new PageRequest(pageNum, rows, sort);        Page<Step> page = stepRepository.find(query, pageRequest);        return new PageResult<>(page.getContent(), page.getTotalElements());    }    public PageResult<Step> pageFunctionalStep(Long taskCode, String deviceId, Long scriptId, StepPageForm form) {        Query query = new Query();        query.addCriteria(Criteria.where("taskCode").is(taskCode));        query.addCriteria(Criteria.where("deviceId").is(deviceId));        query.addCriteria(Criteria.where("scriptId").is(scriptId));        int pageNum = form.getPageNo();        int rows = form.getPageSize();        String sortField = "timestamp";        Sort sort = new Sort(Sort.Direction.ASC, sortField);        PageRequest pageRequest = new PageRequest(pageNum, rows, sort);        Page<Step> page = stepRepository.find(query, pageRequest);        return new PageResult<>(page.getContent(), page.getTotalElements());    }    public List<Step> listTaskAll(Long taskCode, String deviceId) {        Query query = new Query();        query.addCriteria(Criteria.where("taskCode").is(taskCode));        query.addCriteria(Criteria.where("deviceId").is(deviceId));        query.addCriteria(Criteria.where("action").is(StepRequest.StepAction.operation.name()));        return stepRepository.find(query);    }    public List<Step> listScriptAll(Long taskCode, String deviceId, Long scriptId) {        Query query = new Query();        query.addCriteria(Criteria.where("taskCode").is(taskCode));        query.addCriteria(Criteria.where("deviceId").is(deviceId));        query.addCriteria(Criteria.where("ScriptId").is(scriptId));        return stepRepository.find(query);    }    public Step findOne(String entityId) {        return stepRepository.findOne(entityId);    }    public Step findNextById(String stepId) {        Step step = stepRepository.findOne(stepId);        Long timeStamp = step.getTimestamp();        Query query = new Query();        String field = "timestamp";        query.addCriteria(Criteria.where(field).gt(timeStamp));        query.addCriteria(Criteria.where("sessionId").is(step.getSessionId()));        query.limit(1);        Sort sort = new Sort(Sort.Direction.ASC, field);        query.with(sort);        List<Step> nextList = stepRepository.find(query);        if(nextList != null && !nextList.isEmpty()){            return nextList.get(0);        }        return null;    }    public List<Step> listErrorStatusStep(Long taskCode) {        Criteria criteria = new Criteria().andOperator(Criteria.where("taskCode").is(taskCode),                Criteria.where("status").ne(StepRequest.StepStatus.SUCCESS),                Criteria.where("action").in(exceptTheRunStep)        );        Query query = new Query(criteria);        return stepRepository.find(query);    }    public Step getLaunchStep(Long taskCode, String deviceId) {        Criteria criteria = new Criteria().andOperator(                Criteria.where("taskCode").is(taskCode),                Criteria.where("deviceId").is(deviceId),                Criteria.where("action").is(StepRequest.StepAction.launch.name())        );        Query query = new Query(criteria);        return stepRepository.findOne(query);    }}