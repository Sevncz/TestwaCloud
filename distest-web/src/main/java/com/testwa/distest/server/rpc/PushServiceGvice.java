package com.testwa.distest.server.rpc;import com.testwa.distest.common.enums.DB;import com.testwa.distest.config.security.JwtTokenUtil;import com.testwa.distest.server.entity.Device;import com.testwa.distest.server.entity.DeviceShareScope;import com.testwa.distest.server.entity.IosDeviceDict;import com.testwa.distest.server.entity.User;import com.testwa.distest.server.service.device.service.DeviceService;import com.testwa.distest.server.rpc.cache.CacheUtil;import com.testwa.distest.server.service.device.service.DeviceShareScopeService;import com.testwa.distest.server.service.user.service.UserService;import com.testwa.distest.server.web.device.mgr.DeviceOnlineMgr;import com.testwa.distest.server.web.device.mgr.DeviceLockMgr;import io.grpc.stub.StreamObserver;import io.rpc.testwa.agent.*;import lombok.extern.slf4j.Slf4j;import net.devh.springboot.autoconfigure.grpc.server.GrpcService;import org.springframework.beans.factory.annotation.Autowired;/** * @Program: distest 推送管理 * @Description: pushtest * @Author: wen * @Create: 2018-05-08 15:21 **/@Slf4j@GrpcService(PushServiceGrpc.class)public class PushServiceGvice extends PushServiceGrpc.PushServiceImplBase {    @Autowired    private DeviceOnlineMgr deviceOnlineMgr;    @Autowired    private DeviceService deviceService;    @Autowired    private DeviceLockMgr deviceLockMgr;    @Autowired    private UserService userService;    @Autowired    private JwtTokenUtil jwtTokenUtil;    @Autowired    private DeviceShareScopeService deviceShareScopeService;    @Override    public void registerToServer(ClientInfo request, StreamObserver<Message> responseObserver) {        log.info("device client [{}-{}-{}] register", request.getDeviceId(), request.getBrand(), request.getModel());        String username = jwtTokenUtil.getUsernameFromToken(request.getUserFlag());        User user = userService.findByUsername(username);        Device device = new Device();        device.setBrand(request.getBrand());        device.setCpuabi(request.getCpuabi());        device.setDensity(request.getDensity());        device.setDeviceId(request.getDeviceId());        device.setHost(request.getHost());        device.setOsName(request.getOsName());        device.setOsVersion(request.getVersion());        device.setSdk(request.getSdk());        device.setAppiumserverdebugInstall(request.getAppiumUiautomator2ServerInstall());        device.setAppiumserverInstall(request.getAppiumUiautomator2ServerInstall());        device.setKeyboardserviceInstall(request.getKeyboardserviceInstall());        device.setStfagentInstall(request.getSftagentInstall());        device.setSettingsInstall(request.getSettingsInstall());        device.setUnicodeIMEInstall(request.getUnicodeIMEInstall());        device.setUnlockInstall(request.getUnlockInstall());        device.setSelendroidInstall(request.getSelendroidInstall());        device.setHeight(request.getHeight());        device.setWidth(request.getWidth());        device.setModel(request.getModel());        device.setRemoteConnectPort(request.getRemoteConnectPort());        device.setIp(request.getIp());        if(user != null) {            device.setLastUserId(user.getId());        }        device.setLastUserToken(request.getUserFlag());        if(DB.PhoneOS.ANDROID.getDesc().toLowerCase().equals(device.getOsName().toLowerCase())) {            device.setEnableConnected(request.getTcpipCommandSuccessed());            device.setPhoneOS(DB.PhoneOS.ANDROID);        } else if(DB.PhoneOS.IOS.getDesc().toLowerCase().equals(device.getOsName().toLowerCase())) {            device.setPhoneOS(DB.PhoneOS.IOS);        }else{            device.setPhoneOS(DB.PhoneOS.ANDROID);        }        device.setOnlineStatus(DB.PhoneOnlineStatus.ONLINE);        device.setWorkStatus(DB.DeviceWorkStatus.FREE);        device.setDebugStatus(DB.DeviceDebugStatus.FREE);        device.setEnabled(true);        Device deviceBase = deviceService.findByDeviceId(request.getDeviceId());        if(deviceBase == null){            deviceService.insertAndroid(device);        }else{            deviceService.updateAndroid(device);        }        if(user != null) {            DeviceShareScope dss = deviceShareScopeService.findOneByDeviceIdAndCreateBy(device.getDeviceId(), device.getLastUserId());            if(dss == null) {                deviceShareScopeService.updateOrSave(device.getDeviceId(), device.getLastUserId(), DB.DeviceShareScopeEnum.Public.getValue());            }        }        // 设置为空闲状态        deviceLockMgr.debugReleaseForce(device.getDeviceId());        deviceLockMgr.workRelease(device.getDeviceId());        // 设置在线状态        deviceOnlineMgr.online(request.getDeviceId());        CacheUtil.serverCache.registerToServer(request, responseObserver);        // 返回成功消息        Message msg = Message.newBuilder().setTopicName(Message.Topic.CONNECTED).build();        responseObserver.onNext(msg);    }    @Override    public void logoutFromServer(ClientInfo request, StreamObserver<Status> responseObserver) {        Status status = CacheUtil.serverCache.logoutFromServer(request);        responseObserver.onNext(status);        responseObserver.onCompleted();    }    @Override    public void subscribe(TopicInfo topicInfo, StreamObserver<Status> responseObserver) {        Status status = CacheUtil.topicCache.subscribeTopic(topicInfo);        responseObserver.onNext(status);        responseObserver.onCompleted();    }    @Override    public void cancel(TopicInfo topicInfo, StreamObserver<Status> responseObserver) {        Status status = CacheUtil.topicCache.cancelTopic(topicInfo);        responseObserver.onNext(status);        responseObserver.onCompleted();    }}