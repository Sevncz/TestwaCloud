package com.testwa.distest.server.web.device.mgr;import com.testwa.core.utils.TimeUtil;import com.testwa.distest.server.service.cache.mgr.DeviceLockCache;import com.testwa.distest.server.service.device.service.DeviceService;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import java.util.List;import java.util.Set;/** * @Program: distest * @Description: 设备锁管理 * @Author: wen * @Create: 2018-07-18 10:44 **/@Slf4j@Componentpublic class DeviceLockMgr {    private final static Long default_expire_second = 30 * 60L; // 默认30分钟锁定时间    @Autowired    private DeviceLockCache cache;    @Autowired    private DeviceService deviceService;    /**     *@Description: 调试时锁定设备     *@Param: [deviceId, userCode]     *@Return: void     *@Author: wen     *@Date: 2018/7/18     */    public boolean debugLock(String deviceId, String sessionId) {        boolean islock = cache.lock(deviceId, sessionId, default_expire_second);        if(islock) {            deviceService.debugging(deviceId);        }        return islock;    }    /**     *@Description: 调试结束之后解锁     *@Param: [deviceId, userCode]     *@Return: void     *@Author: wen     *@Date: 2018/7/18     */    public boolean debugRelease(String deviceId, String sessionId) {        log.info("Release debug [{}, {}] ", deviceId, sessionId);        boolean isRelease = cache.release(deviceId, sessionId);        if(isRelease) {            deviceService.debugFree(deviceId);        }        return isRelease;    }    /**     * @Description: 强制解锁     * @Param: [deviceId]     * @Return: void     * @Author wen     * @Date 2018/10/23 15:51     */    public boolean debugReleaseForce(String deviceId) {        log.info("Release debug [{}] ", deviceId);        boolean isRelease = cache.releaseForce(deviceId);        deviceService.debugFree(deviceId);        return isRelease;    }    /**     *@Description: 执行测试任务时锁定设备     *@Param: [deviceId, userCode]     *@Return: void     *@Author: wen     *@Date: 2018/7/18     */    public void workLock(String deviceId, String userCode) {        cache.lock(deviceId, userCode, default_expire_second);        deviceService.work(deviceId);    }    /**     *@Description: 执行测试任务时锁定设备     *@Param: [deviceId, userCode, workExpireTime]     *@Return: void     *@Author: wen     *@Date: 2018/7/18     */    public void workLock(String deviceId, String userCode, Integer workExpireMin) {        cache.lock(deviceId, userCode, workExpireMin * 60L);        deviceService.work(deviceId);    }    /**     *@Description: 任务执行完成之后解锁     *@Param: [deviceId, userCode, workExpireTime]     *@Return: void     *@Author: wen     *@Date: 2018/7/18     */    public void workRelease(String deviceId) {        log.info("Release work [{}] ", deviceId);        cache.releaseForce(deviceId);        deviceService.release(deviceId);    }    public List<String> getLockList() {        return cache.getAll();    }}