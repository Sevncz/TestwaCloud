package com.testwa.distest.server.service.cache.mgr;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.StringUtils;import org.redisson.api.RBucket;import org.redisson.api.RKeys;import org.redisson.api.RedissonClient;import org.springframework.stereotype.Component;import javax.annotation.Resource;import java.util.ArrayList;import java.util.Iterator;import java.util.List;import java.util.concurrent.TimeUnit;/** * @Program: distest * @Description: 设备锁定管理 * @Author: wen * @Create: 2018-06-04 11:06 **/@Slf4j@Componentpublic class DeviceLockCache {    private static final String key = "lock.device.";    @Resource    private RedissonClient redissonClient;    /**     *@Description: 锁定一个设备，value可以是sessionId，也可以是taskCode，锁定成功后返回的是1，失败返回0     *@Param: [deviceId, value]     *@Return: boolean     *@Author: wen     *@Date: 2018/6/4     */    public synchronized boolean lock(String deviceId, String value, Long expireSecond) {        RBucket<Object> bucket = redissonClient.getBucket(getKey(deviceId));        boolean islock = bucket.trySet(value, expireSecond, TimeUnit.SECONDS);        return islock;    }    public synchronized boolean release(String deviceId, String value) {        RBucket<Object> bucket = redissonClient.getBucket(getKey(deviceId));        if(!bucket.isExists()){            return true;        }        String lockvalue = (String) bucket.get();        if(StringUtils.isNotBlank(lockvalue) && lockvalue.equals(value)) {            bucket.delete();            return true;        }        return false;    }    /**     *@Description: 强制解锁     *@Param: [deviceId]     *@Return: boolean     *@Author: wen     *@Date: 2018/7/6     */    public synchronized boolean releaseForce(String deviceId) {        RBucket<Object> bucket = redissonClient.getBucket(getKey(deviceId));        bucket.delete();        return true;    }    private String getKey(String deviceId) {        return key + deviceId;    }    public String getValue(String deviceId) {        RBucket<Object> bucket = redissonClient.getBucket(getKey(deviceId));        return (String) bucket.get();    }    /**     *@Description: 判断是否被锁     *@Param: [deviceId]     *@Return: boolean     *@Author: wen     *@Date: 2018/6/4     */    public boolean isLocked(String deviceId) {        RBucket<Object> bucket = redissonClient.getBucket(getKey(deviceId));        return bucket.isExists();    }    public List<String> getAll() {        String parttenKey = key + "*";        RKeys keys = redissonClient.getKeys();        Iterator<String> it = keys.getKeysByPattern(parttenKey).iterator();        List<String> deviceIds = new ArrayList<>();        while(it.hasNext()) {            String k = it.next();            deviceIds.add(k.replace(key, ""));        }        return deviceIds;    }}