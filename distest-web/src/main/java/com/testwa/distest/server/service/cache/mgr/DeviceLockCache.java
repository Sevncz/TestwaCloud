package com.testwa.distest.server.service.cache.mgr;import com.testwa.core.redis.RedisCacheManager;import com.testwa.distest.server.service.device.service.DeviceService;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import java.util.List;import java.util.Set;import java.util.stream.Collectors;/** * @Program: distest * @Description: 设备锁定管理 * @Author: wen * @Create: 2018-06-04 11:06 **/@Slf4j@Componentpublic class DeviceLockCache {    private static final String key = "lock.device.";    @Autowired    private RedisCacheManager redisCacheManager;    /**     *@Description: 锁定一个设备，value可以是sessionId，也可以是taskCode，锁定成功后返回的是1，失败返回0     *@Param: [deviceId, value]     *@Return: boolean     *@Author: wen     *@Date: 2018/6/4     */    public synchronized boolean lock(String deviceId, String value, int expire_second) {        String key = getKey(deviceId);        long islock = redisCacheManager.setnx(key, expire_second, value);        return islock == 1;    }    public synchronized boolean release(String deviceId, String value) {        String key = getKey(deviceId);        if(!redisCacheManager.existsKey(key)){            return true;        }        String lockvalue = getValue(deviceId);        if(StringUtils.isNotBlank(lockvalue) && lockvalue.equals(value)) {            redisCacheManager.remove(key);            return true;        }        return false;    }    /**     *@Description: 强制解锁     *@Param: [deviceId]     *@Return: boolean     *@Author: wen     *@Date: 2018/7/6     */    public synchronized boolean releaseForce(String deviceId) {        String key = getKey(deviceId);        redisCacheManager.remove(key);        return true;    }    private String getKey(String deviceId) {        return key + deviceId;    }    public String getValue(String deviceId) {        return (String) redisCacheManager.get(getKey(deviceId));    }    /**     *@Description: 判断是否被锁     *@Param: [deviceId]     *@Return: boolean     *@Author: wen     *@Date: 2018/6/4     */    public boolean isLocked(String deviceId) {        String key = getKey(deviceId);        return redisCacheManager.existsKey(key);    }    /**     *@Description: 更新锁的过期时间     *@Param: [deviceId, userCode, workExpireTime]     *@Return: void     *@Author: wen     *@Date: 2018/6/4     */    public void updateLock(String deviceId, Integer expire_second) {        String key = getKey(deviceId);        redisCacheManager.extendTime(key, expire_second * 1000);    }    public List<String> getAll() {        String parttenKey = key + "*";        Set<String> keys = redisCacheManager.keys(parttenKey);        List<String> deviceIds = keys.stream()                .map(str -> str.split(key)[1])                .collect(Collectors.toList());        return deviceIds;    }}