package com.testwa.distest.server.service.mq;import com.alibaba.fastjson.JSON;import com.testwa.distest.server.entity.User;import io.rpc.testwa.msg.Forget;import io.rpc.testwa.msg.Register;import io.rpc.testwa.msg.UserInfo;import org.springframework.amqp.core.Message;import org.springframework.amqp.core.MessageBuilder;import org.springframework.amqp.rabbit.core.RabbitMessagingTemplate;import org.springframework.amqp.rabbit.core.RabbitTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Service;import java.util.HashMap;import java.util.Map;/** * @Program: distest * @Description: * @Author: wen * @Create: 2018-05-31 11:43 **/@Servicepublic class MQService {    private static final String EX_EMAIL = "exchange.email";    private static final String Q_EMAIL = "queue.email";    private static final String EX_EMAIL_ACTIVE = "exchange.email.active";    private static final String Q_EMAIL_ACTIVE = "queue.email.active";    private static final String EX_EMAIL_FORGET = "exchange.email.forget";    private static final String Q_EMAIL_FORGET = "queue.email.forget";    @Autowired    private RabbitMessagingTemplate rabbitMessagingTemplate;    @Autowired    private RabbitTemplate rabbitTemplate;    @Value("${register.active.url}")    private String activeBaseUrl;    @Value("${password.reset.url}")    private String passwordRestUrl;    public void sendActiveEmail(User user, String token) {        UserInfo userInfo = getUserInfo(user);        String activeUrl = activeBaseUrl + "/" + token;        Register register = Register.newBuilder()                .setUser(userInfo)                .setUrl(activeUrl)                .build();        Integer exp = 24*60*60*1000;//        Message msg = MessageBuilder.withBody(register.toByteArray()).setExpiration(exp + "").build();//        rabbitTemplate.send(EX_EMAIL_ACTIVE, Q_EMAIL_ACTIVE, msg);        Map<String, Object> headers = new HashMap<>();        headers.put("messageType", Register.class.getSimpleName());        rabbitMessagingTemplate.convertAndSend(EX_EMAIL, Q_EMAIL, register, headers);    }    /**     *@Description: 发送忘记密码邮件     *@Param: [user, orderCode]     *@Return: void     *@Author: wen     *@Date: 2018/6/1     */    public void sendForgetPwdEmail(User user, String token) {        UserInfo userInfo = getUserInfo(user);        String activeUrl = passwordRestUrl + "/" + token;        Forget forget = Forget.newBuilder()                .setUser(userInfo)                .setUrl(activeUrl)                .build();//        Integer exp = 24*60*60*1000;//        Message msg = MessageBuilder.withBody(forget.toByteArray()).setExpiration(exp + "").build();//        rabbitTemplate.send(EX_EMAIL_FORGET, Q_EMAIL_FORGET, msg);        Map<String, Object> headers = new HashMap<>();        headers.put("messageType", Forget.class.getSimpleName());        rabbitMessagingTemplate.convertAndSend(EX_EMAIL, Q_EMAIL, forget, headers);    }    private UserInfo getUserInfo(User user) {        return UserInfo.newBuilder()                    .setEmail(user.getEmail())                    .setIsActive(user.getIsActive())                    .setUsername(user.getUsername())                    .build();    }}