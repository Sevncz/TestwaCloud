package com.testwa.distest.client.component.executor.proxy;import com.alibaba.fastjson.JSON;import com.testwa.core.cmd.RemoteRunCommand;import com.testwa.core.utils.TimeUtil;import com.testwa.distest.client.ApplicationContextUtil;import com.testwa.distest.client.event.ExecutorLogNotifyEvent;import com.testwa.distest.client.model.ExecutorLogInfo;import io.rpc.testwa.task.ExecutorAction;import lombok.extern.slf4j.Slf4j;import net.sf.cglib.proxy.MethodInterceptor;import net.sf.cglib.proxy.MethodProxy;import org.springframework.context.ApplicationContext;import java.lang.reflect.Method;import java.util.Arrays;@Slf4jpublic class ExecutorCglibProxy implements MethodInterceptor {    private RemoteRunCommand cmd;    public ExecutorCglibProxy(RemoteRunCommand cmd){        this.cmd = cmd;    }    @Override    public Object intercept(Object proxy, Method method, Object[] args,                            MethodProxy invocation) throws Throwable {        // 日志开始        log.debug("the method [" + method.getName() + "]"                + "begin with args (" + Arrays.toString(args) + ")");        ExecutorLog actionInfo = method.getAnnotation(ExecutorLog.class);        ExecutorAction action = null;        if(actionInfo != null){            action = actionInfo.action();            methodStartLogToServer(cmd, action.name(), action.getNumber(), method.getName(), args);        }        Object result = invocation.invokeSuper(proxy, args);        if(actionInfo != null){            methodEndLogToServer(cmd, action.name(), action.getNumber(), method.getName(), args);        }        // 日志结束        log.debug("the method [" + method.getName() + "]"                + "end with result (" + result + ")");        return result;    }    private void methodStartLogToServer(RemoteRunCommand cmd, String methodDesc, int order, String methodName, Object[] args) {        log.debug("{} - {}", cmd.getDeviceId(), methodDesc);        ApplicationContext context = ApplicationContextUtil.getApplicationContext();        ExecutorLogInfo logInfo = new ExecutorLogInfo();        logInfo.setMethodDesc(methodDesc);        logInfo.setArgs(JSON.toJSONString(args));        logInfo.setDeviceId(cmd.getDeviceId());        logInfo.setFlag("start");        logInfo.setMethodName(methodName);        logInfo.setTaskId(cmd.getTaskCode());        logInfo.setOrder(order);        logInfo.setTime(TimeUtil.getTimestampLong());        context.publishEvent(new ExecutorLogNotifyEvent(this, logInfo));    }    private void methodEndLogToServer(RemoteRunCommand cmd, String methodDesc, int order, String methodName, Object[] args) {        ApplicationContext context = ApplicationContextUtil.getApplicationContext();        ExecutorLogInfo logInfo = new ExecutorLogInfo();        logInfo.setMethodDesc(methodDesc);        logInfo.setArgs(JSON.toJSONString(args));        logInfo.setDeviceId(cmd.getDeviceId());        logInfo.setFlag("end");        logInfo.setMethodName(methodName);        logInfo.setTaskId(cmd.getTaskCode());        logInfo.setOrder(order);        logInfo.setTime(TimeUtil.getTimestampLong());        context.publishEvent(new ExecutorLogNotifyEvent(this, logInfo));    }}