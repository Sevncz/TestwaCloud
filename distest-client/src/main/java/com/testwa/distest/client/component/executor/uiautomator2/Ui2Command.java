package com.testwa.distest.client.component.executor.uiautomator2;import com.alibaba.fastjson.JSONObject;import com.android.ddmlib.IDevice;import com.testwa.core.shell.UTF8CommonExecs;import com.testwa.distest.client.android.ADBCommandUtils;import com.testwa.distest.client.android.ADBTools;import com.testwa.distest.client.exception.CommandFailureException;import lombok.Data;import lombok.extern.slf4j.Slf4j;import org.apache.commons.exec.CommandLine;import org.apache.commons.lang3.StringUtils;import org.springframework.web.client.RestTemplate;import java.io.IOException;import java.util.HashMap;import java.util.Map;import java.util.concurrent.Executors;import java.util.concurrent.ScheduledExecutorService;import java.util.concurrent.ScheduledFuture;import java.util.concurrent.TimeUnit;import static com.testwa.distest.client.component.executor.worker.AbstractExecutor.TESTWA_PWD;/** * @Program: distest * @Description: * @Author: wen * @Create: 2018-06-08 16:39 **/@Data@Slf4jpublic class Ui2Command {    protected final ScheduledExecutorService scheduledExecutor = Executors.newScheduledThreadPool(15);    private String sessionId;    private String baseUrl;    private String statusUrl;    private Map<String, ScheduledFuture> installFutures = new HashMap<>();    private ScheduledFuture runningAlterFuture;    private RestTemplate restTemplate;    public Ui2Command(int port) {        this.baseUrl = String.format("http://127.0.0.1:%s/wd/hub/session", port);        this.statusUrl = String.format("http://127.0.0.1:%s/wd/hub/status", port);    }    public Ui2Command(String port) {        this.baseUrl = String.format("http://127.0.0.1:%s/wd/hub/session", port);        this.statusUrl = String.format("http://127.0.0.1:%s/wd/hub/status", port);        int waite = 30;        while(!status() || waite <= 0) {            try {                waite--;                TimeUnit.SECONDS.sleep(1);            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }    public String createSession() {        JSONObject params = new JSONObject();        params.put("capabilities", new JSONObject());        try {            Response response = Client.post(this.baseUrl, "", params);            if (response.isSuccessful()) {                this.sessionId = response.getSessionId();                log.debug("[Ui2] 已连接成功");                return this.sessionId;            }        } catch (CommandFailureException e) {            log.warn("Create session error {} ...", baseUrl);        }        return null;    }    public boolean getSource() {        // /wd/hub/getSource//        JSONObject params = new JSONObject();//        params.put("strategy", "-android uiautomator");//        params.put("selector", "new UiSelector().text(\"abcdefg\")");//        params.put("context", "");        String path = "/" + this.sessionId + "/source";        try {            Response response = Client.get(this.baseUrl, path);            if (response.isSuccessful()) {                return true;            } else {                String value = response.getValue();                if (StringUtils.isNotBlank(value) && value.trim().contains("exception")) {                    return false;                }            }        } catch (CommandFailureException e) {            log.error("get dump from ui2server error", e);        }        return false;    }    public boolean status() {        // /wd/hub/status        try {            Response response = Client.get(this.statusUrl, "");            if (response.isSuccessful()) {                return true;            }        } catch (CommandFailureException e) {            log.warn("Uiautomator server 还未启动 {} ", this.statusUrl);        }        return false;    }    /**     * @Description: 例子     * {{base_url}}/wd/hub/session/{{sessionId}}/element   post     * {     * "strategy": "-android uiautomator",     * "selector": "new UiSelector().text(\"继续安装\")",     * "context": ""     * }     * @Param: [selector]     * @Return: String     * @Author: wen     * @Date: 2018/6/8     */    public String findElement(String selector) {        JSONObject params = new JSONObject();        params.put("strategy", "-android uiautomator");        params.put("selector", selector);        params.put("context", "");        String path = "/" + this.sessionId + "/element";        try {            Response response = Client.post(this.baseUrl, path, params);            if (response.isSuccessful()) {                return response.getElementId();            }        } catch (CommandFailureException e) {//            log.error("find element error", e);            log.warn("findElement fail {}, uiautomator maybe launching or crash", selector);        }        return null;    }    public String findElementById(String id) {        JSONObject params = new JSONObject();        params.put("strategy", "id");        params.put("selector", id);        params.put("context", "");        String path = "/" + this.sessionId + "/element";        log.info("Find element {}", id);        try {            Response response = Client.post(this.baseUrl, path, params);            if (response.isSuccessful()) {                return response.getElementId();            }        } catch (CommandFailureException e) {            log.warn("findElementById fail {}, uiautomator maybe crash", id);        }        return null;    }    /**     * @Description: {{base_url}}/wd/hub/session/{{sessionId}}/element/{{elementId}}/click   post     * @Param: [elementId]     * @Return: boolean     * @Author: wen     * @Date: 2018/6/8     */    public boolean click(String elementId) {        if (StringUtils.isBlank(elementId)) {            return false;        }        JSONObject params = new JSONObject();        params.put("element", elementId);        String path = "/" + this.sessionId + "/element/" + elementId + "/click";        try {            Response response = Client.post(this.baseUrl, path, params);            return response.isSuccessful();        } catch (CommandFailureException e) {            log.warn("click fail {}, uiautomator maybe crash", elementId);        }        return false;    }    public boolean click(int x, int y) {        JSONObject params = new JSONObject();        params.put("x", x);        params.put("y", y);        String path = "/" + this.sessionId + "/appium/tap";        try {            Response response = Client.post(this.baseUrl, path, params);            return response.isSuccessful();        } catch (CommandFailureException e) {            log.warn("click fail {} {}, uiautomator maybe crash", x, y);        }        return false;    }    public boolean inputText(String elementId, String text) {        JSONObject params = new JSONObject();        params.put("elementId", elementId);        params.put("text", text);        params.put("replace", false);        String path = "/" + this.sessionId + "/element/" + elementId + "/value";        try {            Response response = Client.post(this.baseUrl, path, params);            return response.isSuccessful();        } catch (CommandFailureException e) {            log.warn("inputText fail {} {}, uiautomator maybe crash", elementId, text);        }        return false;    }    /**     * @Description: {{base_url}}/wd/hub/session/{{sessionId}}/element/{{elementId}}/rect     * {     * "sessionId": "c172e964-7814-4776-8ce6-e976d7a5f0d6",     * "getSource": 0,     * "value": {     * "x": 0,     * "y": 1661,     * "width": 1080,     * "height": 355     * }     * }     * @Param: [elementId]     * @Return: boolean     * @Author: wen     * @Date: 2018/6/11     */    public Bounds rect(String elementId) {        String path = "/" + this.sessionId + "/element/" + elementId + "/rect";        try {            Response response = Client.get(this.baseUrl, path);            log.warn("Element value, response {}", response.getValue().toString());            if (response.isSuccessful()) {                JSONObject jsonObject = response.getValue();                Bounds bounds = new Bounds();                bounds.setX(jsonObject.getInteger("x"));                bounds.setY(jsonObject.getInteger("y"));                bounds.setWidth(jsonObject.getInteger("width"));                bounds.setHight(jsonObject.getInteger("height"));                return bounds;            }        } catch (CommandFailureException e) {            log.warn("Element value, element {} not found", elementId);        }        return null;    }    public void startInstallCheck(String deviceId) {        String model = ADBTools.getProp(deviceId, IDevice.PROP_DEVICE_MODEL);        if (model.toLowerCase().startsWith("xiaomi") || model.toLowerCase().startsWith("redmi")) {            log.info("[{}] 处理小米 {}弹框", deviceId, model);            processXIAOMI();        }else if (model.toLowerCase().startsWith("oppo")) {            log.info("[{}] 处理OPPO {}弹框", deviceId, model);            processOPPO();        }else if (model.toLowerCase().startsWith("vivo")) {            log.info("[{}] 处理VIVO {}弹框", deviceId, model);            processVIVO();        } else {            processAlter();        }    }    public void stopInstallCheck() {        installFutures.values().forEach(f -> {            if (!f.isCancelled()) {                f.cancel(true);            }        });    }    public void startProcessRunningAlter() {        int initialDelay = 500;        int period = 300;        runningAlterFuture = scheduledExecutor.scheduleWithFixedDelay(this::processRunningAlter, initialDelay, period, TimeUnit.MILLISECONDS);    }    public void stopProcessRunningAlter() {        if (runningAlterFuture != null) {            runningAlterFuture.cancel(true);        }    }    private void processRunningAlter() {        clickAllowBtn();    }    private void clickAllowBtn() {        String[] texts = {"允许", "始终允许", "继续", "确认", "确定", "仍然拒绝"};        clickByTexts(texts);    }    private void processAlter() {        int initialDelay = 2;        int period = 1;        ScheduledFuture future = scheduledExecutor.scheduleWithFixedDelay(this::clickOK, initialDelay, period, TimeUnit.SECONDS);        installFutures.put("clickAlter", future);    }    void processXIAOMI() {        int initialDelay = 2;        int period = 1;        ScheduledFuture future = scheduledExecutor.scheduleWithFixedDelay(this::clickContinueInstall, initialDelay, period, TimeUnit.SECONDS);        installFutures.put("clickXiaoMiContinueInstall", future);    }    void processOPPO() {        int period = 2;        ScheduledFuture inputFuture = scheduledExecutor.scheduleWithFixedDelay(this::oppoPwd, 2, period, TimeUnit.SECONDS);        installFutures.put("oppoPwd", inputFuture);        // 点击继续安装        ScheduledFuture clickContinueInstallFuture = scheduledExecutor.scheduleWithFixedDelay(this::clickContinueInstall, 3, period, TimeUnit.SECONDS);        installFutures.put("clickContinueInstall", clickContinueInstallFuture);        // 点击继续安装        ScheduledFuture clickContinueInstallOppoFuture = scheduledExecutor.scheduleWithFixedDelay(this::clickContinueInstallOppo, 3, period, TimeUnit.SECONDS);        installFutures.put("clickContinueInstallOppo", clickContinueInstallOppoFuture);        // 点击安装旧版本        ScheduledFuture clickContinueInstallOldFuture = scheduledExecutor.scheduleWithFixedDelay(this::clickContinueInstallOld, 3, period, TimeUnit.SECONDS);        installFutures.put("clickContinueInstallOld", clickContinueInstallOldFuture);        // 点击安装        ScheduledFuture clickInstallXYFuture = scheduledExecutor.scheduleWithFixedDelay(this::clickInstallXY, 4, period, TimeUnit.SECONDS);        installFutures.put("clickInstallXY", clickInstallXYFuture);        // 点击安装        ScheduledFuture clickInstallFuture = scheduledExecutor.scheduleWithFixedDelay(this::clickInstall, 4, period, TimeUnit.SECONDS);        installFutures.put("clickInstall", clickInstallFuture);    }    void oppoPwd() {        if (inputPwd()) {            clickInstall();        }    }    protected void processVIVO() {        int period = 2;        ScheduledFuture inputFuture = scheduledExecutor.scheduleWithFixedDelay(this::vivoPwd, 2, period, TimeUnit.SECONDS);        installFutures.put("vivoPwd", inputFuture);        ScheduledFuture clickContinueInstallFuture = scheduledExecutor.scheduleWithFixedDelay(this::clickContinueInstall, 3, period, TimeUnit.SECONDS);        installFutures.put("clickContinueInstall", clickContinueInstallFuture);        ScheduledFuture clickContinueInstallOldFuture = scheduledExecutor.scheduleWithFixedDelay(this::clickContinueInstallOld, 3, period, TimeUnit.SECONDS);        installFutures.put("clickContinueInstallOld", clickContinueInstallOldFuture);        ScheduledFuture clickInstallFuture = scheduledExecutor.scheduleWithFixedDelay(this::clickInstall, 4, period, TimeUnit.SECONDS);        installFutures.put("clickInstall", clickInstallFuture);    }    void vivoPwd() {        if (findUnknowSources()) {            if (inputPwd()) {                clickOK();            }        }    }    private boolean findUnknowSources() {        try {            this.createSession();            String elementId = this.findElement("new UiSelector().textContains(\"电脑端未知来源\")");            if (StringUtils.isNotBlank(elementId)) {                return true;            }        } catch (Exception e) {            e.printStackTrace();        }        return false;    }    private boolean inputPwd() {        try {            this.createSession();            String elementId = this.findElement("new UiSelector().className(\"android.widget.EditText\")");            if (StringUtils.isNotBlank(elementId)) {                if (this.inputText(elementId, TESTWA_PWD)) {                    return true;                }            }        } catch (Exception e) {            e.printStackTrace();        }        return false;    }    private boolean clickInstall() {        try {            String elementId = this.findElement("new UiSelector().text(\"安装\")");            if (StringUtils.isNotBlank(elementId)) {                if (this.click(elementId)) {                    return true;                }            }        } catch (Exception e) {            e.printStackTrace();        }        return false;    }    private boolean clickOK() {        String[] texts = {"确定", "确认", "继续", "仍然继续", "仍然安装", "同意"};        return clickByTexts(texts);    }    private boolean clickByTexts(String[] texts) {        try {            this.createSession();            for (String t : texts) {                String elementId = this.findElement("new UiSelector().text(\"" + t + "\")");                if (StringUtils.isNotBlank(elementId)) {                    if (this.click(elementId)) {                        return true;                    }                }            }        } catch (Exception e) {            e.printStackTrace();        }        return false;    }    private boolean clickContinueInstall() {        try {            this.createSession();            String elementId = this.findElement("new UiSelector().text(\"继续安装\")");            if (StringUtils.isNotBlank(elementId)) {                if (this.click(elementId)) {                    return true;                }            }        } catch (Exception e) {            e.printStackTrace();        }        return false;    }    /**     * @Description: oppo com.android.packageinstaller:id/btn_continue_install_old     * @Param: []     * @Return: boolean     * @Author: wen     * @Date: 2018/6/11     */    private boolean clickContinueInstallOld() {        try {            this.createSession();            String elementId = this.findElement("new UiSelector().text(\"继续安装旧版本\")");            if (StringUtils.isNotBlank(elementId)) {                if (this.click(elementId)) {                    return true;                }            }        } catch (Exception e) {            e.printStackTrace();        }        return false;    }    private boolean clickInstallXY() {        try {            this.createSession();            String elementId = this.findElement("new UiSelector().text(\"应用权限\")");            if (StringUtils.isNotBlank(elementId)) {                log.warn("点击'安装'按钮!");                String bottomButtonId = this.findElementById("com.android.packageinstaller:id/bottom_button_layout");                if (StringUtils.isNotBlank(bottomButtonId)) {                    Bounds bounds = this.rect(bottomButtonId);                    if (bounds != null) {                        int y = bounds.getY();                        int x = bounds.getX();                        int h = bounds.getHight();                        int w = bounds.getWidth();                        if (this.click((w + x) / 2, y + (h / 3))) {                            return true;                        }                    }                }            }        } catch (Exception e) {            e.printStackTrace();        }        return false;    }    private boolean clickContinueInstallOppo() {        try {            this.createSession();            String elementId = this.findElement("new UiSelector().text(\"未发现风险\")");            if (StringUtils.isNotBlank(elementId)) {                log.debug("点击'继续安装'按钮!");                String installBtnId = this.findElementById("com.android.packageinstaller:id/safe_button_layout");                if (StringUtils.isNotBlank(installBtnId)) {                    if (this.click(installBtnId)) {                        return true;                    }                }            }        } catch (Exception e) {            e.printStackTrace();        }        return false;    }}