package com.testwa.distest.client.component.minicap;import com.testwa.distest.client.android.ADBCommandUtils;import com.testwa.distest.client.android.ADBTools;import com.testwa.distest.client.android.PhysicalSize;import com.testwa.distest.client.exception.CommandFailureException;import com.testwa.distest.client.util.PortUtil;import lombok.extern.slf4j.Slf4j;import org.apache.commons.io.IOUtils;import org.apache.commons.lang3.StringUtils;import java.io.Closeable;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.net.Socket;import java.nio.charset.StandardCharsets;import java.nio.file.Files;import java.nio.file.Paths;import java.nio.file.StandardCopyOption;import java.util.StringTokenizer;import java.util.concurrent.TimeUnit;import java.util.concurrent.atomic.AtomicBoolean;/** * @Program: distest * @Description: * @Author: wen * @Create: 2018-07-13 10:13 **/@Slf4jpublic class CaptureClient extends Thread implements Closeable {    private String host = "127.0.0.1";    private Integer port = 31000;    private String deviceId;    private Socket socket;    private OutputStream outputStream;    /** 是否运行 */    private AtomicBoolean isRunning = new AtomicBoolean(false);    public CaptureClient(String deviceId) {        super("capture-client");        this.deviceId = deviceId;    }    /**     * 是否运行     * @return true 已运行 false 未运行     */    public boolean isRunning() {        return this.isRunning.get();    }    @Override    public void close() throws IOException {        this.isRunning.set(false);        ADBTools.forwardRemove(this.deviceId, port);        this.outputStream.close();        IOUtils.closeQuietly(this.socket);        this.interrupt();    }    @Override    public synchronized void start() {        if (this.isRunning.get()) {            throw new IllegalStateException("capture 客户端已运行");        } else {            this.isRunning.set(true);        }        super.start();    }    @Override    public void run() {        InputStream inputStream = null;        try {            socket = new Socket(host, port);        } catch (IOException e) {            log.error("[{}] capture client connect to {} error", deviceId, port, e);        }        while (isRunning.get()) {            if(socket.isConnected() && !socket.isClosed()) {                try {                    inputStream = socket.getInputStream();                    handleServerResponse(inputStream);                } catch (Exception e) {                    if(isRunning.get()) {                        log.error("[{}] capture client error {}", deviceId, port, e);                        try {                            TimeUnit.SECONDS.sleep(1);                        } catch (InterruptedException e1) {                        }                    }                }            }else{                log.info("[{}] Minitouch socket not connected", deviceId);                try {                    TimeUnit.SECONDS.sleep(1);                } catch (InterruptedException e) {                }            }        }        // 执行完成之后关闭        this.isRunning.set(false);        IOUtils.closeQuietly(this.socket);    }    private void handleServerResponse(InputStream inputStream) throws IOException {//        byte[] bytes = IOUtils.toByteArray(inputStream);        Files.copy(inputStream, Paths.get("/Users/wen/IdeaProjects/distest/distest-client/a.jpg"), StandardCopyOption.REPLACE_EXISTING);    }    /**     * 检查是否关闭     */    protected void checkClosed() {        if (!this.isRunning.get()) {            throw new IllegalStateException("Minitouch 客户端已关闭");        }    }    public void restart() {        try {            this.close();        } catch (IOException e) {            e.printStackTrace();        }        this.start();    }    public static void main(String[] args) {        CaptureClient s = new CaptureClient("b744a5044ba752237b66655dcd7e85618bec2d37");        s.start();    }}