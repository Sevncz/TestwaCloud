package com.testwa.distest.client.appcrawler;import lombok.Data;import org.apache.commons.lang3.StringUtils;import java.util.*;/** * @Program: distest * @Description: * 参考示例 * https://github.com/seveniruby/AppCrawler/blob/master/src/test/scala/com/testerhome/appcrawler/it/xueqiu_private.yml * @Author: wen * @Create: 2018-07-23 10:57 **/@Datapublic class JCrawlerConfig {    private List<String> pluginList = new ArrayList<>(Arrays.asList("com.testerhome.appcrawler.plugin.TagLimitPlugin"));    private String logLevel = "INFO"; // "TRACE"    private boolean saveScreen = true;    private String reportTitle = "";    private int screenshotTimeout = 20;    private String currentDriver = "Android";    private int tagLimitMax = 3;    private List<String> tagLimit = new ArrayList<>();    private boolean showCancel = false;    private int maxTime = 3600 * 3;    private String resultDir = "";    private Map<String, Object> capability = new HashMap<String, Object>() {        {            put("app", "");            put("platformName", "");            put("platformVersion", "");            put("deviceName", "demo");            put("noReset", "false");            put("autoWebview", "false");            put("autoLaunch", "true");        }    };    private Map<String, Object> androidCapability = new HashMap<String, Object>() {        {            put("appPackage", "");            put("appActivity", "");        }    };    private Map<String, Object> iosCapability = new HashMap<String, Object>() {        {            put("bundleId", "");            put("autoAcceptAlerts", true);            put("platformVersion", "9.2");            put("deviceName", "iPhone 6");        }    };    private List<String> xpathAttributes = new ArrayList<>(Arrays.asList(            "name", "label", "value", "resource-id", "content-desc", "index", "text"));    /**     * 用来确定url的元素定位xpath 他的text会被取出当作url因素     */    private List<String> defineUrl = new ArrayList<>();    /**     * 设置一个起始url和maxDepth, 用来在遍历时候指定初始状态和遍历深度     */    private List<String> baseUrl = new ArrayList<>();    private List<String> appWhiteList = new ArrayList<>();    /**     *  默认的最大深度10, 结合baseUrl可很好的控制遍历的范围     */    private int maxDepth = 10;    private boolean headFirst = true;    private boolean enterWebView = true;    /**     * url 黑名单, eg:         - ".*球友.*"         - ".*png.*"         - ".*Talk.*"         - ".*Chat.*"         - ".*Safari.*"         - "WriteStatus.*"         - "Browser.*"         - "MyselfUser"         - ".*MyselfUser.*"         - ".*股市直播.*"     */    private List<String> urlBlackList = new ArrayList<>();    private List<String> urlWhiteList = new ArrayList<>();    private List<String> defaultBackAction = new ArrayList<>();    /**     * 后退按钮标记, 主要用于iOS, xpath        - //*[@resource-id='action_back']        - //*[@resource-id='android:id/up']        - //*[@resource-id='android:id/home']        - //*[@resource-id='android:id/action_bar_title']        - //*[@name='nav_icon_back']        - //*[@name='Back']        - //*[@name='返回']        - "//*[contains(name(), 'Button') and @name='取消']"        - "//*[contains(name(), 'Button') and @label='返回']"        - "//*[contains(name(), 'Button') and @name='关闭']"        - "//*[contains(name(), 'Button') and @name='首页']"     */    private List<String> backButton = new ArrayList<>();    /**     * 优先遍历元素特征    说人话就是    是指比如进入到一个大类目界面下了 比如 自选，那么这个自选界面内的哪些优先点击 是配置一个大类目功能界面内的优先。    比如这个界面内优先遍历界面内的哪些元素。     */    private List<String> firstList = new ArrayList<>();    /**     * 默认遍历列表     #android非空标签     - //*[@clickable="true"]//android.widget.TextView[string-length(@text)>0 and string-length(@text)<20]     - //android.widget.EditText     #ios     - //*[contains(name(), 'Text') and string-length(@value)>0 and string-length(@value)<20 ]     */    private List<String> selectedList = new ArrayList<>(Arrays.asList(            "//*[contains(name(), 'Text')]",            "//*[contains(name(), 'Image')]",            "//*[contains(name(), 'Button')]",            "//*[contains(name(), 'CheckBox')]"));    /**     * 最后应该遍历的元素特征    说人话就是    “哪一个最重要，是大类目功能的 放在最后去点击”    意思就是大多数APP底部都有一些大类目的功能切换，比如雪球APP底部的 “首页 自选 动态 行情 开户” 这些都是大类目功能。    如果你想控制APP底部大类目的切换遍历顺序，应该讲配置写进lastList。     */    private List<String> lastList = new ArrayList<>();    private List<String> blackList = new ArrayList<>(Arrays.asList(".*[0-9]{2}.*"));    private List<Map<String, Object>> triggerActions = new ArrayList<>();    private boolean autoCrawl = true;    private List<Map<String, Object>> asserts = new ArrayList<>();    private CrawlerTestcase testcase = new CrawlerTestcase("Testwa Crawler",            new ArrayList<>(Arrays.asList(            new CrawlerTestcaseStep(null, null, null,"//*", "driver.swipe(0.9, 0.5, 0.1, 0.5)"),            new CrawlerTestcaseStep(null, null, null, "//*", "driver.swipe(0.9, 0.5, 0.1, 0.5)"),            new CrawlerTestcaseStep(null, null, null, "//*", "driver.swipe(0.9, 0.5, 0.1, 0.5)"),            new CrawlerTestcaseStep(null, null, null, "//*", "driver.swipe(0.9, 0.5, 0.1, 0.5)"))));    private List<Map<String, Object>> beforeElementAction = new ArrayList<>();    private List<String> afterElementAction = new ArrayList<>();    private List<String> afterUrlFinished = new ArrayList<>();    private List<Integer> monkeyEvents = new ArrayList<>();    private int monkeyRunTimeSeconds = 30;    public void addTriggerAction(String action, String xpath, Integer times) {        if(StringUtils.isBlank(xpath)) {            return;        }        if(times == null) {            times = 1;        }        final Integer t = times;        Map<String, Object> trigger = new HashMap<String, Object>(){            {                if(StringUtils.isNotBlank(action)) {                    put("action", action);                }                put("xpath", xpath);                put("times", t);            }        };        this.getTriggerActions().add(trigger);    }}