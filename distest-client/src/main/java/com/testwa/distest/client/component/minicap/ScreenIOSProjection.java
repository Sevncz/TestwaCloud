package com.testwa.distest.client.component.minicap;import lombok.extern.slf4j.Slf4j;import org.apache.commons.io.IOUtils;import java.io.Closeable;import java.util.concurrent.TimeUnit;import java.util.concurrent.TimeoutException;@Slf4jpublic class ScreenIOSProjection extends Thread implements Closeable {    private String deviceId;    private String resourcePath;    private MinicapIOSServer server;    private MinicapClient client;    private ScreenListener listener;    public ScreenIOSProjection(String deviceId, String resourcePath, ScreenListener listener) {        this.deviceId = deviceId;        this.resourcePath = resourcePath;        this.listener = listener;    }    /**     * 重启     */    public void restart() {        this.server.restart();    }    private void startServer() {        this.server = new MinicapIOSServer(deviceId, resourcePath);        this.server.start();    }    private void startClient() {        int port = this.server.getPort();        this.client = new MinicapClient(port);        this.client.start();    }    public boolean isRunning() {        if(this.server == null) {            return false;        }        if(this.client == null) {            return false;        }        return this.server.isRunning() && this.client.isRunning();    }    @Override    public void run() {        try {            startServer();            if(this.server.isRunning()) {                startClient();                while (this.server.isRunning()) {                    byte[] take1 = this.client.take();                    try {                        this.listener.projection(take1);                    } catch (Exception e) {                        e.printStackTrace();                    }                    long start = System.currentTimeMillis();                    byte[] take = null;                    while(true) {                        long end = System.currentTimeMillis();                        if((end - start) >= 150 && take != null) {                            this.listener.projection(take);                            break;                        }                        take = this.client.take();                    }                }            }        } catch (Exception e) {            log.error("屏幕映射失败", e);        } finally {            close();        }    }    @Override    public void close() {        server.close();        IOUtils.closeQuietly(client);    }}