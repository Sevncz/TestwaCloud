package com.testwa.distest.client.component.logcat;import com.android.ddmlib.IShellOutputReceiver;import com.testwa.distest.client.android.ADBCommandUtils;import com.testwa.distest.client.component.minicap.MinicapAndroidServer;import com.testwa.distest.client.component.minicap.MinicapClient;import com.testwa.distest.client.component.minicap.VideoRecorder;import lombok.extern.slf4j.Slf4j;import org.apache.commons.io.IOUtils;import java.io.Closeable;import java.io.IOException;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.StandardOpenOption;import java.util.concurrent.atomic.AtomicBoolean;/** * @Program: distest * @Description: * @Author: wen * @Create: 2018-07-12 17:36 **/@Slf4jpublic class DLogger extends Thread implements Closeable {    private String deviceId;    /** 保存路径 */    private Path logFile;//    /** logcat 执行的具体命令 *///    private String content = "-v threadtime *:E";    private LogcatServer server;    /** 是否运行 */    private AtomicBoolean isRunning = new AtomicBoolean(false);    /** 是否重启 */    private AtomicBoolean restart = new AtomicBoolean(false);    private LogListener logListener;    public DLogger(String deviceId) {        super("Log-client");        this.deviceId = deviceId;    }    /**     * 设置 listener 之后，server 返回的 byte[] 会返回给 listener，不再写入文件     * @param deviceId     * @param logListener     */    public DLogger(String deviceId, LogListener logListener) {        super("Log-client");        this.deviceId = deviceId;        this.logListener = logListener;    }    /**     * 是否运行     * @return true 已运行 false 未运行     */    public boolean isRunning() {        return this.isRunning.get();    }    public void setLogFile(Path logFile) {        this.logFile = logFile;    }//    public void setContent(String content) {//        this.content = content;//    }    /**     * 重启     */    public void restart() {        this.server.restart();    }    private void startServer() {        this.server = new LogcatServer(deviceId);//        this.server.setContent(this.content);        this.server.start();    }    @Override    public void run() {        try {            startServer();            while (this.server.isRunning()) {                byte[] take = this.server.take();                if(take != null) {                    if(logListener != null) {                        logListener.onLog(take);                    }else{                        write(take);                    }                }            }        } catch (Exception e) {            log.error("logcat 启动失败", e);            if(this.isRunning.get()) {                restart.set(true);            }        } finally {            close();        }    }    @Override    public void close() {        IOUtils.closeQuietly(server);    }    public void write(byte[] bytes) {        if(logFile == null) {            throw new IllegalArgumentException("日志输出文件为空");        }        try {            Files.write(logFile, bytes, StandardOpenOption.APPEND);        } catch (IOException e) {            log.error("日志{}写入错误，{}", logFile, e.getMessage());        }    }}