package com.testwa.distest.client.component.stfagent;import com.testwa.distest.client.android.ADBCommandUtils;import com.testwa.distest.client.android.ADBTools;import com.testwa.distest.client.util.CommandLineExecutor;import com.testwa.distest.client.util.CommonUtil;import com.testwa.distest.client.util.PortUtil;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.ArrayUtils;import org.apache.commons.lang3.StringUtils;import org.zeroturnaround.exec.ProcessExecutor;import org.zeroturnaround.exec.ProcessResult;import org.zeroturnaround.exec.StartedProcess;import org.zeroturnaround.exec.listener.ProcessListener;import org.zeroturnaround.exec.stream.LogOutputStream;import java.io.*;import java.util.concurrent.TimeUnit;@Slf4jpublic class StfAPKServer {    private static final String TAG = "Sursoft ServiceStfInstall ";    private static final String cmdStartService = "am startservice --user 0 -a jp.co.cyberagent.stf.ACTION_START -n jp.co.cyberagent.stf/.Service";    private static final String cmdStartAgent = "app_process /system/bin jp.co.cyberagent.stf.Agent";    private static final String pgk = "jp.co.cyberagent.stf";    private static final String main = "jp.co.cyberagent.stf.Agent";    private static final String apkName = "STFService.apk";    private static final String action = "jp.co.cyberagent.stf.ACTION_START";    private static final String componet = "jp.co.cyberagent.stf/.Service";    private static final String installPath = "/data/local/tmp/";    private static final String PATH_SERVICE_APK = "STFService" + File.separator + "STFService.apk";    private String deviceId;    private String resourcePath;    private StartedProcess agentProcess;    public StfAPKServer(String deviceId, String resourcePath) {        this.resourcePath = resourcePath;        this.deviceId = deviceId;    }    /**     * 是否运行     * @return true 已运行 false 未运行     */    public boolean isRunning() {        if(agentProcess != null) {            return this.agentProcess.getProcess().isAlive();        }        return false;    }    public void close() {        release();    }    /**     * 重启     */    public synchronized void restart() {        close();        try {            TimeUnit.SECONDS.sleep(1);        } catch (InterruptedException e) {        }        start();    }    private void release() {        if(this.agentProcess != null) {            CommandLineExecutor.processQuit(agentProcess);        }    }    public synchronized void start() {        int processId = getStfProcessID(deviceId);        ADBTools.killProcess(deviceId, processId);        installService();        try {            String[] adbCommand = ADBTools.buildAdbShell(deviceId);            String command = getAgentCommand() + " && " + cmdStartAgent;            String[] agentCommand =  ArrayUtils.addAll(adbCommand, command);            agentProcess = new ProcessExecutor()                    .command(agentCommand)                    .readOutput(true)                    .addListener(new ProcessListener() {                        @Override                        public void beforeStart(ProcessExecutor executor) {                            super.beforeStart(executor);                            log.info("[{}] ready start {}", deviceId, String.join(" ", agentCommand));                        }                        @Override                        public void afterStart(Process process, ProcessExecutor executor) {                            super.afterStart(process, executor);                            log.info("[{}] started {}", deviceId, String.join(" ", agentCommand));                        }                        @Override                        public void afterFinish(Process process, ProcessResult result) {                            super.afterFinish(process, result);                            log.info("[{}] finish {} \n {}", deviceId, String.join(" ", agentCommand), result.getOutput().getUTF8());                        }                        @Override                        public void afterStop(Process process) {                            super.afterStop(process);                            log.info("[{}] stop {}", deviceId, String.join(" ", agentCommand));                        }                    })                    .redirectOutput(new LogOutputStream() {                        @Override                        protected void processLine(String s) {                            log.info("[{}] stf-agent out: {}", deviceId, s);                        }                    })                    .start();            String[] serviceCommand =  ArrayUtils.addAll(adbCommand, getServiceCommand());            new ProcessExecutor()                    .command(serviceCommand)                    .readOutput(true)                    .redirectOutput(new LogOutputStream() {                        @Override                        protected void processLine(String s) {                            log.info("[{}] stf-service out: {}", deviceId, s);                        }                    }).execute();        } catch (Exception e) {            throw new IllegalStateException("[" + deviceId + "] stf-server服务启动失败", e);        }    }    private String getAgentCommand() throws StfServiceInstallException {        String result = ADBTools.shell(deviceId, "pm", "path", pgk);        if(StringUtils.isBlank(result)) {            throw new StfServiceInstallException("[" + deviceId + "] stf-service未安装");        }        String apkpath = result.replace("package:", "").trim();        return String.format("export CLASSPATH=\"%s\"", apkpath);    }    private String getServiceCommand() {        return cmdStartService;    }    private void installService() {        String apkFile = this.resourcePath + File.separator + PATH_SERVICE_APK;        if(!ADBCommandUtils.isInstalledApp(this.deviceId, apkFile)) {            ADBCommandUtils.installApp(this.deviceId, apkFile);        }    }    public int getStfProcessID(String deviceId) {        String cmd = ADBTools.getPsCommand(deviceId) + "|grep stf";        String ret;        try {            ret = ADBTools.shell(deviceId, cmd);            if (StringUtils.isEmpty(ret)) {                return -1;            }        } catch (Exception e) {            log.error(e.getMessage(), e);            return -1;        }        ret = ret.trim();        return CommonUtil.resolveProcessID(ret, "stf.agent");    }}