package com.testwa.distest.client.config;import lombok.extern.slf4j.Slf4j;import org.springframework.aop.interceptor.AsyncUncaughtExceptionHandler;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.core.task.TaskExecutor;import org.springframework.scheduling.annotation.AsyncConfigurer;import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;import java.lang.reflect.Method;/** * @Program: distest * @Description: * @Author: wen * @Create: 2018-05-18 16:33 **/@Slf4j@Configurationpublic class ThreadPoolExecutorConfig  implements AsyncConfigurer {    @Bean    @Override    public TaskExecutor getAsyncExecutor() {        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();        executor.setCorePoolSize(10);        executor.setMaxPoolSize(50);        executor.setQueueCapacity(500);        executor.setThreadNamePrefix("dis.agent-");        executor.initialize();        return executor;    }    @Override    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() {        return new DisagentAsyncExceptionHandler();    }    /**     * 自定义异常处理类     * @author hry     *     */    class DisagentAsyncExceptionHandler implements AsyncUncaughtExceptionHandler {        //手动处理捕获的异常        @Override        public void handleUncaughtException(Throwable throwable, Method method, Object... obj) {            log.info("Exception message - " + throwable.getMessage());            log.info("Method name - " + method.getName());            for (Object param : obj) {                log.info("Parameter value - " + param);            }        }    }}