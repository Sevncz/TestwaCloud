package com.testwa.distest.client.component.minicap.ios;import com.testwa.core.shell.UTF8CommonExecs;import com.testwa.distest.client.android.ADBCommandUtils;import com.testwa.distest.client.component.appium.utils.Config;import com.testwa.distest.client.component.minicap.MinicapServer;import com.testwa.distest.client.component.port.MinicapPortProvider;import lombok.extern.slf4j.Slf4j;import org.apache.commons.exec.CommandLine;import org.apache.commons.lang3.StringUtils;import java.nio.file.Path;import java.nio.file.Paths;import java.util.concurrent.TimeUnit;import static org.apache.commons.exec.ExecuteWatchdog.INFINITE_TIMEOUT;/** * @Program: distest * @Description: ios minicap * @Author: wen * @Create: 2018-06-20 10:40 **/@Slf4jpublic class IMinicapServer extends MinicapServer {    private String RESOLUTION = "400x600";    private int PORT;    private String udid;    private String resourcePath;    private Path ios_minicap_file;    private UTF8CommonExecs execs;    public IMinicapServer(String udid) {        this.udid = udid;        this.resourcePath = Config.getString("distest.agent.resources");        this.ios_minicap_file = Paths.get(this.resourcePath,"ios-minicap", "ios_minicap");    }    @Override    public void start() {        this.PORT = MinicapPortProvider.pullPort();//        this.PORT = 12345;        start(this.PORT);    }    public void start(int port) {        CommandLine commandLine = getMinicapCommand(port);        try {            execs = new UTF8CommonExecs(commandLine);            execs.setTimeout(INFINITE_TIMEOUT);            execs.asyncexec();        } catch (Exception e) {            String out = execs.getOutput();            String error = execs.getError();            log.error("udid: {}  out: {}  error: {}", udid, out, error);        }        int tryTime = 60;        while(tryTime > 0) {            try {                TimeUnit.SECONDS.sleep(1);                String out = execs.getOutput();                if(StringUtils.isNotBlank(out) && out.contains("== Banner ==")){                    log.info(out);                    break;                }            } catch (Exception e) {                e.printStackTrace();            }            tryTime--;        }        if(tryTime <= 0) {            log.warn("{} iOS minicap 再次尝试重启", udid);            this.PORT = MinicapPortProvider.pullPort();            restart();        }    }    @Override    public void restart() {        if(execs != null) {            execs.destroy();        }        start(this.PORT);    }    @Override    public void restart(float scale, int rotate) {        restart();    }    private CommandLine getMinicapCommand(int port) {        CommandLine commandLine = new CommandLine(this.ios_minicap_file.toString());        commandLine.addArgument("--udid");        commandLine.addArgument(this.udid);        commandLine.addArgument("--port");        commandLine.addArgument(String.valueOf(port));        commandLine.addArgument("--resolution");        commandLine.addArgument(this.RESOLUTION);        return commandLine;    }    @Override    public void stop() {        if(execs != null){            execs.destroy();        }    }    @Override    public int getPort() {        return this.PORT;    }}