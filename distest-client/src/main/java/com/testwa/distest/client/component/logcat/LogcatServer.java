package com.testwa.distest.client.component.logcat;import com.android.ddmlib.IDevice;import com.android.ddmlib.IShellOutputReceiver;import com.testwa.distest.client.android.ADBTools;import com.testwa.distest.client.android.AndroidHelper;import com.testwa.distest.client.ios.IOSDeviceUtil;import com.testwa.distest.client.util.CommandLineExecutor;import io.rpc.testwa.device.DeviceType;import lombok.extern.slf4j.Slf4j;import org.apache.commons.io.IOUtils;import org.apache.commons.lang3.ArrayUtils;import org.zeroturnaround.exec.ProcessExecutor;import org.zeroturnaround.exec.StartedProcess;import org.zeroturnaround.exec.stream.LogOutputStream;import java.io.Closeable;import java.io.IOException;import java.util.Arrays;import java.util.List;import java.util.concurrent.BlockingQueue;import java.util.concurrent.LinkedBlockingQueue;import java.util.concurrent.TimeUnit;import java.util.concurrent.atomic.AtomicBoolean;/** * @Program: distest * @Description: logcat 收集 * @Author: wen * @Create: 2018-07-12 11:38 **/@Slf4jpublic class LogcatServer extends Thread implements Closeable {    /** 队列大小 */    private int queueSize = 500;    /** 存放日志队列 */    private BlockingQueue<byte[]> logQueue;    /** 执行 logcat 的设备 *///    private IDevice device;    private String deviceId;    /** 设备类型*/    private DeviceType deviceType;    /** 是否运行 */    private AtomicBoolean isRunning = new AtomicBoolean(false);    /** 是否重启 */    private AtomicBoolean restart = new AtomicBoolean(false);    private StartedProcess iOSLogProcess;    private StartedProcess logcatProcess;    public LogcatServer(String deviceId, DeviceType deviceType){        super("Logcat-server");        this.deviceType = deviceType;        if(DeviceType.ANDROID.equals(deviceType)) {            this.deviceId = deviceId;        }        if(DeviceType.IOS.equals(deviceType)){            this.deviceId = deviceId;        }        init();    }    /**     * 获取每一行数据，如果没有则阻塞     * @return     * @throws InterruptedException 阻塞中断     */    public synchronized byte[] take() throws InterruptedException {        checkClosed();        return logQueue.take();    }    /**     * 是否运行     * @return true 已运行 false 未运行     */    public boolean isRunning() {        return this.isRunning.get();    }    @Override    public void close() {        if(this.iOSLogProcess != null) {            CommandLineExecutor.processQuit(this.iOSLogProcess);        }        if(this.logcatProcess != null) {            CommandLineExecutor.processQuit(this.logcatProcess);        }        this.isRunning.set(false);        this.restart.set(true);    }    /**     * 重启     */    public void restart() {        this.isRunning.set(true);        this.restart.set(true);    }    @Override    public synchronized void start() {        if (this.isRunning.get()) {            throw new IllegalStateException("Logcat 服务已运行");        } else {            this.isRunning.set(true);        }        super.start();    }    @Override    public void run() {        while (this.isRunning.get()) {            if(DeviceType.ANDROID.equals(deviceType)) {                try {                    String[] adbShell = ADBTools.buildAdbShell(deviceId);                    String[] command = ArrayUtils.addAll(adbShell, "logcat -v threadtime");                    log.info("[Android Logcat start] {}", String.join(" ", command));                    startCommand(logcatProcess, command);                } catch (Exception e) {                    log.warn("{} Logcat 服务运行异常, {}", deviceId, e.getMessage());                }            }            if(DeviceType.IOS.equals(deviceType)) {                if(IOSDeviceUtil.isOnline(deviceId)) {                    try {                        List<String> commandLine = IOSDeviceUtil.getLogCmd(this.deviceId);                        log.info("[iOS Log start] {}", String.join(" ", commandLine));                        startCommand(iOSLogProcess, commandLine.toArray(new String[0]));                    } catch (IOException e) {                        e.printStackTrace();                    }                }            }        }        this.isRunning.set(false);        log.info("log 服务已关闭");    }    private void startCommand(StartedProcess startedProcess, String[] command) throws IOException {        startedProcess = new ProcessExecutor()                .command(command)                .redirectOutput(new LogOutputStream() {                    @Override                    protected void processLine(String line) {                        offer(line.getBytes());                    }                }).start();        while (this.isRunning.get()) {            try {                TimeUnit.MILLISECONDS.sleep(100);            } catch (InterruptedException e) {            }        }    }    private void init(){        this.logQueue = new LinkedBlockingQueue<>(queueSize);    }    /**     * 将一行放入到队列     */    protected void offer(byte[] data) {        if (logQueue.size() >= queueSize) {            logQueue.poll();            log.debug("存放的队列已满，将会抛弃最旧的一行");        }        logQueue.offer(data);    }    /**     * 检查是否关闭     */    protected void checkClosed() {        if (!this.isRunning.get()) {            throw new IllegalStateException("Logcat服务端已关闭");        }    }}