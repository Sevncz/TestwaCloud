package com.testwa.distest.client.component.logcat;import com.android.ddmlib.IDevice;import com.android.ddmlib.IShellOutputReceiver;import com.testwa.distest.client.android.AndroidHelper;import lombok.extern.slf4j.Slf4j;import java.io.Closeable;import java.io.IOException;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.StandardOpenOption;import java.util.concurrent.TimeUnit;import java.util.concurrent.atomic.AtomicBoolean;/** * @Program: distest * @Description: logcat 收集 * @Author: wen * @Create: 2018-07-12 11:38 **/@Slf4jpublic class LogcatServer extends Thread implements Closeable {    /** 执行 logcat 的设备 */    private IDevice device;    private Path logcatTempFile;    /** 是否运行 */    private AtomicBoolean isRunning = new AtomicBoolean(false);    /** 是否重启 */    private AtomicBoolean restart = new AtomicBoolean(false);    public LogcatServer(String deviceId){        this.device = AndroidHelper.getInstance().getAndroidDevice(deviceId).getDevice();    }    public void setLogcatTempFile(Path logcatTempFile) {        this.logcatTempFile = logcatTempFile;    }    /**     * 是否运行     * @return true 已运行 false 未运行     */    public boolean isRunning() {        return this.isRunning.get();    }    @Override    public void close() {        this.isRunning.set(false);        this.restart.set(true);    }    /**     * 重启     */    public void restart() {        this.isRunning.set(true);        this.restart.set(true);    }    @Override    public synchronized void start() {        if (this.isRunning.get()) {            throw new IllegalStateException("Logcat 服务已运行");        } else {            this.isRunning.set(true);        }        super.start();    }    @Override    public void run() {        while (this.isRunning.get()) {            try {                device.executeShellCommand(getClearCommand(), new IShellOutputReceiver() {                    @Override                    public void addOutput(byte[] bytes, int i, int i1) {                    }                    @Override                    public void flush() {                    }                    @Override                    public boolean isCancelled() {                        return false;                    }                });                String command = getCommand();                log.info("拉起 Logcat 服务 command: {}", command);                device.executeShellCommand(command, new IShellOutputReceiver() {                    @Override                    public void addOutput(byte[] bytes, int i, int i1) {                        try {                            Files.write(logcatTempFile, bytes, StandardOpenOption.APPEND);                        } catch (IOException e) {                            log.error("write to {} error", logcatTempFile, e);                        }                    }                    @Override                    public void flush() {                    }                    @Override                    public boolean isCancelled() {                        boolean result = restart.get();                        restart.set(false);                        return result;                    }                }, Integer.MAX_VALUE, TimeUnit.DAYS);            } catch (Exception e) {                log.warn("{} Logcat 服务运行异常, {}", device.getSerialNumber(), e.getMessage());            }        }        this.isRunning.set(false);        log.info("Logcat 服务已关闭");    }    private String getClearCommand(){        return "logcat -c";    }    private String getCommand(){        return "logcat -v threadtime *:E";    }}