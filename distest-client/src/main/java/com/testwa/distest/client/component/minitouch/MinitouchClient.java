package com.testwa.distest.client.component.minitouch;import com.testwa.distest.client.android.ADBCommandUtils;import com.testwa.distest.client.android.PhysicalSize;import com.testwa.distest.client.exception.CommandFailureException;import lombok.extern.slf4j.Slf4j;import org.apache.commons.io.IOUtils;import org.apache.commons.lang3.StringUtils;import java.io.Closeable;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.net.InetSocketAddress;import java.net.Socket;import java.net.SocketAddress;import java.nio.charset.StandardCharsets;import java.util.concurrent.TimeUnit;import java.util.concurrent.atomic.AtomicBoolean;/** * @Program: distest * @Description: * @Author: wen * @Create: 2018-07-13 10:13 **/@Slf4jpublic class MinitouchClient extends Thread implements Closeable {    private String host = "127.0.0.1";    private Integer port;    private String deviceId;    private Socket socket;    private OutputStream outputStream;    /** 屏幕尺寸 */    private PhysicalSize size;    private double PercentX;    private double PercentY;    /** 是否运行 */    private AtomicBoolean isRunning = new AtomicBoolean(false);    public MinitouchClient(int port, String deviceId) {        super("minitouch-client");        this.port = port;        this.deviceId = deviceId;    }    /**     * 是否运行     * @return true 已运行 false 未运行     */    public boolean isRunning() {        return this.isRunning.get();    }    @Override    public void close() throws IOException {        this.isRunning.set(false);        IOUtils.closeQuietly(this.socket);        this.interrupt();    }    @Override    public synchronized void start() {        if (this.isRunning.get()) {            throw new IllegalStateException("Minitouch 客户端已运行");        } else {            this.isRunning.set(true);        }        // 获取设备屏幕的实际尺寸        this.size = getSize();        super.start();    }    @Override    public void run() {        // 连接minicap服务        log.info("Minitouch 客户端启动中......");        InputStream inputStream = null;        try {            this.socket = new Socket();            SocketAddress remoteAddr = new InetSocketAddress(host, port);            this.socket.connect(remoteAddr,60000);        } catch (IOException e) {            log.error("与Minitouch服务端连接失败", e);        }        log.info("与Minitouch服务端连接成功");        while (isRunning.get()) {            try {                inputStream = socket.getInputStream();                this.outputStream = socket.getOutputStream();                handleServerResponse(inputStream);                log.debug("与Minitouch服务端连接中断");            } catch (Exception e) {                log.info("Minitouch客户端运行错误", e);                try {                    TimeUnit.MILLISECONDS.sleep(100);                } catch (InterruptedException e1) {                }            } finally {                IOUtils.closeQuietly(this.socket);            }        }        this.isRunning.set(false);    }    private void handleServerResponse(InputStream inputStream) throws IOException, InterruptedException {        // 缓存        byte[] chunk = new byte[1024*100];        // 读取的长度        int len = 0;        while (len >= 0) {            len = inputStream.read(chunk);            String minitouchInfo = new String(chunk, StandardCharsets.UTF_8).replace("\n", " ");            log.info("minitouch 客户端 {}", deviceId);            //  minitouchInfo = v 1 ^ 10 1079 2159 0 $ 8987 [][][][][][][            String[] minitouchResultSpilt = minitouchInfo.split(" ");            int maxX = this.size.getWidth();            int maxY = this.size.getHeight();            if(StringUtils.isNotBlank(minitouchInfo)){                maxX = Integer.parseInt(minitouchResultSpilt[4]);                maxY = Integer.parseInt(minitouchResultSpilt[5]);            }            this.PercentX = (double)this.size.getWidth() / maxX;            this.PercentY = (double)this.size.getHeight() / maxY;//            TimeUnit.MILLISECONDS.sleep(100);        }    }    public void sendEvent(String str) throws IOException {        if (this.outputStream != null) {            try {                log.debug("old cmd is {}", str);                String newcmd = pointConvert(str);                log.debug("new cmd is {}", newcmd);                outputStream.write(newcmd.getBytes());            } catch (CommandFailureException e) {                log.error("ERROR", e);            }        }    }    /**     *@Description: 通过minitouch的可点击范围获得真实点击位置     *@Param: [cmd]     *@Return: java.lang.String     *@Author: wen     *@Date: 2018/5/3     */    private String pointConvert(String cmd) throws CommandFailureException {        int x;        int y;        // m <contact> <x> <y> <pressure>        // d <contact> <x> <y> <pressure>        if(cmd.startsWith("d") || cmd.startsWith("m")){            String[] m = cmd.trim().split("\\s+");            try{                x = Integer.parseInt(m[2]);                y = Integer.parseInt(m[3]);                return String.format("%s %s %s %s %s\nc\n", m[0], m[1], (int)(x/PercentX), (int)(y/PercentY), m[4]);            }catch (NumberFormatException e){                log.error("point str error, {}", cmd);            }            throw new CommandFailureException("点击命令解析失败");        }else{            return cmd;        }    }    /**     * 获取屏幕支持     * @return PhysicalSize     * @throws Exception 获取失败     */    protected PhysicalSize getSize() {        if (size == null) {            size = ADBCommandUtils.getPhysicalSize(deviceId);        }        return size;    }    /**     * 检查是否关闭     */    protected void checkClosed() {        if (!this.isRunning.get()) {            throw new IllegalStateException("Minitouch 客户端已关闭");        }    }    public static void main(String[] args) {        MinitouchClient s = new MinitouchClient(12345, "8c2b6aee");        s.start();    }}