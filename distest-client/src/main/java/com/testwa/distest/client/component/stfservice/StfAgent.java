package com.testwa.distest.client.component.stfservice;import com.android.ddmlib.IDevice;import com.github.cosysoft.device.android.AndroidDevice;import com.testwa.distest.client.android.AdbForward;import com.testwa.distest.client.android.AndroidHelper;import com.testwa.distest.client.control.port.ApkPortProvider;import com.testwa.distest.client.control.port.TouchPortProvider;import io.rpc.testwa.stf.*;import lombok.Data;import lombok.extern.slf4j.Slf4j;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.net.Socket;@Data@Slf4jpublic class StfAgent {    private static final String STRING_ERROR = "Not found";    private static final String SERVICE_NAME = "jp.co.cyberagent.stf";    private static final String COMMAND_COMPONENT_SERVICE = "am startservice jp.co.cyberagent.stf/.Service -a %s";    private static final String COMMAND_START_SERVICE = "jp.co.cyberagent.stf.ACTION_START";    private static final String COMMAND_STOP_SERVICE = "jp.co.cyberagent.stf.ACTION_STOP";    private static final String COMMAND_APK_PATH = "APK=$(adb shell pm path jp.co.cyberagent.stf | tr -d '\\r' | awk -F: '{print $2}')";    private static final String COMMAND_START_AGENT = "export CLASSPATH=\"/data/app/jp.co.cyberagent.stf-1/base.apk\"\\; \\\n" +            "    exec app_process /system/bin jp.co.cyberagent.stf.Agent";    private static final String PATH_SERVICE_APK = "STFService" + File.separator + "STFService.apk";    private int mPort;    private AndroidDevice device;    private Socket mSocket;    private String resourcesPath;    private OutputStream mSocketOutput;    private InputStream mSocketInput;    public StfAgent(AndroidDevice device, String resourcesPath) {        this.device = device;        this.resourcesPath = resourcesPath;        startService();        startForward();        startAgent();        try {            Thread.sleep(2000);        } catch (InterruptedException e) {            e.printStackTrace();        }        connect();    }    private void connect() {        try {            mSocket = new Socket("localhost", mPort);            mSocketInput = mSocket.getInputStream();            mSocketOutput = mSocket.getOutputStream();        } catch (IOException e) {            e.printStackTrace();        }    }    private void executeKeyEvent(Envelope input) {        if (mSocketInput == null) {            return;        }        try {            input.writeDelimitedTo(mSocketOutput);            mSocketOutput.flush();        } catch (IOException e) {            e.printStackTrace();        }    }    private boolean startService() {        String command = String.format(COMMAND_COMPONENT_SERVICE, COMMAND_START_SERVICE);        String result = AndroidHelper.getInstance().executeShellCommand(device.getDevice(), command);        if (result == null) {            return false;        }        if (result.contains(STRING_ERROR)) {            installService();        }        result =  AndroidHelper.executeCommand(device.getDevice(), command);        if (result.contains(STRING_ERROR)) {            return false;        }        return true;    }    private boolean installService() {        String apkFile = resourcesPath + File.separator + PATH_SERVICE_APK;        AndroidHelper.getInstance().installApp(apkFile, device.getSerialNumber());        return true;    }    public AdbForward createForward() {        AdbForward forward = generateForwardInfo();        // 修复 com.github.cosysoft.device.shell.ShellCommandException: error: device unauthorized.        int tryTime = 10;        while(tryTime >= 0){            try {                device.getDevice().createForward(forward.getPort(), forward.getLocalabstract(), IDevice.DeviceUnixSocketNamespace.ABSTRACT);                return forward;            } catch (Exception e) {                log.error("create forward failed", e);                tryTime--;                try {                    Thread.sleep(500);                } catch (InterruptedException e1) {                    e1.printStackTrace();                }            }        }        return null;    }    /**     * 生成forward信息     */    private AdbForward generateForwardInfo() {        AdbForward[] forwards = AndroidHelper.getInstance().getForwardList();        // serial_touch_number        int maxNumber = 0;        if (forwards.length > 0) {            for (AdbForward forward : forwards) {                if (forward.getSerialNumber().equals(device.getSerialNumber())) {                    String l = forward.getLocalabstract();                    String[] s = l.split("_");                    if (s.length == 3) {                        int n = Integer.parseInt(s[2]);                        if (n > maxNumber) maxNumber = n;                    }                }            }        }        maxNumber += 1;        String forwardStr = String.format("%s_stfagent_%d", device.getSerialNumber(), maxNumber);        int freePort = ApkPortProvider.pullPort();        AdbForward forward = new AdbForward(device.getSerialNumber(), freePort, forwardStr);        return forward;    }    private void startForward() {        AdbForward adbForward = createForward();    }    private boolean startAgent() {        Thread thread = new Thread(new Runnable() {            @Override            public void run() {                String result = AndroidHelper.getInstance().executeShellCommand(device.getDevice(), "pm path " + SERVICE_NAME);                String path = result.replace("package:", "");                String command = String.format("export CLASSPATH=\"%s\"\\;\r" +                        "exec app_process /system/bin jp.co.cyberagent.stf.Agent", path);                AndroidHelper.getInstance().executeShellCommand(device.getDevice(), command);            }        });        thread.start();        return true;    }    public void backEvent() {        onKeyEvent(KeyCode.KEYCODE_BACK);    }    public void menuEvent() {        onKeyEvent(KeyCode.KEYCODE_MENU);    }    public void homeEvent() {        onKeyEvent(KeyCode.KEYCODE_HOME);    }    public void onKeyEvent(int keyCode) {        KeyEventRequest.Builder builder = KeyEventRequest.newBuilder();        builder.setKeyCode(keyCode);        builder.setEvent(KeyEvent.DOWN);        KeyEventRequest request = builder.build();        Envelope.Builder envBuild = Envelope.newBuilder();        envBuild.setType(MessageType.DO_KEYEVENT);        envBuild.setMessage(request.toByteString());        Envelope envelope = envBuild.build();        executeKeyEvent(envelope);        KeyEventRequest.Builder builder2 = KeyEventRequest.newBuilder();        builder2.setKeyCode(keyCode);        builder2.setEvent(KeyEvent.UP);        Envelope.Builder envBuild2 = Envelope.newBuilder();        envBuild2.setType(MessageType.DO_KEYEVENT);        envBuild2.setMessage(builder2.build().toByteString());        executeKeyEvent(envBuild2.build());    }}