package com.testwa.distest.client.component.logcat;import com.github.cosysoft.device.android.AndroidDevice;import com.testwa.core.service.AdbDriverService;import com.testwa.core.service.LogcatServiceBuilder;import com.testwa.distest.client.android.AndroidHelper;import lombok.Data;import lombok.extern.slf4j.Slf4j;import java.io.IOException;import java.io.PipedInputStream;import java.io.PipedOutputStream;import java.util.ArrayList;import java.util.List;@Data@Slf4jpublic class Logcat {    private List<LogcatListener> listenerList = new ArrayList<>();    private AdbDriverService service;    private String serialNumber;    private String content;    private PipedOutputStream outputStream;    private PipedInputStream inputStream;    private Thread logcatInitialThread;    private boolean isRunning = true;    public Logcat(String serialNumber, String content) {        this.serialNumber = serialNumber;        this.content = content;        this.outputStream = new PipedOutputStream();        this.inputStream = new PipedInputStream();        try {            inputStream.connect(outputStream);        } catch (IOException e) {            e.printStackTrace();        }    }    public void start(){        clear();        this.service = new LogcatServiceBuilder()                .withDeviceId(this.serialNumber)                .withContent(content)                .build();        this.service.addOutPutStream(this.outputStream);        this.service.start();        onStartup(true);        this.logcatInitialThread = new Thread(new StartInitial());        this.logcatInitialThread.start();    }    private void clear() {        new LogcatServiceBuilder()                .withDeviceId(this.serialNumber)                .withClear()                .build().start();    }    class StartInitial implements Runnable {        public void run() {            while(isRunning){                byte[] buf=new byte[2048];                int count = 0;                try {                    while (count == 0) {                        count = inputStream.available();                    }                    int readCount = 0; // 已经成功读取的字节的个数                    while (readCount < count) {                        readCount += inputStream.read(buf, readCount, count - readCount);                        onLog(buf);                    }                } catch (IOException e) {                    e.printStackTrace();                }            }        }    }    public void close() {        isRunning = false;        try {            if(this.outputStream != null){                this.outputStream.close();            }            if(this.outputStream != null) {                this.inputStream.close();            }            this.service.stop();        } catch (IOException e) {            e.printStackTrace();        }        this.onClose();    }    public void addEventListener(LogcatListener listener) {        if (listener != null) {            this.listenerList.add(listener);        }    }    private void onStartup(boolean success) {        for (LogcatListener listener : listenerList) {            listener.onStartup(this, success);        }    }    private void onClose() {        for (LogcatListener listener : listenerList) {            listener.onClose(this);        }    }    private void onLog(byte[] data) {        for (LogcatListener listener : listenerList) {            listener.onLog(this, data);        }    }}