package com.testwa.distest.client.component.stfagent;import com.google.protobuf.InvalidProtocolBufferException;import jp.co.cyberagent.stf.proto.Wire;import lombok.extern.slf4j.Slf4j;import org.apache.commons.io.IOUtils;import java.io.Closeable;import java.io.IOException;import java.io.OutputStream;import java.net.Socket;import java.util.concurrent.TimeUnit;import java.util.concurrent.atomic.AtomicBoolean;/** * @Program: distest * @Description: * @Author: wen * @Create: 2018-07-13 10:13 **/@Slf4jpublic class StfAgentClient extends Thread implements Closeable {    private String host = "127.0.0.1";    private Integer port;    private Socket socket;    private MessageWriter messageWriter = null;    private DevInformationAssembly devInformationAssembly = null;    /** 是否运行 */    private AtomicBoolean isRunning = new AtomicBoolean(false);    public StfAgentClient(int port) {        super("stf-agent-client");        this.port = port;    }    /**     * 是否运行     * @return true 已运行 false 未运行     */    public boolean isRunning() {        return this.isRunning.get();    }    public DevInformationAssembly getDevInformationAssembly(){        return this.devInformationAssembly;    }    @Override    public void close() throws IOException {        this.isRunning.set(false);        IOUtils.closeQuietly(this.socket);        this.interrupt();    }    @Override    public synchronized void start() {        if (this.isRunning.get()) {            throw new IllegalStateException("stf-agent 客户端已运行");        } else {            this.isRunning.set(true);        }        super.start();    }    @Override    public void run() {        // 连接stf-agent服务        log.info("stf-agent 客户端启动中......");        while (isRunning.get()) {            try {                this.socket = new Socket(host, port);            } catch (IOException e) {                log.warn("连接到 stf-agent 服务端失败，稍后重试");                try {                    TimeUnit.SECONDS.sleep(1);                } catch (InterruptedException e1) {                }                continue;            }            // 开始运行stf-agent客户端            OutputStream outputStream = null;            try {                outputStream = socket.getOutputStream();                messageWriter = new MessageWriter(outputStream);                while (isRunning.get()) {                    Wire.Envelope envelope = new MessageReader(socket.getInputStream()).read();                    if(envelope == null){                        TimeUnit.SECONDS.sleep(1);                        continue;                    }                    switch (envelope.getType()){                        case EVENT_BATTERY:                            handleEventBattery(envelope);                            break;                        case EVENT_CONNECTIVITY:                            handleEventConnect(envelope);                            break;                        case EVENT_ROTATION:                            handleEventRotation(envelope);                            break;                        case EVENT_AIRPLANE_MODE:                            handleEventAirplaneMode(envelope);                            break;                        case EVENT_BROWSER_PACKAGE:                            handleEventBrowserPackage(envelope);                            break;                        case EVENT_PHONE_STATE:                            handleEventPhoneMode(envelope);                            break;                        case DO_IDENTIFY:                            handleEventIdentify(envelope);                            break;                        case GET_CLIPBOARD:                            handleGetClipboard(envelope);                            break;                        case GET_PROPERTIES:                            handleGetProperties(envelope);                            break;                        case GET_VERSION:                            handleEventGetVision(envelope);                            break;                        case GET_DISPLAY:                            handleEventGetDisplay(envelope);                            break;                        case GET_WIFI_STATUS:                            handleEventGetWifiStatus(envelope);                            break;                        case GET_SD_STATUS:                            handleEventGetSdcardStatus(envelope);                            break;                        default:                            log.error("Unknowing eventType:" + envelope.getType());                    }                }                log.debug("与 stf-agent 服务端连接中断");            } catch (Exception e) {                log.info("stf-agent客户端运行错误", e);            } finally {                try {                    if(outputStream!=null) outputStream.close();                } catch (IOException e) {                    e.printStackTrace();                }                IOUtils.closeQuietly(this.socket);            }        }        this.isRunning.set(false);    }    public void onKeyEvent(int keyCode) {        Wire.KeyEventRequest.Builder builder = Wire.KeyEventRequest.newBuilder();        builder.setKeyCode(keyCode);        builder.setEvent(Wire.KeyEvent.DOWN);        Wire.KeyEventRequest request = builder.build();        Wire.Envelope.Builder envBuild = Wire.Envelope.newBuilder();        envBuild.setType(Wire.MessageType.DO_KEYEVENT);        envBuild.setMessage(request.toByteString());        Wire.Envelope envelope = envBuild.build();        executeKeyEvent(envelope);        Wire.KeyEventRequest.Builder builder2 = Wire.KeyEventRequest.newBuilder();        builder2.setKeyCode(keyCode);        builder2.setEvent(Wire.KeyEvent.UP);        Wire.Envelope.Builder envBuild2 = Wire.Envelope.newBuilder();        envBuild2.setType(Wire.MessageType.DO_KEYEVENT);        envBuild2.setMessage(builder2.build().toByteString());        executeKeyEvent(envBuild2.build());    }    public void onType(String text) {        Wire.DoTypeRequest.Builder request = Wire.DoTypeRequest.newBuilder();        request.setText(text);        Wire.Envelope.Builder builder = Wire.Envelope.newBuilder();        builder.setType(Wire.MessageType.DO_TYPE);        builder.setMessage(request.build().toByteString());        executeKeyEvent(builder.build());    }    private void executeKeyEvent(Wire.Envelope input) {        if (messageWriter == null) {            return;        }        messageWriter.write(input);    }    private void handleEventBattery(Wire.Envelope envelope) throws InvalidProtocolBufferException {        Wire.BatteryEvent batteryEvent = Wire.BatteryEvent.parseFrom(envelope.getMessage());    }    private void handleEventConnect(Wire.Envelope envelope) throws InvalidProtocolBufferException {        Wire.ConnectivityEvent connectivityEvent = Wire.ConnectivityEvent.parseFrom(envelope.getMessage());    }    private void handleEventRotation(Wire.Envelope envelope) throws InvalidProtocolBufferException {        Wire.RotationEvent rotationEvent = Wire.RotationEvent.parseFrom(envelope.getMessage());    }    private void handleEventBrowserPackage(Wire.Envelope envelope) throws InvalidProtocolBufferException {        Wire.RotationEvent rotationEvent = Wire.RotationEvent.parseFrom(envelope.getMessage());    }    private void handleEventAirplaneMode(Wire.Envelope envelope) throws InvalidProtocolBufferException {        Wire.AirplaneModeEvent airplaneModeEvent = Wire.AirplaneModeEvent.parseFrom(envelope.getMessage());    }    private void handleEventPhoneMode(Wire.Envelope envelope) throws InvalidProtocolBufferException {        Wire.PhoneStateEvent phoneStateEvent = Wire.PhoneStateEvent.parseFrom(envelope.getMessage());    }    private void handleGetClipboard(Wire.Envelope envelope) throws InvalidProtocolBufferException {        Wire.GetClipboardResponse clipboardResponse = Wire.GetClipboardResponse.parseFrom(envelope.getMessage());    }    private void handleGetProperties(Wire.Envelope envelope) throws InvalidProtocolBufferException {        Wire.GetPropertiesResponse propertiesResponse = Wire.GetPropertiesResponse.parseFrom(envelope.getMessage());        for (Wire.Property property : propertiesResponse.getPropertiesList()){            getDevInformationAssembly().getDevProperty().getDevPropertiesHashMap().put(property.getName(),property.getValue());        }    }    private void handleEventIdentify(Wire.Envelope envelope) throws InvalidProtocolBufferException {        Wire.DoIdentifyResponse identifyResponse = Wire.DoIdentifyResponse.parseFrom(envelope.getMessage());        getDevInformationAssembly().getDevDoIdentify().setDevIdentify(identifyResponse.getSuccess());    }    private void handleEventGetVision(Wire.Envelope envelope) throws InvalidProtocolBufferException {        Wire.GetVersionResponse visionResponse = Wire.GetVersionResponse.parseFrom(envelope.getMessage());        getDevInformationAssembly().getDevVision().setDevSerial(visionResponse.getVersion());    }    private void handleEventGetWifiStatus(Wire.Envelope envelope) throws InvalidProtocolBufferException {        Wire.GetWifiStatusResponse wifiStatusResponse = Wire.GetWifiStatusResponse.parseFrom(envelope.getMessage());        getDevInformationAssembly().getDevWifiStatus().setWifiStatus(wifiStatusResponse.getStatus());    }    private void handleEventGetSdcardStatus(Wire.Envelope envelope) throws InvalidProtocolBufferException {        Wire.GetSdStatusResponse sdStatusResponse = Wire.GetSdStatusResponse.parseFrom(envelope.getMessage());        getDevInformationAssembly().getDevSdcardStatus().setMounted(sdStatusResponse.getMounted());    }    private void handleEventGetDisplay(Wire.Envelope envelope) throws InvalidProtocolBufferException {        Wire.GetDisplayResponse displayResponse = Wire.GetDisplayResponse.parseFrom(envelope.getMessage());        getDevInformationAssembly().getDevDisplay().setScreenDensity(displayResponse.getDensity());        getDevInformationAssembly().getDevDisplay().setScreenFps(displayResponse.getFps());        getDevInformationAssembly().getDevDisplay().setScreenHeight(displayResponse.getHeight());        getDevInformationAssembly().getDevDisplay().setScreenWidth(displayResponse.getWidth());        getDevInformationAssembly().getDevDisplay().setScreenXdpi(displayResponse.getXdpi());        getDevInformationAssembly().getDevDisplay().setScreenYdpi(displayResponse.getYdpi());        getDevInformationAssembly().getDevDisplay().setScreenRotation(displayResponse.getRotation());    }    /**     * 检查是否关闭     */    protected void checkClosed() {        if (!this.isRunning.get()) {            throw new IllegalStateException("stf-agent 客户端已关闭");        }    }    public void getPackages() {        Wire.BrowserPackageEvent.Builder builder = Wire.BrowserPackageEvent.newBuilder();        builder.build();    }}