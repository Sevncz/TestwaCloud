package com.testwa.distest.client.ios;import com.alibaba.fastjson.JSON;import com.testwa.core.shell.UTF8CommonExecs;import lombok.extern.slf4j.Slf4j;import org.apache.commons.exec.CommandLine;import org.apache.commons.lang3.StringUtils;import java.io.IOException;import java.util.*;/** * @Program: distest * @Description: IOS 设备信息获取工具类 * @Author: wen * @Create: 2018-06-21 16:09 **/@Slf4jpublic class IOSDeviceUtil {    // /usr/local/bin/ideviceinfo    private static final String CMD_INFO = "/usr/local/bin/ideviceinfo";    // /usr/local/bin/idevice_id    private static final String CMD_ID = "/usr/local/bin/idevice_id";    private static final String CMD_LOG = "/usr/local/bin/idevicesyslog";    private static final String CMD_DEPLOY = "ios-deploy";    private static final String CPUArchitecture = "CPUArchitecture";    private static final String ProductType = "ProductType";    private static final String ProductVersion = "ProductVersion";    private static final String DeviceName = "DeviceName";    private static Map<String, IOSPhysicalSize> UDID_SIZE = new HashMap<>();    public static List<String> getUDID() {        List<String> udids = new ArrayList<>();        CommandLine commandLine = new CommandLine(CMD_ID);        commandLine.addArgument("-l");        UTF8CommonExecs execs = new UTF8CommonExecs(commandLine);        try {            execs.exec();            String out = execs.getOutput();            String[] outLines = out.split("\n");            for(int i=0;i<outLines.length;i++){                String line = outLines[i];                if(StringUtils.isNotBlank(line)) {                    udids.add(line.trim());                }            }            return udids;        } catch (IOException e) {        }        return udids;    }    public static boolean isOnline(String udid) {        return getUDID().contains(udid);    }    public static String getProductType(String udid) {        return getDeviceInfo(udid, ProductType);    }    public static String getProductVersion(String udid) {        return getDeviceInfo(udid, ProductVersion);    }    public static String getDeviceName(String udid) {        return getDeviceInfo(udid, DeviceName);    }    public static String getCPUArchitecture(String udid) {        return getDeviceInfo(udid, CPUArchitecture);    }    private static String getDeviceInfo(String udid, String key) {        String out = "";        CommandLine commandLine = new CommandLine(CMD_INFO);        commandLine.addArgument("-u");        commandLine.addArgument(udid);        commandLine.addArgument("-k");        commandLine.addArgument(key);        UTF8CommonExecs execs = new UTF8CommonExecs(commandLine);        try {            execs.exec();            out = execs.getOutput();        } catch (IOException e) {            log.error("get ios device info {} error",  e);        }        return out.trim();    }    public static CommandLine getLogCmd(String udid) {        CommandLine commandLine = new CommandLine(CMD_INFO);        commandLine.addArgument("-u");        commandLine.addArgument(udid);        return commandLine;    }    public static void installApp(String udid, String appLocalPath) {        CommandLine commandLine = new CommandLine(CMD_DEPLOY);        commandLine.addArgument("-u");        commandLine.addArgument(udid);        commandLine.addArgument("--bundle");        commandLine.addArgument(appLocalPath);        UTF8CommonExecs execs = new UTF8CommonExecs(commandLine);        try {            execs.exec();        } catch (IOException e) {            log.error("get ios device info {} error",  e);        }    }    public static void launchApp(String udid, String appLocalPath) {        CommandLine commandLine = new CommandLine(CMD_DEPLOY);        commandLine.addArgument("–justlaunch");        commandLine.addArgument(udid);        commandLine.addArgument("–debug");        commandLine.addArgument("--bundle");        commandLine.addArgument(appLocalPath);        UTF8CommonExecs execs = new UTF8CommonExecs(commandLine);        try {            execs.exec();        } catch (IOException e) {            log.error("launch ios app {} error",  e);        }    }    public static String getModel(String udid) {        String productType = getProductType(udid);        if("iPhone1,1".equals(productType)) {            return "iPhone 1G";        }        if("iPhone1,2".equals(productType)) {            return "iPhone 3G";        }        if("iPhone2,1".equals(productType)) {            return "iPhone 3GS";        }        if("iPhone3,1".equals(productType)) {            return "iPhone 4";        }        if("iPhone3,2".equals(productType)) {            return "iPhone 4";        }        if("iPhone4,1".equals(productType)) {            return "iPhone 4s";        }        if("iPhone5,1".equals(productType)) {            return "iPhone 5";        }        if("iPhone5,2".equals(productType)) {            return "iPhone 5";        }        if("iPhone5,3".equals(productType)) {            return "iPhone 5C";        }        if("iPhone5,4".equals(productType)) {            return "iPhone 5C";        }        if("iPhone6,1".equals(productType)) {            return "iPhone 5s";        }        if("iPhone6,2".equals(productType)) {            return "iPhone 5s";        }        if("iPhone7,1".equals(productType)) {            return "iPhone 6P";        }        if("iPhone7,2".equals(productType)) {            return "iPhone 6";        }        if("iPhone8,1".equals(productType)) {            return "iPhone 6s";        }        if("iPhone8,2".equals(productType)) {            return "iPhone 6sP";        }        if("iPhone8,4".equals(productType)) {            return "iPhone SE";        }        if("iPhone9,1".equals(productType)) {            return "iPhone 7";        }        if("iPhone9,3".equals(productType)) {            return "iPhone 7";        }        if("iPhone9,2".equals(productType)) {            return "iPhone 7P";        }        if("iPhone9,4".equals(productType)) {            return "iPhone 7P";        }        if("iPhone10,1".equals(productType)) {            return "iPhone 8";        }        if("iPhone10,4".equals(productType)) {            return "iPhone 8";        }        if("iPhone10,2".equals(productType)) {            return "iPhone 8P";        }        if("iPhone10,5".equals(productType)) {            return "iPhone 8P";        }        if("iPhone10,3".equals(productType)) {            return "iPhone X";        }        if("iPhone10,6".equals(productType)) {            return "iPhone X";        }        if("iPhone11,8".equals(productType)) {            return "iPhone XR";        }        if("iPhone11,4".equals(productType)) {            return "iPhone XS Max";        }        if("iPhone11,6".equals(productType)) {            return "iPhone XS Max";        }        return null;    }    public static void loadSize(String json) {        List<IOSSize> items = JSON.parseArray(json, IOSSize.class);        items.forEach( s -> {            IOSPhysicalSize size = new IOSPhysicalSize();            size.setName(s.getName());            String[] physicals = s.getPhysical().split("x");            size.setPhsicalWidth(Integer.parseInt(physicals[0]));            size.setPhsicalHeight(Integer.parseInt(physicals[1]));            String[] points = s.getPoints().split("x");            size.setPointWidth(Integer.parseInt(points[0]));            size.setPointHeight(Integer.parseInt(points[1]));            UDID_SIZE.put(size.getName(), size);        });    }    public static IOSPhysicalSize getSize(String udid) {        String deviceName = getModel(udid);        return UDID_SIZE.get(deviceName);    }    public static void main(String[] args) {        List<String> udid = IOSDeviceUtil.getUDID();        udid.forEach( id -> {            System.out.println(getProductType(id));            System.out.println(getProductVersion(id));            System.out.println(getDeviceName(id));            System.out.println(getCPUArchitecture(id));            System.out.println("--------------------");        });    }}