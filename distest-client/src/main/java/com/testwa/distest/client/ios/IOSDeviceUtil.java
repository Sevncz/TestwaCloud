package com.testwa.distest.client.ios;import com.testwa.core.shell.UTF8CommonExecs;import lombok.extern.slf4j.Slf4j;import org.apache.commons.exec.CommandLine;import org.apache.commons.lang3.StringUtils;import java.io.IOException;import java.util.ArrayList;import java.util.Arrays;import java.util.List;/** * @Program: distest * @Description: IOS 设备信息获取工具类 * @Author: wen * @Create: 2018-06-21 16:09 **/@Slf4jpublic class IOSDeviceUtil {    private static final String CMD_INFO = "/usr/local/bin/ideviceinfo"; // /usr/local/bin/ideviceinfo    private static final String CMD_ID = "/usr/local/bin/idevice_id"; // /usr/local/bin/idevice_id    private static final String CPUArchitecture = "CPUArchitecture";    private static final String ProductType = "ProductType";    private static final String ProductVersion = "ProductVersion";    private static final String DeviceName = "DeviceName";    public static List<String> getUDID() {        List<String> udids = new ArrayList<>();        CommandLine commandLine = new CommandLine(CMD_ID);        commandLine.addArgument("-l");        UTF8CommonExecs execs = new UTF8CommonExecs(commandLine);        try {            execs.exec();            String out = execs.getOutput();            String[] outLines = out.split("\n");            for(int i=0;i<outLines.length;i++){                String line = outLines[i];                if(StringUtils.isNotBlank(line)) {                    udids.add(line.trim());                }            }            return udids;        } catch (IOException e) {        }        return udids;    }    public static boolean isOnline(String udid) {        return getUDID().contains(udid);    }    public static String getProductType(String udid) {        return getDeviceInfo(udid, ProductType);    }    public static String getProductVersion(String udid) {        return getDeviceInfo(udid, ProductVersion);    }    public static String getDeviceName(String udid) {        return getDeviceInfo(udid, DeviceName);    }    public static String getCPUArchitecture(String udid) {        return getDeviceInfo(udid, CPUArchitecture);    }    private static String getDeviceInfo(String udid, String key) {        String out = "";        CommandLine commandLine = new CommandLine(CMD_INFO);        commandLine.addArgument("-u");        commandLine.addArgument(udid);        commandLine.addArgument("-k");        commandLine.addArgument(key);        UTF8CommonExecs execs = new UTF8CommonExecs(commandLine);        try {            execs.exec();            out = execs.getOutput();        } catch (IOException e) {            log.error("get ios device info {} error",  e);        }        return out.trim();    }    public static void main(String[] args) {        List<String> udid = IOSDeviceUtil.getUDID();        udid.forEach( id -> {            System.out.println(getProductType(id));            System.out.println(getProductVersion(id));            System.out.println(getDeviceName(id));            System.out.println(getCPUArchitecture(id));            System.out.println("--------------------");        });    }}