package com.testwa.distest.client.ios;import com.alibaba.fastjson.JSON;import lombok.extern.slf4j.Slf4j;import org.apache.commons.exec.CommandLine;import org.apache.commons.lang3.StringUtils;import org.zeroturnaround.exec.ProcessExecutor;import org.zeroturnaround.exec.stream.LogOutputStream;import java.io.IOException;import java.util.*;import java.util.concurrent.TimeoutException;/** * @Program: distest * @Description: IOS 设备信息获取工具类 * @Author: wen * @Create: 2018-06-21 16:09 **/@Slf4jpublic class IOSDeviceUtil {    // 待定列表    private static final HashMap<String, Integer> OFFLINE_UNDETERMINED = new HashMap<>();    public static final Set<String> ONLINE_UDID = new HashSet<>();    // /usr/local/bin/ideviceinfo    private static final String CMD_INFO = "ideviceinfo";    // /usr/local/bin/idevice_id    private static final String CMD_ID = "idevice_id";    private static final String CMD_LOG = "idevicesyslog";    private static final String CMD_DEPLOY = "ios-deploy";    private static final String CPUArchitecture = "CPUArchitecture";    private static final String ProductType = "ProductType";    private static final String ProductVersion = "ProductVersion";    private static final String DeviceName = "DeviceName";    private static Map<String, IOSPhysicalSize> UDID_SIZE = new HashMap<>();    public static List<String> getUDID() {        List<String> udids = new ArrayList<>();        try {            new ProcessExecutor().command(CMD_ID, "-l")                .redirectOutput(new LogOutputStream() {                    @Override                    protected void processLine(String line) {                        udids.add(line);                    }                })                .execute();        } catch (IOException | InterruptedException | TimeoutException e) {            e.printStackTrace();        }        return udids;    }    public static boolean isOnline(String udid) {        boolean isOnline = getUDID().contains(udid);        if(!isOnline && IOSDeviceUtil.offline(udid)){            return false;        }        return true;    }    public static boolean isUndetermined(String udid) {        if(ONLINE_UDID.contains(udid)) {            return false;        }        return OFFLINE_UNDETERMINED.containsKey(udid);    }    public static String getProductType(String udid) {        return getDeviceInfo(udid, ProductType);    }    public static String getProductVersion(String udid) {        return getDeviceInfo(udid, ProductVersion);    }    public static String getDeviceName(String udid) {        return getDeviceInfo(udid, DeviceName);    }    public static String getCPUArchitecture(String udid) {        return getDeviceInfo(udid, CPUArchitecture);    }    private static String getDeviceInfo(String udid, String key) {        String out = "";        List<String> command = new ArrayList<>();        command.add(CMD_INFO);        command.add("-u");        command.add(udid);        command.add("-k");        command.add(key);        try {            out = new ProcessExecutor()                    .command(command)                    .readOutput(true).execute()                    .outputUTF8();        } catch (IOException | InterruptedException | TimeoutException e) {            e.printStackTrace();        }        return out.trim();    }    public static List<String> getLogCmd(String udid) {        List<String> commandLine = new ArrayList<>();        commandLine.add(CMD_LOG);        commandLine.add("-u");        commandLine.add(udid);        return commandLine;    }    public static void installApp(String udid, String appLocalPath) {        List<String> command = new ArrayList<>();        command.add(CMD_DEPLOY);        command.add("-u");        command.add(udid);        command.add("--bundle");        command.add(appLocalPath);        try {            new ProcessExecutor()                .command(command)                .readOutput(true).execute()                .outputUTF8();        } catch (IOException | InterruptedException | TimeoutException e) {            e.printStackTrace();        }    }    public static void launchApp(String udid, String appLocalPath) {        List<String> command = new ArrayList<>();        command.add(CMD_DEPLOY);        command.add("–justlaunch");        command.add(udid);        command.add("–debug");        command.add("--bundle");        command.add(appLocalPath);        try {            new ProcessExecutor()                    .command(command)                    .readOutput(true).execute()                    .outputUTF8();        } catch (IOException | InterruptedException | TimeoutException e) {            e.printStackTrace();        }    }    public static String getModel(String udid) {        String productType = getProductType(udid);        if("iPhone1,1".equals(productType)) {            return "iPhone 1G";        }        if("iPhone1,2".equals(productType)) {            return "iPhone 3G";        }        if("iPhone2,1".equals(productType)) {            return "iPhone 3GS";        }        if("iPhone3,1".equals(productType)) {            return "iPhone 4";        }        if("iPhone3,2".equals(productType)) {            return "iPhone 4";        }        if("iPhone4,1".equals(productType)) {            return "iPhone 4s";        }        if("iPhone5,1".equals(productType)) {            return "iPhone 5";        }        if("iPhone5,2".equals(productType)) {            return "iPhone 5";        }        if("iPhone5,3".equals(productType)) {            return "iPhone 5C";        }        if("iPhone5,4".equals(productType)) {            return "iPhone 5C";        }        if("iPhone6,1".equals(productType)) {            return "iPhone 5s";        }        if("iPhone6,2".equals(productType)) {            return "iPhone 5s";        }        if("iPhone7,1".equals(productType)) {            return "iPhone 6P";        }        if("iPhone7,2".equals(productType)) {            return "iPhone 6";        }        if("iPhone8,1".equals(productType)) {            return "iPhone 6s";        }        if("iPhone8,2".equals(productType)) {            return "iPhone 6sP";        }        if("iPhone8,4".equals(productType)) {            return "iPhone SE";        }        if("iPhone9,1".equals(productType)) {            return "iPhone 7";        }        if("iPhone9,3".equals(productType)) {            return "iPhone 7";        }        if("iPhone9,2".equals(productType)) {            return "iPhone 7P";        }        if("iPhone9,4".equals(productType)) {            return "iPhone 7P";        }        if("iPhone10,1".equals(productType)) {            return "iPhone 8";        }        if("iPhone10,4".equals(productType)) {            return "iPhone 8";        }        if("iPhone10,2".equals(productType)) {            return "iPhone 8P";        }        if("iPhone10,5".equals(productType)) {            return "iPhone 8P";        }        if("iPhone10,3".equals(productType)) {            return "iPhone X";        }        if("iPhone10,6".equals(productType)) {            return "iPhone X";        }        if("iPhone11,8".equals(productType)) {            return "iPhone XR";        }        if("iPhone11,4".equals(productType)) {            return "iPhone XS Max";        }        if("iPhone11,6".equals(productType)) {            return "iPhone XS Max";        }        return null;    }    public static void loadSize(String json) {        List<IOSSize> items = JSON.parseArray(json, IOSSize.class);        items.forEach( s -> {            IOSPhysicalSize size = new IOSPhysicalSize();            size.setName(s.getName());            String[] physicals = s.getPhysical().split("x");            size.setPhsicalWidth(Integer.parseInt(physicals[0]));            size.setPhsicalHeight(Integer.parseInt(physicals[1]));            String[] points = s.getPoints().split("x");            size.setPointWidth(Integer.parseInt(points[0]));            size.setPointHeight(Integer.parseInt(points[1]));            UDID_SIZE.put(size.getName(), size);        });    }    public static IOSPhysicalSize getSize(String udid) {        String deviceName = getModel(udid);        return UDID_SIZE.get(deviceName);    }    public static boolean offline(String udid) {        Integer count = OFFLINE_UNDETERMINED.get(udid);        if(count == null) {            count = 0;        }        if(count < 2) {            OFFLINE_UNDETERMINED.put(udid, count + 1);            return false;        } else {            OFFLINE_UNDETERMINED.remove(udid);            return true;        }    }    public static void addOnline(String udid) {        ONLINE_UDID.add(udid);    }    public static void removeOnline(String udid) {        ONLINE_UDID.remove(udid);        OFFLINE_UNDETERMINED.remove(udid);    }    public static void main(String[] args) {        List<String> udid = IOSDeviceUtil.getUDID();        udid.forEach( id -> {            System.out.println(getProductType(id));            System.out.println(getProductVersion(id));            System.out.println(getDeviceName(id));            System.out.println(getCPUArchitecture(id));            System.out.println("--------------------");        });    }}