package com.testwa.distest.client.device.manager;import com.alibaba.fastjson.JSON;import com.testwa.core.utils.Identities;import com.testwa.distest.client.device.driver.IDeviceRemoteControlDriver;import com.testwa.distest.client.device.driver.IDeviceRemoteControlDriverCapabilities;import com.testwa.distest.client.device.driver.IDeviceRemoteDriverFactory;import io.rpc.testwa.device.DeviceType;import lombok.Data;import lombok.extern.slf4j.Slf4j;import java.util.HashMap;import java.util.Map;@Slf4j@Datapublic class DeviceManager {    private final String id = Identities.uuid();    private final String userToken;    private final IDeviceRemoteControlDriverCapabilities capabilities;    private boolean isWaitting = false;    // 设备ID    private String deviceId;    private IDeviceRemoteControlDriver deviceDriver;    public DeviceManager(String host, int port, String resourcePath, String userToken) {        this.userToken = userToken;        this.capabilities = new IDeviceRemoteControlDriverCapabilities();        this.capabilities.setDeviceId(deviceId);        this.capabilities.setHost(host);        this.capabilities.setPort(String.valueOf(port));        this.capabilities.setResourcePath(resourcePath);        this.capabilities.setUserToken(userToken);    }    private void init(String deviceId, DeviceType deviceType) {        this.deviceId = deviceId;        if(DeviceType.ANDROID.equals(deviceType)) {            this.deviceDriver = IDeviceRemoteDriverFactory.createAndroidDriver(this.capabilities);        }        if(DeviceType.IOS.equals(deviceType)) {            this.deviceDriver = IDeviceRemoteDriverFactory.createIOSDriver(this.capabilities);        }        // 启动基本服务，屏幕同步        startDefaultScreen();        this.deviceDriver.deviceInit();    }    private void startDefaultScreen() {        Map<String, Object> config = new HashMap<>();        this.deviceDriver.startScreen(JSON.toJSONString(config));    }    public void reset() {        // 停止所有服务        this.deviceDriver.stopScreen();        this.deviceDriver.stopLog();        this.deviceDriver.stopRecorder();        // 启动基本服务，屏幕同步        startDefaultScreen();    }    public void destory() {        // 停止所有服务        this.deviceDriver.stopScreen();        this.deviceDriver.stopLog();        this.deviceDriver.stopRecorder();    }    public boolean deviceIsOnline() {        return deviceDriver.isOnline();    }    public void deviceStart() {    }    @Override    public boolean equals(Object o) {        if (this == o){            return true;        }        if (!(o instanceof DeviceManager)){            return false;        }        DeviceManager that = (DeviceManager) o;        if (id != null ? !id.equals(that.id) : that.id != null){            return false;        }        return true;    }    @Override    public int hashCode() {        return id != null ? id.hashCode() : 0;    }}