package com.testwa.distest.client.component.executor.worker;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.alibaba.fastjson.serializer.SerializerFeature;import com.fasterxml.jackson.databind.JsonNode;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;import com.testerhome.appcrawler.AppCrawler;import com.testerhome.appcrawler.Crawler;import com.testerhome.appcrawler.CrawlerConf;import com.testwa.core.cmd.RemoteRunCommand;import com.testwa.distest.client.appcrawler.JCrawlerConfig;import com.testwa.distest.client.component.Constant;import com.testwa.distest.client.component.executor.ExecutorLog;import com.testwa.distest.client.exception.InstallAppException;import com.testwa.distest.client.exception.LaunchAppException;import com.testwa.distest.client.exception.UninstallAppException;import com.testwa.distest.client.model.UserInfo;import io.appium.java_client.remote.AndroidMobileCapabilityType;import io.rpc.testwa.task.ExecutorAction;import io.rpc.testwa.task.StepRequest;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.StringUtils;import java.io.IOException;import java.nio.file.FileVisitOption;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;/** * @Program: distest * @Description: 遍历测试执行器 * @Author: wen * @Create: 2018-07-19 18:35 **/@Slf4jpublic class CrawlerExecutor extends CrawlerAbstractExecutor{    private String appiumUrl;    private Long taskCode;    private Crawler crawler;    @Override    public void init(String appiumUrl, RemoteRunCommand cmd) {        this.appiumUrl = appiumUrl;        this.taskCode = cmd.getTaskCode();        super.init(cmd);    }    @ExecutorLog(action = ExecutorAction.downloadApp)    public void downloadApp() {        super.downloadApp();    }    @Override    public void start() {        try {            loggerStart();            installApp();            launch(); // 这里启动是为了点掉启动之后的权限弹框            run();            uninstallApp();            complete();        }catch (InstallAppException e){            // 安装失败            String error = e.getMessage();            if(StringUtils.isBlank(error)) {                error = "没有错误信息";            }            log.error("【遍历测试】设备 {} 执行任务 {} 失败， {} ", device.getName(), cmd.getTaskCode(), error);            grpcClientService.gameover(taskCode, deviceId, error);        } catch (Exception e) {            // 未知错误            String error = e.getMessage();            if(StringUtils.isBlank(error)) {                error = "未知错误信息";            }            log.error("【遍历测试】设备 {} 执行任务 {} 失败， {} ", device.getName(), cmd.getTaskCode(), error);            grpcClientService.gameover(taskCode, deviceId, error);        } finally {            loggerStop();            ui2ServerStop();        }    }    @ExecutorLog(action = ExecutorAction.installApp)    public void installApp() throws InstallAppException {        super.installApp();    }    @ExecutorLog(action = ExecutorAction.launch)    public void launch() throws LaunchAppException {        super.launch();    }    @ExecutorLog(action = ExecutorAction.run)    @Override    public void run() {        Path resultDir = Paths.get(Constant.localCrawlerOutPath, String.valueOf(taskCode), deviceId);        if(!Files.exists(resultDir)) {            try {                Files.createDirectories(resultDir);            } catch (IOException e) {                e.printStackTrace();            }        }        JCrawlerConfig jCrawlerConfig = new JCrawlerConfig();        jCrawlerConfig.setReportTitle(appInfo.getDisplayName());        jCrawlerConfig.setResultDir(resultDir.toString());//        jCrawlerConfig.getPluginList().add("com.testerhome.appcrawler.plugin.ReportPlugin");        jCrawlerConfig.getCapability().put("app", this.appLocalPath);        jCrawlerConfig.getCapability().put("appPackage", this.appInfo.getPackageName());        jCrawlerConfig.getCapability().put("appium", this.appiumUrl);        jCrawlerConfig.getCapability().put("platformName", "Android");        jCrawlerConfig.getCapability().put("automationName", "uiautomator2");        jCrawlerConfig.getCapability().put("deviceName", device.getName());        jCrawlerConfig.getCapability().put("udid", device.getSerialNumber());        jCrawlerConfig.getCapability().put("newCommandTimeout", 20);        jCrawlerConfig.getCapability().put("autoLaunch", true);//        jCrawlerConfig.getAndroidCapability().put(AndroidMobileCapabilityType.APP_PACKAGE, "com.netease.cloudmusic");//        jCrawlerConfig.getAndroidCapability().put(AndroidMobileCapabilityType.APP_ACTIVITY, "com.netease.cloudmusic.activity.LoadingActivity");        jCrawlerConfig.getAndroidCapability().put(AndroidMobileCapabilityType.DONT_STOP_APP_ON_RESET, true);        jCrawlerConfig.getAndroidCapability().put(AndroidMobileCapabilityType.NO_SIGN, false);//        jCrawlerConfig.getBlackList().add("//android.widget.TextView[@resource-id='com.netease.cloudmusic:id/aag']");//        jCrawlerConfig.addTriggerAction("18600753024", "//*[contains(@text,'请输入手机号')]", 1);//        jCrawlerConfig.addTriggerAction("wen19880528", "//*[contains(@text,'请输入密码')]", 1);//        jCrawlerConfig.addTriggerAction("click", "//*[contains(@text,'登录')]", 1);//        jCrawlerConfig.getFirstList().add("//*[@resource-id='com.netease.cloudmusic:id/ki']");//        jCrawlerConfig.getFirstList().add("//*[@resource-id='com.netease.cloudmusic:id/kh']");        // 从服务器获得配置        String configStr = grpcClientService.getTaskConfig(taskCode);        if(StringUtils.isNotBlank(configStr)) {            JSONObject configJson = JSON.parseObject(configStr);            JSONArray blackList = configJson.getJSONArray("blackList");            if(blackList != null && blackList.size() > 0) {                jCrawlerConfig.getBlackList().addAll(blackList.toJavaList(String.class));            }            JSONArray whiteList = configJson.getJSONArray("whiteList");            if(whiteList != null && whiteList.size() > 0) {                jCrawlerConfig.getAppWhiteList().addAll(whiteList.toJavaList(String.class));            }            JSONArray urlBlackList = configJson.getJSONArray("urlBlackList");            if(urlBlackList != null && urlBlackList.size() > 0) {                jCrawlerConfig.getUrlBlackList().addAll(urlBlackList.toJavaList(String.class));            }            JSONArray urlWhiteList = configJson.getJSONArray("urlWhiteList");            if(urlWhiteList != null && urlWhiteList.size() > 0) {                jCrawlerConfig.getUrlWhiteList().addAll(urlWhiteList.toJavaList(String.class));            }            JSONArray firstList = configJson.getJSONArray("firstList");            if(firstList != null && firstList.size() > 0) {                jCrawlerConfig.getFirstList().addAll(firstList.toJavaList(String.class));            }            JSONArray lastList = configJson.getJSONArray("lastList");            if(lastList != null && lastList.size() > 0) {                jCrawlerConfig.getLastList().addAll(lastList.toJavaList(String.class));            }            JSONArray backButton = configJson.getJSONArray("backButton");            if(backButton != null && backButton.size() > 0) {                jCrawlerConfig.getBackButton().addAll(backButton.toJavaList(String.class));            }            JSONArray trigger = configJson.getJSONArray("trigger");            if(trigger != null && trigger.size() > 0) {                trigger.forEach( t -> {                    JSONObject triggerAction = (JSONObject) t;                    String action = triggerAction.getString("action");                    String xpath = triggerAction.getString("xpath");                    Integer times = triggerAction.getInteger("times");                    jCrawlerConfig.addTriggerAction(action, xpath, times);                });            }            Integer maxDepth = configJson.getInteger("maxDepth");            if(maxDepth != null) {                jCrawlerConfig.setMaxDepth(maxDepth);            }        }        String jsonNodeString = JSON.toJSONString(jCrawlerConfig, SerializerFeature.WriteMapNullValue);        StepRequest request = null;        try {            JsonNode jsonNodeTree = new ObjectMapper().readTree(jsonNodeString);            String yaml = new YAMLMapper().writeValueAsString(jsonNodeTree);            CrawlerConf crawlerConf = new CrawlerConf();            crawlerConf = crawlerConf.loadYaml(yaml);            crawlerConf.androidInit();            AppCrawler.setGlobalEncoding();            log.info(crawlerConf.toYaml());            this.crawler = new Crawler();            this.crawler.loadConf(crawlerConf);            this.crawler.start(null);            request = StepRequest.newBuilder()                    .setToken(UserInfo.token)                    .setTaskCode(cmd.getTaskCode())                    .setDeviceId(deviceId)                    .setAction(StepRequest.StepAction.operation)                    .setStatus(StepRequest.StepStatus.SUCCESS)                    .setRuntime(200)                    .build();            uploadReport(resultDir);        } catch (Exception e) {            log.error("【遍历测试】配置文件解析失败");            request = StepRequest.newBuilder()                    .setToken(UserInfo.token)                    .setTaskCode(cmd.getTaskCode())                    .setDeviceId(deviceId)                    .setAction(StepRequest.StepAction.operation)                    .setStatus(StepRequest.StepStatus.ERROR)                    .setRuntime(200)                    .build();        }finally {            if(request != null) {                grpcClientService.saveStep(request);            }        }    }    @ExecutorLog(action = ExecutorAction.uninstallApp)    public void uninstallApp() throws UninstallAppException {        super.uninstallApp();    }    @Override    public void stop() {        if(crawler != null) {            crawler.stop();        }    }    @ExecutorLog(action = ExecutorAction.complete)    public void complete() {        super.complete();    }    private void uploadReport(Path resultDir) {        log.info("crawler report path: {}", resultDir.toString());        try {            Files.walk(resultDir, 2, FileVisitOption.values()).forEach(i -> {                if(i.toFile().isFile()){                    grpcClientService.fileUpload(i, resultDir.toString(), "crawler", taskCode, deviceId);                }            });        } catch (IOException e) {            e.printStackTrace();        }    }}