package com.testwa.distest.client.component.executor.worker;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.alibaba.fastjson.serializer.SerializerFeature;import com.fasterxml.jackson.databind.JsonNode;import com.fasterxml.jackson.databind.ObjectMapper;import com.testwa.core.cmd.RemoteRunCommand;import com.testwa.distest.client.android.ADBCommandUtils;import com.testwa.distest.client.component.executor.ExecutorLog;import com.testwa.distest.client.component.executor.TestTaskListener;import com.testwa.distest.client.component.executor.uiautomator2.Ui2ServerForAppium;import com.testwa.distest.client.crawler.Crawler;import com.testwa.distest.client.exception.InstallAppException;import com.testwa.distest.client.exception.LaunchAppException;import com.testwa.distest.client.exception.UninstallAppException;import com.testwa.distest.client.model.UserInfo;import io.appium.java_client.remote.AndroidMobileCapabilityType;import io.rpc.testwa.task.ExecutorAction;import io.rpc.testwa.task.StepRequest;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.StringUtils;import java.io.IOException;import java.nio.file.FileVisitOption;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.util.concurrent.Executor;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.TimeUnit;/** * @Program: distest * @Description: 遍历测试执行器 * @Author: wen * @Create: 2018-07-19 18:35 **/@Slf4jpublic class CrawlerExecutor extends CrawlerAbstractExecutor{    private String appiumUrl;    private Long taskCode;    private ExecutorService ui2CheckService = Executors.newSingleThreadExecutor();    private boolean isChecking = true;    private Ui2ServerForAppium ui2ServerForAppium;    @Override    public void init(String appiumUrl, RemoteRunCommand cmd, TestTaskListener listener) {        this.appiumUrl = appiumUrl;        this.taskCode = cmd.getTaskCode();        super.init(cmd, listener);    }    @ExecutorLog(action = ExecutorAction.downloadApp)    public void downloadApp() {        super.downloadApp();    }    @Override    public void start() {        try {            loggerStart();            installApp();            launch(); // 这里启动是为了点掉启动之后的权限弹框            run();            uninstallApp();            complete();        }catch (InstallAppException e){            // 安装失败            String error = e.getMessage();            if(StringUtils.isBlank(error)) {                error = "没有错误信息";            }            log.error("【遍历测试】设备 {} 执行任务 {} 失败， {} ", device.getName(), cmd.getTaskCode(), error);            grpcClientService.gameover(taskCode, deviceId, error);        } catch (Exception e) {            // 未知错误            String error = e.getMessage();            if(StringUtils.isBlank(error)) {                error = "未知错误信息";            }            log.error("【遍历测试】设备 {} 执行任务 {} 失败， {} ", device.getName(), cmd.getTaskCode(), error);            grpcClientService.gameover(taskCode, deviceId, error);        } finally {            loggerStop();            ui2ServerStop();        }    }    @ExecutorLog(action = ExecutorAction.installApp)    public void installApp() throws InstallAppException {        super.installApp();    }    @ExecutorLog(action = ExecutorAction.launch)    public void launch() throws LaunchAppException {        super.launch();    }    @ExecutorLog(action = ExecutorAction.run)    @Override    public void run() {        StepRequest request = null;        try {            String uuid = cmd.getDeviceId();            String configJson = "/Users/wen/git/UICrawler/config.yml";            String[] params = new String[]{"-a", "com.example.android.contactmanager.ContactManager", "-p", "com.example.android.contactmanager"};            // 检查ui2是否启动，如果挂掉，则进行重启            ui2CheckService.submit(new Runnable() {                boolean isStrat = false;                @Override                public void run() {                    while(isChecking) {                        boolean isExsit = false;                        String ps_output = ADBCommandUtils.command(deviceId, new String[]{"ps"});                        String[] outs = ps_output.split("\n");                        for(String line : outs) {                            if(line.contains("io.appium.uiautomator2.server")) {                                isStrat = true;                                isExsit = true;                            }                        }                        if(isStrat) {                            if(!isExsit) {                                if( ui2ServerForAppium == null) {                                    // 拉起uiautomator2                                    ui2ServerForAppium = new Ui2ServerForAppium(deviceId);                                    ui2ServerForAppium.start();                                    try {                                        TimeUnit.SECONDS.sleep(10);                                    } catch (InterruptedException e) {                                        e.printStackTrace();                                    }                                }                            }                        }                    }                }            });            Crawler crawler = new Crawler();            crawler.start(uuid, configJson, params);            request = StepRequest.newBuilder()                    .setToken(UserInfo.token)                    .setTaskCode(cmd.getTaskCode())                    .setDeviceId(deviceId)                    .setAction(StepRequest.StepAction.operation)                    .setStatus(StepRequest.StepStatus.SUCCESS)                    .setRuntime(200)                    .build();//            uploadReport(resultDir);        } catch (Exception e) {            log.error("【遍历测试】{} 执行失败", device.getName(), e);            request = StepRequest.newBuilder()                    .setToken(UserInfo.token)                    .setTaskCode(cmd.getTaskCode())                    .setDeviceId(deviceId)                    .setAction(StepRequest.StepAction.operation)                    .setStatus(StepRequest.StepStatus.ERROR)                    .setRuntime(200)                    .build();        }finally {            log.error("【遍历测试】{} 完成", device.getName());            if(request != null) {                grpcClientService.saveStep(request);            }            this.isChecking = false;            ui2CheckService.shutdown();            ui2ServerForAppium.close();        }    }    @ExecutorLog(action = ExecutorAction.uninstallApp)    public void uninstallApp() throws UninstallAppException {        super.uninstallApp();    }    @Override    public void stop() {    }    @ExecutorLog(action = ExecutorAction.complete)    public void complete() {        super.complete();    }    private void uploadReport(Path resultDir) {        log.info("crawler report path: {}", resultDir.toString());        try {            Files.walk(resultDir, 2, FileVisitOption.values()).forEach(i -> {                if(i.toFile().isFile()){                    grpcClientService.fileUpload(i, resultDir.toString(), "crawler", taskCode, deviceId);                }            });        } catch (IOException e) {            e.printStackTrace();        }    }}