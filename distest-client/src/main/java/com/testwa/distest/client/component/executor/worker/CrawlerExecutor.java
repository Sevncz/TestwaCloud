package com.testwa.distest.client.component.executor.worker;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.fasterxml.jackson.databind.JsonNode;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;import com.testwa.core.cmd.RemoteRunCommand;import com.testwa.core.shell.UTF8CommonExecs;import com.testwa.distest.client.component.Constant;import com.testwa.distest.client.component.appium.utils.Config;import com.testwa.distest.client.component.executor.proxy.ExecutorLog;import com.testwa.distest.client.component.executor.task.TestTaskListener;import com.testwa.distest.client.component.executor.uiautomator2.AppiumUi2ServerDaemon;import com.testwa.distest.client.exception.InstallAppException;import com.testwa.distest.client.exception.LaunchAppException;import com.testwa.distest.client.exception.UninstallAppException;import com.testwa.distest.client.model.UserInfo;import io.rpc.testwa.task.ExecutorAction;import io.rpc.testwa.task.StepRequest;import lombok.extern.slf4j.Slf4j;import org.apache.commons.exec.CommandLine;import org.apache.commons.lang3.StringUtils;import java.io.File;import java.io.IOException;import java.nio.file.FileVisitOption;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import static org.apache.commons.exec.ExecuteWatchdog.INFINITE_TIMEOUT;/** * @Program: distest * @Description: 遍历测试执行器 * @Author: wen * @Create: 2018-07-19 18:35 **/@Slf4jpublic class CrawlerExecutor extends CrawlerAbstractExecutor{    private int appiumPort;    private Long taskCode;    private Thread ui2Thread;    private UTF8CommonExecs javaExecs;    private boolean hasError = false;    private StringBuffer errorMsg = new StringBuffer();    private String resourcePath;    private String cralwerJarPath;    private String cralwerYamlPath;    private static final String cralwer = "UICrawler-2.0.jar";    @Override    public void init(int appiumPort, RemoteRunCommand cmd, TestTaskListener listener) {        this.resourcePath = Config.getString("distest.agent.resources");        this.cralwerJarPath = Paths.get(resourcePath, "crawler", cralwer).toString();        this.cralwerYamlPath = Paths.get(resourcePath, "crawler", "config.yml").toString();        this.appiumPort = appiumPort;        this.taskCode = cmd.getTaskCode();        super.init(cmd, listener);    }    @Override    public void start() {        try {            downloadApp();            loggerStart();            installApp();            launch(); // 这里启动是为了点掉启动之后的权限弹框            run();            uninstallApp();            complete();        }catch (InstallAppException e){//             安装失败            String error = e.getMessage();            if(StringUtils.isBlank(error)) {                error = "没有错误信息";            }            log.error("【遍历测试】设备 {} 执行任务 {} 失败， {} ", device.getName(), cmd.getTaskCode(), error);            grpcClientService.gameover(taskCode, deviceId, error);        } catch (Exception e) {            // 未知错误            String error = e.getMessage();            if(StringUtils.isBlank(error)) {                error = "未知错误信息";            }            log.error("【遍历测试】设备 {} 执行任务 {} 失败， {} ", device.getName(), cmd.getTaskCode(), error, e);            grpcClientService.gameover(taskCode, deviceId, error);        } finally {            cleanThread();        }    }    @ExecutorLog(action = ExecutorAction.downloadApp)    public void downloadApp() {        super.downloadApp();    }    @ExecutorLog(action = ExecutorAction.installApp)    public void installApp() throws InstallAppException {        super.installApp();    }    @ExecutorLog(action = ExecutorAction.launch)    public void launch() throws LaunchAppException {        super.launch();    }    @ExecutorLog(action = ExecutorAction.run)    @Override    public void run() {        StepRequest request = null;        // 检查ui2是否启动，如果挂掉，则进行重启        AppiumUi2ServerDaemon ui2ServerDaemon = new AppiumUi2ServerDaemon(deviceId);        ui2Thread = new Thread(ui2ServerDaemon);        ui2Thread.start();        try {            String reportOut = Constant.localCrawlerOutPath + File.separator + deviceId + File.separator + taskCode;            String screenOut = Constant.localCrawlerOutPath + File.separator + deviceId + File.separator + taskCode + File.separator + "capture";            Path reportOutPath = Paths.get(reportOut);            if(Files.notExists(reportOutPath)) {                Files.createDirectories(reportOutPath);            }            CommandLine commandLine = new CommandLine("java");            commandLine.addArgument("-jar");            commandLine.addArgument(cralwerJarPath, false);            commandLine.addArgument("-u");            commandLine.addArgument(cmd.getDeviceId());            commandLine.addArgument("-t");            commandLine.addArgument(String.valueOf(appiumPort));            commandLine.addArgument("-f");            commandLine.addArgument(cralwerYamlPath);            commandLine.addArgument("-a");            commandLine.addArgument(cmd.getAppInfo().getActivity());            commandLine.addArgument("-p");            commandLine.addArgument(cmd.getAppInfo().getPackageName());            commandLine.addArgument("-o");            commandLine.addArgument(reportOut);            javaExecs = new UTF8CommonExecs(commandLine);            try {                javaExecs.setTimeout(INFINITE_TIMEOUT);                javaExecs.exec();                String output = javaExecs.getOutput();                log.info("output ------> {} ", output);                request = StepRequest.newBuilder()                        .setToken(UserInfo.token)                        .setTaskCode(cmd.getTaskCode())                        .setDeviceId(deviceId)                        .setAction(StepRequest.StepAction.operation)                        .setStatus(StepRequest.StepStatus.SUCCESS)                        .setRuntime(200)                        .build();            } catch (IOException e) {                String error = javaExecs.getError();                log.error("{} Crawler 执行错误 {}", device.getName(), error, e);                hasError = true;                errorMsg.append(error).append("\n");                request = StepRequest.newBuilder()                        .setToken(UserInfo.token)                        .setTaskCode(cmd.getTaskCode())                        .setDeviceId(deviceId)                        .setAction(StepRequest.StepAction.operation)                        .setStatus(StepRequest.StepStatus.ERROR)                        .setRuntime(200)                        .build();            }            Path screenPath = Paths.get(screenOut);            if(Files.exists(screenPath)) {                try {                    Files.walk(screenPath, 5, FileVisitOption.values())                            .filter(path -> path.toString().endsWith("png"))                            .forEach( img -> {                                if(img.toFile().isFile()){                                    String imgName = img.getFileName().toString();                                    StepRequest stepRequest = StepRequest.newBuilder()                                            .setToken(UserInfo.token)                                            .setTaskCode(cmd.getTaskCode())                                            .setDeviceId(deviceId)                                            .setImg(imgName)                                            .setAction(StepRequest.StepAction.operationStep)                                            .setStatus(StepRequest.StepStatus.SUCCESS)                                            .setRuntime(200)                                            .build();                                    grpcClientService.saveStep(stepRequest);                                }                            });                    log.info("遍历测试 上传截图 {}", screenOut);                    grpcClientService.saveImgDir(screenOut, cmd.getTaskCode(), deviceId);                } catch (IOException e) {                    log.error("截图文件无法读取");                }            }else{                log.error("遍历测试  截图不存在 {}", screenOut);            }        } catch (Exception e) {            log.error("【遍历测试】{} 执行失败", device.getName(), e);            request = StepRequest.newBuilder()                    .setToken(UserInfo.token)                    .setTaskCode(cmd.getTaskCode())                    .setDeviceId(deviceId)                    .setAction(StepRequest.StepAction.operation)                    .setStatus(StepRequest.StepStatus.ERROR)                    .setRuntime(200)                    .build();        }finally {            log.info("【遍历测试】{} 完成", device.getName());            if(request != null) {                grpcClientService.saveStep(request);            }            this.ui2Thread.interrupt();            ui2ServerDaemon.close();        }    }    @ExecutorLog(action = ExecutorAction.uninstallApp)    public void uninstallApp() throws UninstallAppException {        super.uninstallApp();    }    @Override    public void stop() {        if(javaExecs != null) {            javaExecs.destroy();        }    }    @ExecutorLog(action = ExecutorAction.complete)    public void complete() {        super.complete();    }    public static void main(String[] args) {        String cralwerJarPath = "/Applications/Testwa Agent.app/Contents/Resources/static/java/resources/crawler/UICrawler-2.0.jar";//        CommandLine commandLine = new CommandLine("java");//        commandLine.addArguments("-jar");//        commandLine.addArgument(cralwerJarPath, false);////////        UTF8CommonExecs javaExecs = new UTF8CommonExecs(commandLine);////        try {////            javaExecs.setTimeout(INFINITE_TIMEOUT);////            javaExecs.exec();////            String output = javaExecs.getOutput();////            System.out.println(output);////        } catch (IOException e) {////            e.printStackTrace();////            String output = javaExecs.getError();////            System.out.println(output);////        }//        try {////            Process p = Runtime.getRuntime().exec(new String[]{"java", "-jar", cralwerJarPath});//            Process p = Runtime.getRuntime().exec(commandLine.toStrings());//            p.waitFor();//            System.out.println(p.exitValue());//            byte[] chunk = new byte[1024];//            int len = p.getErrorStream().read(chunk);//            System.out.println(new String(chunk, StandardCharsets.UTF_8));////        } catch (IOException e) {//            e.printStackTrace();//        } catch (InterruptedException e) {//            e.printStackTrace();//        }        String confFilePath = "/Users/wen/IdeaProjects/distest/distest-client/bin/resources/crawler/config.yml";        String configCustom = "{\n" +                "  \"maxDepth\": 10,\n" +                "  \"runningTimeMinutes\": 60,\n" +                "  \"backKeyTriggerList\": [\n" +                "    \"回退\",\n" +                "    \"back\",\n" +                "    \"return\"\n" +                "    ],\n" +                "  \"inputClassList\": [\n" +                "   \"android.widget.TextView\",\n" +                "   \"XCUIElementTypeTextField\",\n" +                "   \"XCUIElementTypeSecureTextField\"\n" +                "    ],\n" +                "  \"inputTextList\": [\n" +                "   \"123\",\n" +                "   \"asc\",\n" +                "   \"mkis\"\n" +                "    ],\n" +                "  \"itemBlackList\": [\n" +                "     \"客服\",\n" +                "     \"电话\",\n" +                "     \"不允许\",\n" +                "     \"拒绝\",\n" +                "     \"拍照\",\n" +                "     \"禁止\",\n" +                "     \"呼叫\",\n" +                "     \"低电量模式\",\n" +                "     \"关闭\",\n" +                "     \"去付款\"\n" +                "    ],\n" +                "    \"itemWhiteList\": [\n" +                "      \"确定\",\n" +                "      \"允许\",\n" +                "      \"退出\",\n" +                "      \"取消\",\n" +                "      \"已解决\"\n" +                "    ],\n" +                "    \"loginElementAndroid\": [\n" +                "      { \"loginChange\": \n" +                "           { \n" +                "            \"xpath\": \"//*[@resource-id=\\\"com.xes.jazhanghui.activity:id/login_change\\\"]\",\n" +                "            \"action\": \"click\" \n" +                "           } \n" +                "      },\n" +                "      { \"username\": \n" +                "           { \n" +                "            \"xpath\": \"//android.widget.TextView[contains(@text, '请输入手机号')]\",\n" +                "            \"action\": \"input\",\n" +                "            \"value\": \"18600753024\"\n" +                "           }\n" +                "      },\n" +                "        { \"password\": \n" +                "           { \n" +                "            \"xpath\": \"//android.widget.TextView[contains(@text, '请输入密码')]\",\n" +                "            \"action\": \"input\",\n" +                "            \"value\": \"123456\" \n" +                "           }\n" +                "        },\n" +                "        { \"loginButton\": \n" +                "           { \n" +                "            \"xpath\": \"//android.widget.TextView[contains(@text, '登录')]\",\n" +                "            \"action\": \"click\" \n" +                "           } \n" +                "        }\n" +                "    ]\n" +                "} ";        try {            String ymlContent =  new String(Files.readAllBytes(Paths.get(confFilePath)));            ObjectMapper yamlReader = new ObjectMapper(new YAMLFactory());            Object ymlObj = yamlReader.readValue(ymlContent, Object.class);            String jsonObj = JSON.toJSONString(ymlObj);            System.out.println(jsonObj);            JSONObject ymlJson = JSON.parseObject(jsonObj);            JSONObject configJson = JSON.parseObject(configCustom);            ymlJson.getJSONObject("GENERAL").put("MAX_DEPTH", configJson.get("maxDepth"));            ymlJson.getJSONObject("GENERAL").put("CRAWLER_RUNNING_TIME", configJson.get("runningTimeMinutes"));            ymlJson.getJSONObject("LIST").put("BACK_KEY_TRIGGER_LIST", configJson.get("backKeyTriggerList"));            ymlJson.getJSONObject("LIST").put("INPUT_CLASS_LIST", configJson.get("inputClassList"));            ymlJson.getJSONObject("LIST").put("INPUT_TEXT_LIST", configJson.get("inputTextList"));            ymlJson.getJSONObject("LIST").put("ITEM_BLACKLIST", configJson.get("itemBlackList"));            ymlJson.getJSONObject("LIST").put("ITEM_WHITE_LIST", configJson.get("itemWhiteList"));            ymlJson.getJSONObject("LOGIN_ELEMENTS").put("LOGIN_ELEMENTS_ANDROID", configJson.get("loginElementAndroid"));            System.out.println(JSON.toJSONString(ymlJson));            JsonNode jsonNodeTree = new ObjectMapper().readTree(JSON.toJSONString(ymlJson));            String jsonAsYaml = new YAMLMapper().writeValueAsString(jsonNodeTree);            System.out.println(jsonAsYaml);            String testPath = "/Users/wen/IdeaProjects/distest/distest-client/bin/resources/crawler/testConfig.yml";            Files.write(Paths.get(testPath), jsonAsYaml.getBytes());        } catch (IOException e) {            e.printStackTrace();        }    }}