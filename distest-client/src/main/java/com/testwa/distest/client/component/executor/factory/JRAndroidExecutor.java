package com.testwa.distest.client.component.executor.factory;import com.github.cosysoft.device.android.AndroidDevice;import com.github.cosysoft.device.android.impl.AndroidDeviceStore;import com.github.cosysoft.device.android.impl.DefaultAndroidApp;import com.github.cosysoft.device.shell.AndroidSdk;import com.testwa.core.cmd.AppInfo;import com.testwa.core.cmd.RemoteRunCommand;import com.testwa.core.shell.UTF8CommonExecs;import com.testwa.distest.client.ApplicationContextUtil;import com.testwa.distest.client.component.Constant;import com.testwa.distest.client.component.appium.utils.Config;import com.testwa.distest.client.component.executor.ExecutorActionInfo;import com.testwa.distest.client.download.Downloader;import com.testwa.distest.client.exception.DownloadFailException;import com.testwa.distest.client.service.GrpcClientService;import lombok.extern.slf4j.Slf4j;import org.apache.commons.exec.CommandLine;import java.io.File;import java.io.IOException;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.util.concurrent.Executors;import java.util.concurrent.ScheduledExecutorService;import java.util.concurrent.TimeUnit;/** * @Program: distest * @Description: 兼容android测试 * @Author: wen * @Create: 2018-05-15 14:38 **/@Slf4jpublic class JRAndroidExecutor extends JRAbstractExecutor {    private RemoteRunCommand cmd;    private String distestApiWeb;    private Downloader downloader;    private AppInfo appInfo;    private String deviceId;    private String appLocalPath;    private AndroidDevice device;    private DefaultAndroidApp androidApp;    private UTF8CommonExecs exec;    private GrpcClientService grpcClientService;    private Path logcatTempFile;    private ScheduledExecutorService scheduledExecutor;    @ExecutorActionInfo(desc = "参数初始化", order = 0)    public void init(RemoteRunCommand cmd) {        this.grpcClientService = (GrpcClientService) ApplicationContextUtil.getBean("grpcClientService");        this.cmd = cmd;        this.distestApiWeb = Config.getString("distest.api.web");        this.appInfo = cmd.getAppInfo();        this.deviceId = cmd.getDeviceId();        this.downloader = new Downloader();        this.device = AndroidDeviceStore.getInstance().getDeviceBySerial(deviceId);        this.scheduledExecutor = Executors.newScheduledThreadPool(1);        this.logcatTempFile = Paths.get(Constant.localLogcatPath, Thread.currentThread().getId() + ".txt");        try {            log.info("logcat 临时文件: {}", logcatTempFile.toString());            Files.deleteIfExists(logcatTempFile);            Files.createFile(logcatTempFile);        } catch (IOException e) {        }    }    @ExecutorActionInfo(desc = "下载APP", order = 1)    @Override    public void downloadApp() throws IOException, DownloadFailException {        String appUrl = String.format("http://%s/app/%s", distestApiWeb, appInfo.getPath());        this.appLocalPath = Constant.localAppPath + File.separator + appInfo.getMd5() + File.separator + appInfo.getFileAliasName();        // 检查是否有和该app md5一致的        downloader.start(appUrl, appLocalPath);    }    @ExecutorActionInfo(desc = "任务队列初始化", order = 2)    public void start() {        logger();        installApp();        launch();        monkeyClick();        uninstallApp();        complete();        loggerStop();    }    @ExecutorActionInfo(desc = "安装", order = 3)    @Override    public void installApp() {        androidApp = new DefaultAndroidApp(new File(appLocalPath));        device.install(androidApp);    }    @ExecutorActionInfo(desc = "启动", order = 4)    @Override    public void launch() {        device.start(androidApp);    }    @ExecutorActionInfo(desc = "点击", order = 5)    @Override    public void monkeyClick() {        try {            TimeUnit.SECONDS.sleep(10);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @ExecutorActionInfo(desc = "卸载", order = 6)    @Override    public void uninstallApp() {        device.uninstall(androidApp);    }    @Override    public void stop() {        if(this.exec != null){            this.exec.destroy();        }    }    @ExecutorActionInfo(desc = "完成", order = 7)    @Override    public void complete() {        this.grpcClientService.logcatFileUpload(logcatTempFile, cmd.getExeId(), deviceId);    }    /**     *@Description: 启动logcat，并记录     *@Param: []     *@Return: void     *@Author: wen     *@Date: 2018/5/14     */    @Override    public void logger() {        loggerClear();        CommandLine commandLine = new CommandLine(AndroidSdk.adb());        commandLine.addArgument("-s");        commandLine.addArgument(this.deviceId);        commandLine.addArgument("logcat");        commandLine.addArgument("-v");        commandLine.addArgument("time");        commandLine.addArgument("process");        commandLine.addArgument("*:W");        exec = new UTF8CommonExecs(commandLine);        // 设置最大执行时间，5分钟        exec.setTimeout(5*60*1000L);        try {            exec.asyncexec();            // 启动任务            int initialDelay = 0;            int period = 10;            scheduledExecutor.scheduleWithFixedDelay(saveLogcatToFileTask, initialDelay, period, TimeUnit.SECONDS);        } catch (IOException e) {            e.printStackTrace();        }    }    private void loggerClear() {        CommandLine commandLine = new CommandLine(AndroidSdk.adb());        commandLine.addArgument("-s");        commandLine.addArgument(this.deviceId);        commandLine.addArgument("-c");        UTF8CommonExecs clexec = new UTF8CommonExecs(commandLine);        try {            clexec.exec();        } catch (IOException e) {        }    }    private void loggerStop() {        if(this.exec != null){            this.exec.destroy();        }        if(this.scheduledExecutor != null){            this.scheduledExecutor.shutdown();        }    }    private Runnable saveLogcatToFileTask = () -> exec.outputToFile(logcatTempFile);}