package com.testwa.distest.client.component.executor.factory;import com.github.cosysoft.device.android.impl.DefaultAndroidApp;import com.testwa.core.cmd.RemoteRunCommand;import com.testwa.distest.client.component.ADBCommandUtils;import com.testwa.distest.client.component.Constant;import com.testwa.distest.client.component.StepResult;import com.testwa.distest.client.component.executor.ExecutorLog;import com.testwa.distest.client.exception.*;import com.testwa.distest.client.model.UserInfo;import io.rpc.testwa.task.ExecutorAction;import io.rpc.testwa.task.StepRequest;import lombok.extern.slf4j.Slf4j;import java.io.File;import java.io.IOException;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.util.concurrent.*;/** * @Program: distest * @Description: 兼容android测试 * @Author: wen * @Create: 2018-05-15 14:38 **/@Slf4jpublic class JRAndroidExecutor extends JRAbstractExecutor {    private String appLocalPath;    public void init(RemoteRunCommand cmd) {        super.init(cmd);    }    @ExecutorLog(action = ExecutorAction.downloadApp)    @Override    public void downloadApp(){        String appUrl = String.format("http://%s/app/%s", distestApiWeb, appInfo.getPath());        this.appLocalPath = Constant.localAppPath + File.separator + appInfo.getMd5() + File.separator + appInfo.getFileAliasName();        // 检查是否有和该app md5一致的        StepResult result = new StepResult(StepRequest.StepAction.downloadApp);        Long start = System.currentTimeMillis();        try {            downloader.start(appUrl, appLocalPath);        } catch (DownloadFailException | IOException e) {            result.setStatus(StepRequest.StepStatus.FAIL);            result.setErrormsg(e.getMessage());        }finally {            Long end = System.currentTimeMillis();            result.setTotalTime(end - start);        }        sendStepRequest(result);    }    public void start() {        try {            androidApp = new DefaultAndroidApp(new File(appLocalPath));            uiautomator2ServerStart(deviceId);            logger(deviceId);            installApp();            launch();            run();            uninstallApp();            complete();        }catch (InstallAppException e){            // 安装失败            log.error("{} 任务执行错误，应用安装失败", deviceId, e.getMessage());            grpcClientService.gameover(cmd.getTaskCode(), deviceId, e.getMessage());        } catch (LaunchAppException e) {            // 启动失败            log.error("{} 任务执行错误，应用启动失败", deviceId, e.getMessage());            grpcClientService.gameover(cmd.getTaskCode(), deviceId, e.getMessage());        } catch (UninstallAppException e) {            // 卸载失败            log.error("{} 任务执行错误，应用卸载失败", deviceId, e.getMessage());            grpcClientService.gameover(cmd.getTaskCode(), deviceId, e.getMessage());        } finally {            loggerStop();            uiautomator2ServerStop(deviceId);        }    }    @ExecutorLog(action = ExecutorAction.installApp)    @Override    public void installApp() throws InstallAppException {        if(ADBCommandUtils.isInstalledBasepackage(deviceId, androidApp.getBasePackage())){            ADBCommandUtils.uninstallApp(deviceId, androidApp.getBasePackage());        }        startInstallCheck();        StepResult result = ADBCommandUtils.installApp(deviceId, appLocalPath);        stopInstallCheck();        sendStepRequest(result);        if(StepRequest.StepStatus.FAIL.equals(result.getStatus())){            throw new InstallAppException(result.getErrormsg());        }    }    private void sendStepRequest(StepResult result) {        StepRequest request = StepRequest.newBuilder()                .setToken(UserInfo.token)                .setTaskCode(cmd.getTaskCode())                .setDeviceId(deviceId)                .setAction(result.getAction())                .setStatus(result.getStatus())                .setRuntime(result.getTotalTime())                .setErrormsg(result.getErrormsg())                .setTimestamp(System.currentTimeMillis())                .build();        grpcClientService.saveStep(request);    }    @ExecutorLog(action = ExecutorAction.launch)    @Override    public void launch() throws LaunchAppException {        StepResult result = ADBCommandUtils.launcherApp(deviceId, appLocalPath);        sendStepRequest(result);        if(StepRequest.StepStatus.FAIL.equals(result.getStatus())){            throw new LaunchAppException(result.getErrormsg());        }    }    @ExecutorLog(action = ExecutorAction.run)    @Override    public void run() {        startRecodPerformance();        String screen = ADBCommandUtils.monkey(deviceId, androidApp.getBasePackage(), 2);        stopRecodPerformance();        // 上传截图        log.info("截图路径：{}", screen);        Path screenPath = Paths.get(screen);        try {            // TODO 检查是否有crash日志            Files.list(screenPath)                .filter(path -> path.toString().endsWith("png"))                .forEach( img -> {//                    String imgRelativePath = img.toString().replace(Constant.AGENT_TMP_DIR, "");//                    String dumpRelativePath = imgRelativePath.replace("png", "xml");                    String imgName = img.getFileName().toString();                    String dumpName = imgName.replace("png", "xml");                    // TODO 需要压缩图片                    StepRequest request = StepRequest.newBuilder()                            .setToken(UserInfo.token)                            .setTaskCode(cmd.getTaskCode())                            .setDeviceId(deviceId)                            .setDump(dumpName)                            .setImg(imgName)                            .setAction(StepRequest.StepAction.operation)                            .setStatus(StepRequest.StepStatus.SUCCESS)                            .setRuntime(200)                            .build();                    grpcClientService.saveStep(request);            });            grpcClientService.saveImgDir(screen, cmd.getTaskCode(), deviceId);        } catch (IOException e) {            log.error("截图文件无法读取");        }    }    @ExecutorLog(action = ExecutorAction.uninstallApp)    @Override    public void uninstallApp() throws UninstallAppException {        StepResult result = ADBCommandUtils.uninstallApp(deviceId, androidApp.getBasePackage());        sendStepRequest(result);        if(StepRequest.StepStatus.FAIL.equals(result.getStatus())){            throw new UninstallAppException(result.getErrormsg());        }    }    @ExecutorLog(action = ExecutorAction.stop)    @Override    public void stop() {        if(this.logexecs != null){            this.logexecs.destroy();        }        uiautomator2ServerStop(deviceId);        StepRequest request = StepRequest.newBuilder()                .setToken(UserInfo.token)                .setTaskCode(cmd.getTaskCode())                .setDeviceId(deviceId)                .setAction(StepRequest.StepAction.stop)                .setStatus(StepRequest.StepStatus.SUCCESS)                .build();        grpcClientService.saveStep(request);    }    @ExecutorLog(action = ExecutorAction.complete)    @Override    public void complete() {        this.grpcClientService.logcatFileUpload(logcatTempFile, cmd.getTaskCode(), deviceId);        StepRequest request = StepRequest.newBuilder()                .setToken(UserInfo.token)                .setTaskCode(cmd.getTaskCode())                .setDeviceId(deviceId)                .setAction(StepRequest.StepAction.complete)                .setStatus(StepRequest.StepStatus.SUCCESS)                .build();        grpcClientService.saveStep(request);        log.info("{} 完成 {}", deviceId, cmd.getTaskCode());    }}