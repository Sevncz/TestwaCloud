package com.testwa.distest.client.component.executor;import com.testwa.core.cmd.RemoteRunCommand;import com.testwa.distest.client.ApplicationContextUtil;import com.testwa.distest.client.component.appium.AppiumManager;import com.testwa.distest.client.component.appium.pool.AppiumManagerPool;import com.testwa.distest.client.component.appium.utils.Config;import com.testwa.distest.client.exception.DownloadFailException;import com.testwa.distest.client.service.GrpcClientService;import lombok.extern.slf4j.Slf4j;import java.io.IOException;import java.util.ArrayList;import java.util.List;@Slf4jpublic class Task {    private List<TaskListener> listenerList = new ArrayList<>();    private Thread taskInitialThread;    private RemoteRunCommand cmd;    private PythonExecutor executor;    public Task(RemoteRunCommand cmd){        this.cmd = cmd;    }    public void start() {        log.info("设备 {} 开始测试任务", cmd.getDeviceId());        AppiumManagerPool pool = (AppiumManagerPool) ApplicationContextUtil.getBean("appiumManagerPool");        GrpcClientService grpcClientService = (GrpcClientService) ApplicationContextUtil.getBean("grpcClientService");        String distestApiWeb = Config.getString("distest.api.web");        String distestApiName = Config.getString("distest.api.name");        taskInitialThread = new Thread(new StartInitial(grpcClientService, pool, distestApiWeb, distestApiName));        taskInitialThread.setDaemon(false);        taskInitialThread.start();    }    class StartInitial implements Runnable {        private GrpcClientService grpcClientService;        private AppiumManagerPool pool;        private String distestApiWeb;        private String distestApiName;        public StartInitial(GrpcClientService grpcClientService, AppiumManagerPool pool, String distestApiWeb, String distestApiName) {            this.grpcClientService = grpcClientService;            this.pool = pool;            this.distestApiWeb = distestApiWeb;            this.distestApiName = distestApiName;        }        public void run() {            final AppiumManager manager = pool.getManager();            String appiumLogPath = manager.getAppiumlogPath();            try {                String appiumUrl = manager.getAppiumService().getUrl().toString();                executor = ProxyFactory.getPyExecutorInstance(PythonExecutor.class, cmd);                executor.init(distestApiWeb, distestApiName, appiumUrl, cmd);                onStartup(true);                AppDownloadExecutorHandler appHander = new AppDownloadExecutorHandler();                ScriptDownloadExecutorHandler scriptHander = new ScriptDownloadExecutorHandler();                PythonExecutorHandler pythonHander = new PythonExecutorHandler();                appHander.setHandler(scriptHander);                scriptHander.setHandler(pythonHander);                appHander.handleRequest(executor);            } catch (DownloadFailException | IOException e){                onStartup(false);                log.error("executors error", e);            } finally {                grpcClientService.appiumLogUpload(cmd.getExeId(), cmd.getDeviceId(), appiumLogPath);            }            pool.release(manager);            grpcClientService.gameover(cmd.getExeId());            onComplete();        }    }    public void kill() {        log.info("设备 {} 停止测试任务", cmd.getDeviceId());        if (executor != null) {            executor.stop();            onCancel();        }    }    public void addEventListener(TaskListener listener) {        if (listener != null) {            this.listenerList.add(listener);        }    }    private void onStartup(boolean success) {        for (TaskListener listener : listenerList) {            listener.onStartup(this, success);        }    }    private void onComplete() {        for (TaskListener listener : listenerList) {            listener.onComplete(this);        }    }    private void onCancel() {        for (TaskListener listener : listenerList) {            listener.onCancel(this);        }    }}