package com.testwa.distest.client.component.minicap;import com.testwa.distest.client.android.ADBCommandUtils;import com.testwa.distest.client.android.PhysicalSize;import lombok.extern.slf4j.Slf4j;import org.apache.commons.io.IOUtils;import java.io.Closeable;import java.util.concurrent.TimeoutException;@Slf4jpublic class ScreenAndroidProjection extends Thread implements Closeable {    /** 缩放 */    private float zoom = 1;    /** 旋转 0|90|180|270 */    private int rotate = 0;    /** -Q <value>: JPEG quality (0-100) */    private int quality = 100;    private String deviceId;    private MinicapAndroidServer server;    private MinicapClient client;    private VideoRecorderServer recorder;    private ScreenListener listener;    public ScreenAndroidProjection(String deviceId, ScreenListener listener) {        this.deviceId = deviceId;        this.listener = listener;    }    /**     * 设置缩放比例，默认为1不缩放     * @param zoom 缩放比例     */    public void setZoom(float zoom) {        this.zoom = zoom;    }    /**     * 设置旋转角度，默认为0不旋转     * @param rotate 旋转角度     */    public void setRotate(int rotate) {        this.rotate = rotate;    }    /**     * 设置图片质量，默认为100最高质量     * @param quality 图片质量     */    public void setQuality(int quality) {        this.quality = quality;    }    /**     * 重启     */    public void restart() {        this.server.setZoom(zoom);        this.server.setRotate(rotate);        this.server.setQuality(quality);        this.server.restart();    }    private void startServer() throws TimeoutException, InterruptedException {        this.server = new MinicapAndroidServer(deviceId);        this.server.setZoom(zoom);        this.server.setRotate(rotate);        this.server.setQuality(quality);        this.server.start();    }    private void startClient() {        int port = this.server.getPort();        this.client = new MinicapClient(port);        this.client.start();    }    private void startVidoRecorder() {        try {            this.recorder = new VideoRecorderServer();            this.recorder.setSize(ADBCommandUtils.getPhysicalSize(deviceId));            this.recorder.setZoom(this.zoom);            this.recorder.start();        } catch (Exception e) {            e.printStackTrace();        }    }    public boolean isRunning() {        if(this.server == null) {            return false;        }        if(this.client == null) {            return false;        }        return this.server.isRunning() && this.client.isRunning();    }    @Override    public void run() {        try {            startVidoRecorder();            startServer();            startClient();            while (this.server.isRunning()) {                byte[] take1 = this.client.take();                try {                    this.recorder.offer(take1);                    this.listener.projection(take1);                } catch (Exception e) {                    e.printStackTrace();                }                long start = System.currentTimeMillis();                byte[] take = null;                while(true) {                    long end = System.currentTimeMillis();                    if((end - start) >= 100 && take != null) {                        break;                    }                    take = this.client.take();                    this.recorder.offer(take);                }            }        } catch (Exception e) {            log.error("屏幕映射失败", e);        } finally {            close();        }    }    @Override    public void close() {        IOUtils.closeQuietly(recorder);        IOUtils.closeQuietly(server);        IOUtils.closeQuietly(client);    }}