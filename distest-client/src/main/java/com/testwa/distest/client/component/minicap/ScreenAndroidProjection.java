package com.testwa.distest.client.component.minicap;import lombok.extern.slf4j.Slf4j;import java.io.Closeable;@Slf4jpublic class ScreenAndroidProjection extends Thread implements Closeable {    /** 旋转 0|90|180|270 */    private int rotate = 0;    /** -Q <value>: JPEG quality (0-100) */    private int quality = 100;    /** 是否记录视频，true: 只记录视频 false: 只上传*/    private String outputFile = "./record.flv";    private String deviceId;    private String resourcePath;    private MinicapServer server;    private MinicapClient client;    private ScreenProjectionObserver screenProjectionObserver;    public ScreenAndroidProjection(String deviceId, String resourcePath, ScreenProjectionObserver screenProjectionObserver) {        this.deviceId = deviceId;        this.resourcePath = resourcePath;        this.screenProjectionObserver = screenProjectionObserver;    }    /**     * 设置旋转角度，默认为0不旋转     * @param rotate 旋转角度     */    public void setRotate(int rotate) {        this.rotate = rotate;    }    /**     * 设置图片质量，默认为100最高质量     * @param quality 图片质量     */    public void setQuality(int quality) {        this.quality = quality;    }    /**     * 重启     */    public void restart() {        this.server.setRotate(rotate);        this.server.setQuality(quality);        this.server.restart();    }    private void startServer() {        this.server = new MinicapServer(deviceId, resourcePath);        this.server.setRotate(rotate);        this.server.setQuality(quality);        this.server.start();    }    private void startClient() {        this.client = new MinicapClient(deviceId);        this.client.registerObserver(this.screenProjectionObserver);        this.client.start();    }    public boolean isRunning() {        if(this.server == null) {            return false;        }        if(this.client == null) {            return false;        }        return this.server.isRunning() && this.client.isRunning();    }    @Override    public void run() {        startServer();        startClient();    }    @Override    public void close() {        if(client != null) {            client.close();        }        if(server != null) {            server.close();        }        this.interrupt();    }    public byte[] frame() {        byte[] frame = null;        try {            frame = this.client.take();        } catch (InterruptedException e) {            e.printStackTrace();        }        return frame;    }}