package com.testwa.distest.client.config;import com.testwa.distest.client.control.client.grpc.pool.GClientPool;import com.testwa.distest.client.control.client.grpc.pool.GClientPoolConfig;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.core.env.Environment;@Configurationpublic class GClientPoolsConfig {    private static final Logger LOG = LoggerFactory.getLogger(GClientPoolsConfig.class);    @Autowired    private Environment env;    @Bean(name = "gClientPool")    public GClientPool gClientPool(){        String host = env.getProperty("grpc.host");        Integer port = Integer.parseInt(env.getProperty("grpc.port"));        GClientPoolConfig poolConfig = new GClientPoolConfig();        poolConfig.setMaxTotal(10); // 池中的最大连接数        poolConfig.setMinIdle(0); // 最少的空闲连接数        poolConfig.setMaxIdle(10); // 最多的空闲连接数        poolConfig.setMaxWaitMillis(-1); // 当连接池资源耗尽时,调用者最大阻塞的时间,超时时抛出异常 单位:毫秒数        poolConfig.setLifo(true); // 连接池存放池化对象方式,true放在空闲队列最前面,false放在空闲队列最后        poolConfig.setMinEvictableIdleTimeMillis(1000L * 60L * 30L); // 连接空闲的最小时间,达到此值后空闲连接可能会被移除,默认即为30分钟        poolConfig.setBlockWhenExhausted(true); // 连接耗尽时是否阻塞,默认为true        GClientPool gClientPool = new GClientPool(host, port, poolConfig);        return gClientPool;    }}