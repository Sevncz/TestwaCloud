package com.testwa.distest.client.device.listener.callback;import com.testwa.distest.client.component.stfagent.KeyCode;import com.testwa.distest.client.device.driver.IDeviceRemoteControlDriver;import com.testwa.distest.client.device.listener.callback.debug.DebugStartCallback;import com.testwa.distest.client.device.listener.callback.debug.DebugStopCallback;import com.testwa.distest.client.device.listener.callback.remote.*;import com.testwa.distest.client.device.listener.callback.task.CrawlerStartCallback;import com.testwa.distest.client.device.listener.callback.task.JRStartCallback;import com.testwa.distest.client.device.listener.callback.task.TaskCancelCallback;import com.testwa.distest.client.device.listener.callback.task.TaskStartCallback;import io.rpc.testwa.push.Message;public class RemoteCommandCallBackUtils {	@SuppressWarnings("rawtypes")	public static IRemoteCommandCallBack getCallBack(Message.Topic topic, IDeviceRemoteControlDriver driver) throws Exception {	    switch (topic) {            case ADB:                return new AdbCallback(driver);            case BACK:                return new ButtonEventCallback(driver, KeyCode.KEYCODE_BACK);            case HOME:                return new ButtonEventCallback(driver, KeyCode.KEYCODE_HOME);            case MENU:                return new ButtonEventCallback(driver, KeyCode.KEYCODE_MENU);            case DEL:                return new ButtonEventCallback(driver, KeyCode.KEYCODE_DEL);            case INPUT:                return new InputCallback(driver);            case OPENWEB:                return new OpenWebCallback(driver);            case PUSH_FILE:                return new PushFileCallback(driver);            case SHELL:                return new ShellCallback(driver);            case TOUCH:                return new TouchCallback(driver);            case KEY_EVENT:                return new KeyEventCallback(driver);            case SCREENSHOT:                return new ScreenshotCallback(driver);            case TASK_START:                return new TaskStartCallback(driver);            case TASK_CANCEL:                return new TaskCancelCallback(driver);            case JR_TASK_START:                return new JRStartCallback(driver);            case CRAWLER_TASK_START:                return new CrawlerStartCallback(driver);            case INSTALL_APP:                return new InstallAppCallback(driver);            case UNINSTALL_APP:                return new UninstallAppCallback(driver);            case LOGCAT_STOP:                return new LogStopCallback(driver);            case LOGCAT_WAIT:                return new LogStopCallback(driver);            case LOGCAT_START:                return new LogStartCallback(driver);            case COMPONENT_START:                return new ComponentStartCallback(driver);            case SCREEN_WAIT:                return new ScreenWaitCallback(driver);            case SCREEN_START:                return new ScreenStartCallback(driver);            case COMPONENT_STOP:                return new ComponentStopCallback(driver);            case DEVICE_INFO://                return new ControlCallback(client);            case MESSAGE://                return new ControlCallback(client);            case UNRECOGNIZED://                return new ControlCallback(client);            case DEBUG_START:                return new DebugStartCallback(driver);            case DEBUG_STOP:                return new DebugStopCallback(driver);            default:                throw new Exception("Can't find callback for topic: " + topic);        }	}}