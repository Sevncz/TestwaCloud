package com.testwa.distest.client.download;import com.testwa.distest.client.exception.DownloadFailException;import lombok.extern.slf4j.Slf4j;import java.io.FileOutputStream;import java.io.IOException;import java.net.HttpURLConnection;import java.net.URL;import java.nio.channels.Channels;import java.nio.channels.ReadableByteChannel;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;/** * @Program: distest * @Description: 文件下载器 * @Author: wen * @Create: 2018-04-19 11:30 **/@Slf4jpublic class Downloader implements RBCWrapperDelegate {    public Downloader(String fromUrl, String toLocalFile) throws DownloadFailException, IOException {        Path toLocal = Paths.get(toLocalFile);        if(!Files.exists(toLocal.getParent())){            Files.createDirectories(toLocal.getParent());        }else{            log.debug("File MD5 exists!  " + toLocalFile);            if(Files.exists(toLocal)){                log.info("To local file {} exists, return !", toLocalFile);                return;            }        }        ReadableByteChannel rbc = null;        FileOutputStream fos = null;        try {            URL website = new URL(fromUrl);            rbc = new RBCWrapper(Channels.newChannel(website.openStream()), contentLength(website), this);            fos = new FileOutputStream(toLocalFile);            fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);        }catch (Exception e){            log.error("Download file {} error!", fromUrl);            throw new DownloadFailException(e.getMessage());        }finally {            if(fos != null){                fos.close();            }            if(rbc != null){                rbc.close();            }        }    }    public void rbcProgressCallback(RBCWrapper rbc, double progress) {        log.info(String.format("download progress %d bytes received, %.02f%%", rbc.getReadSoFar(), progress));    }    private int contentLength(URL url) {        HttpURLConnection connection;        int contentLength = -1;        try {            HttpURLConnection.setFollowRedirects(false);            connection = (HttpURLConnection) url.openConnection();            connection.setRequestMethod("HEAD");            contentLength = connection.getContentLength();        } catch (Exception e) {        }        return contentLength;    }}