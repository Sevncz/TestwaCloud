package com.testwa.distest.client.component.executor.task;import com.alibaba.fastjson.JSON;import com.testwa.core.cmd.RemoteRunCommand;import com.testwa.distest.client.ApplicationContextUtil;import com.testwa.distest.client.component.appium.manager.CustomAppiumManager;import com.testwa.distest.client.component.appium.pool.CustomAppiumManagerPool;import com.testwa.distest.client.component.executor.worker.AndroidExecutorFactory;import com.testwa.distest.client.component.executor.worker.FunctionalAbstractExecutor;import com.testwa.distest.client.config.CacheProperty;import com.testwa.distest.client.service.GrpcClientService;import lombok.extern.slf4j.Slf4j;@Slf4jpublic class FunctionalTestTask extends AbstractTestTask{    private RemoteRunCommand cmd;    private FunctionalAbstractExecutor executor;    private CustomAppiumManagerPool pool;    private CustomAppiumManager manager;    private TestTaskListener listener;    public FunctionalTestTask(RemoteRunCommand cmd, TestTaskListener listener){        this.cmd = cmd;        this.listener = listener;    }    public void start() {        log.info("[{}] Appium run Functional Test cmd is {}", this.cmd.getDeviceId(), JSON.toJSONString(cmd));        GrpcClientService grpcClientService = (GrpcClientService) ApplicationContextUtil.getBean("grpcClientService");        pool = (CustomAppiumManagerPool) ApplicationContextUtil.getBean("customAppiumManagerPool");        if(pool == null) {            grpcClientService.gameover(cmd.getTaskCode(), cmd.getDeviceId(), "appium 对象线程池不存在");            return;        }        manager = pool.getManager();        if(manager == null) {            String error = "Appium 对象管理器不存在";            log.error("[{}] {}", this.cmd.getDeviceId(), error);            grpcClientService.gameover(cmd.getTaskCode(), cmd.getDeviceId(), this.cmd.getDeviceId() + " " + error);            return;        }        String appiumLogPath = manager.getAppiumlogPath();        if(manager.getAppiumService().isRunning()){            try {                String appiumUrl = manager.getAppiumService().getUrl().toString();                log.info("[{}] Appium url = {}", this.cmd.getDeviceId(), appiumUrl);                AndroidExecutorFactory executorFactory = new AndroidExecutorFactory();                executor = executorFactory.getFunctionalPythonTask(cmd);                executor.init(appiumUrl, cmd, listener);                executor.start();            } catch (Exception e){                log.error("[{}] 任务执行错误", cmd.getDeviceId(), e);                grpcClientService.gameover(cmd.getTaskCode(), cmd.getDeviceId(), e.getMessage());            } finally {                log.info("[{}] 任务执行完成，上传日志。。。", cmd.getDeviceId());                executor.destory();                grpcClientService.appiumLogUpload(cmd.getTaskCode(), cmd.getDeviceId(), appiumLogPath);            }        }else{            log.error("[{}] Appium 启动失败", cmd.getDeviceId());            grpcClientService.gameover(cmd.getTaskCode(), cmd.getDeviceId(), "Appium 启动失败");        }        try {            pool.release(manager);        } catch (Exception e) {            log.warn("Appium release error.... .... ");        }    }    public void terminate() {        log.info("设备 {} 测试任务被停止", cmd.getDeviceId());        if (executor != null) {            executor.stop();        }        if(pool != null){            try {                pool.release(manager);            } catch (Exception e) {            }        }    }}