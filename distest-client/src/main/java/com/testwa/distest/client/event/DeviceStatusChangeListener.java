package com.testwa.distest.client.event;import com.testwa.distest.client.android.JadbDeviceManager;import com.testwa.distest.client.device.manager.DeviceManager;import com.testwa.distest.client.device.pool.DeviceManagerPool;import com.testwa.distest.client.service.DeviceGvice;import com.testwa.distest.client.service.GrpcClientService;import io.rpc.testwa.device.DeviceStatusChangeRequest;import io.rpc.testwa.device.DeviceType;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.ApplicationListener;import org.springframework.scheduling.annotation.Async;import org.springframework.stereotype.Component;@Slf4j@Componentpublic class DeviceStatusChangeListener implements ApplicationListener<DeviceStatusChangeEvent> {    @Autowired    private DeviceGvice deviceGvice;    @Autowired    private DeviceManagerPool deviceManagerPool;    @Async    @Override    public void onApplicationEvent(DeviceStatusChangeEvent event) {        try {            if(event.getJadbDevice() != null){                if(DeviceStatusChangeRequest.LineStatus.ONLINE.equals(event.getLineStatus())) {                    // 注册                    deviceManagerPool.getManager(event.getJadbDevice().getSerial(), DeviceType.ANDROID);                    JadbDeviceManager.jadbDeviceMap.put(event.getJadbDevice().getSerial(), event.getJadbDevice());                    deviceGvice.stateChange(event.getJadbDevice().getSerial(), event.getLineStatus());                }else if(DeviceStatusChangeRequest.LineStatus.OFFLINE.equals(event.getLineStatus()) ||                        DeviceStatusChangeRequest.LineStatus.DISCONNECTED.equals(event.getLineStatus())) {                    DeviceManager deviceManager = deviceManagerPool.getManager(event.getJadbDevice().getSerial(), DeviceType.ANDROID);                    if(deviceManager == null) {                        return;                    }                    log.info("[device offline] deviceIsRealOffline: {}", deviceManager.deviceIsRealOffline());                    if(deviceManager.deviceIsRealOffline()) {                        // 移除                        deviceManagerPool.release(event.getJadbDevice().getSerial());                        JadbDeviceManager.jadbDeviceMap.remove(event.getJadbDevice().getSerial());                        deviceGvice.stateChange(event.getJadbDevice().getSerial(), event.getLineStatus());                    }                }            }        }catch (Exception e) {            log.error("[DeviceStatusChangeListener] Device status change {}", event.toString(), e);        }    }}