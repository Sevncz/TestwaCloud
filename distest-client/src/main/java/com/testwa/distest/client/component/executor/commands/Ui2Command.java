package com.testwa.distest.client.component.executor.commands;import com.alibaba.fastjson.JSONObject;import com.testwa.core.shell.UTF8CommonExecs;import com.testwa.distest.client.android.ADBCommandUtils;import com.testwa.distest.client.component.executor.uiautomator2.Bounds;import com.testwa.distest.client.component.executor.uiautomator2.Client;import com.testwa.distest.client.component.executor.uiautomator2.Response;import com.testwa.distest.client.exception.CommandFailureException;import lombok.Data;import lombok.extern.slf4j.Slf4j;import org.apache.commons.exec.CommandLine;import org.apache.commons.lang3.StringUtils;import java.io.IOException;import java.util.concurrent.TimeUnit;/** * @Program: distest * @Description: * @Author: wen * @Create: 2018-06-08 16:39 **/@Data@Slf4jpublic class Ui2Command {    private String sessionId;    private String baseUrl;    private String statusUrl;    public Ui2Command(int port) {        this.baseUrl = String.format("http://127.0.0.1:%s/wd/hub/session", port);        this.statusUrl = String.format("http://127.0.0.1:%s/wd/hub/status", port);    }    public String createSession() {        JSONObject params = new JSONObject();        params.put("desiredCapabilities", new JSONObject());        try {            Response response = Client.post(this.baseUrl, "", params);            if(response.isSuccessful()) {                this.sessionId = response.getSessionId();                return this.sessionId;            }        } catch (CommandFailureException e) {            log.warn("Create session error {} ...", baseUrl);        }        return null;    }    public boolean getSource() {        // /wd/hub/getSource//        JSONObject params = new JSONObject();//        params.put("strategy", "-android uiautomator");//        params.put("selector", "new UiSelector().text(\"abcdefg\")");//        params.put("context", "");        String path = "/" + this.sessionId + "/source";        try {            Response response = Client.get(this.baseUrl, path);            if(response.isSuccessful()) {                return true;            }else{                String value = response.getValue();                if(StringUtils.isNotBlank(value) && value.trim().contains("exception")) {                    return false;                }            }        } catch (CommandFailureException e) {            log.error("get dump from ui2server error");        }        return false;    }    public boolean status() {        // /wd/hub/status        try {            Response response = Client.get(this.statusUrl, "");            if(response.isSuccessful()) {                return true;            }        } catch (CommandFailureException e) {            log.warn("Uiautomator server 还未启动 {} ", this.statusUrl);        }        return false;    }    /**     *@Description: 例子     * {{base_url}}/wd/hub/session/{{sessionId}}/element   post     * {     * 	"strategy": "-android uiautomator",     * 	"selector": "new UiSelector().text(\"继续安装\")",     * 	"context": ""     * }     *@Param: [selector]     *@Return: String     *@Author: wen     *@Date: 2018/6/8     */    public String findElement(String selector) {        JSONObject params = new JSONObject();        params.put("strategy", "-android uiautomator");        params.put("selector", selector);        params.put("context", "");        String path = "/" + this.sessionId + "/element";        try {            Response response = Client.post(this.baseUrl, path, params);            if(response.isSuccessful()) {                return response.getElementId();            }        } catch (CommandFailureException e) {//            log.error("find element error", e);            log.warn("findElement fail {}, uiautomator maybe launching or crash", selector);        }        return null;    }    public String findElementById(String id) {        JSONObject params = new JSONObject();        params.put("strategy", "id");        params.put("selector", id);        params.put("context", "");        String path = "/" + this.sessionId + "/element";        log.info("Find element {}", id);        try {            Response response = Client.post(this.baseUrl, path, params);            if(response.isSuccessful()) {                return response.getElementId();            }        } catch (CommandFailureException e) {            log.warn("findElementById fail {}, uiautomator maybe crash", id);        }        return null;    }    /**     *@Description: {{base_url}}/wd/hub/session/{{sessionId}}/element/{{elementId}}/click   post     *@Param: [elementId]     *@Return: boolean     *@Author: wen     *@Date: 2018/6/8     */    public boolean click(String elementId) {        if(StringUtils.isBlank(elementId)) {            return false;        }        JSONObject params = new JSONObject();        params.put("element", elementId);        String path = "/" + this.sessionId + "/element/" + elementId + "/click";        try {            Response response = Client.post(this.baseUrl, path, params);            return response.isSuccessful();        } catch (CommandFailureException e) {            log.warn("click fail {}, uiautomator maybe crash", elementId);        }        return false;    }    public boolean click(int x, int y) {        JSONObject params = new JSONObject();        params.put("x", x);        params.put("y", y);        String path = "/" + this.sessionId + "/appium/tap";        try {            Response response = Client.post(this.baseUrl, path, params);            return response.isSuccessful();        } catch (CommandFailureException e) {            log.warn("click fail {} {}, uiautomator maybe crash", x, y);        }        return false;    }    public boolean inputText(String elementId, String text) {        JSONObject params = new JSONObject();        params.put("elementId", elementId);        params.put("text", text);        params.put("replace", false);        String path = "/" + this.sessionId + "/element/" + elementId + "/value";        try {            Response response = Client.post(this.baseUrl, path, params);            return response.isSuccessful();        } catch (CommandFailureException e) {            log.warn("inputText fail {} {}, uiautomator maybe crash", elementId, text);        }        return false;    }    /**     *@Description:   {{base_url}}/wd/hub/session/{{sessionId}}/element/{{elementId}}/rect     * {     *     "sessionId": "c172e964-7814-4776-8ce6-e976d7a5f0d6",     *     "getSource": 0,     *     "value": {     *         "x": 0,     *         "y": 1661,     *         "width": 1080,     *         "height": 355     *     }     * }     *@Param: [elementId]     *@Return: boolean     *@Author: wen     *@Date: 2018/6/11     */    public Bounds rect(String elementId) {        String path = "/" + this.sessionId + "/element/" + elementId + "/rect";        try {            Response response = Client.get(this.baseUrl, path);            log.warn("Element value, response {}", response.getValue().toString());            if(response.isSuccessful()) {                JSONObject jsonObject = response.getValue();                Bounds bounds = new Bounds();                bounds.setX(jsonObject.getInteger("x"));                bounds.setY(jsonObject.getInteger("y"));                bounds.setWidth(jsonObject.getInteger("width"));                bounds.setHight(jsonObject.getInteger("height"));                return bounds;            }        } catch (CommandFailureException e) {            log.warn("Element value, element {} not found", elementId);        }        return null;    }    public static void main(String[] args) {        String deviceId = "b110702";//        String resourcesPath = Config.getString("distest.agent.resources");//        Path ui2 = Paths.get(resourcesPath, Constant.getAppiumUI2());////        if(!ADBCommandUtils.isInstalledApp(deviceId, ui2.toString())){//            ADBCommandUtils.installApp(deviceId, ui2.toString());//        }//        Path ui2Debug = Paths.get(resourcesPath, Constant.getAppiumUI2Debug());//        if(!ADBCommandUtils.isInstalledApp(deviceId, ui2Debug.toString())){//            ADBCommandUtils.installApp(deviceId, ui2Debug.toString());//        }        // 运行appium automator2 server        // adb shell am instrument -w io.appium.uiautomator2.server.test/android.support.test.runner.AndroidJUnitRunner        CommandLine commandLine = ADBCommandUtils.getADBCommandLine(deviceId);        commandLine.addArgument("shell");        commandLine.addArgument("am");        commandLine.addArgument("instrument");        commandLine.addArgument("-w");        commandLine.addArgument("io.appium.uiautomator2.server.test/android.support.test.runner.AndroidJUnitRunner");        UTF8CommonExecs execs = new UTF8CommonExecs(commandLine);        try {            execs.asyncexec();            try {                TimeUnit.SECONDS.sleep(3);            } catch (InterruptedException e) {                e.printStackTrace();            }            String out = execs.getOutput();            System.out.println(out);        } catch (IOException e) {            e.printStackTrace();        }        ADBCommandUtils.forwardTcp(deviceId, 6790, 6790);        Ui2Command cmd = new Ui2Command(6790);        String elementId = null;        while(StringUtils.isBlank(elementId)) {            String sessionId = cmd.createSession();            System.out.println(sessionId);            elementId = cmd.findElement("new UiSelector().text(\"继续安装\")");            try {                TimeUnit.SECONDS.sleep(1);            } catch (InterruptedException e) {            }        }        System.out.println(elementId);        cmd.click(elementId);        ADBCommandUtils.removeForward(deviceId, 6790);    }}