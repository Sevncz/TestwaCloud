package com.testwa.distest.client.component.executor.factory;import com.testwa.core.cmd.RemoteRunCommand;import com.testwa.core.shell.UTF8CommonExecs;import com.testwa.distest.client.component.ADBCommandUtils;import com.testwa.distest.client.component.Constant;import com.testwa.distest.client.component.executor.ExecutorLog;import com.testwa.distest.client.exception.*;import io.rpc.testwa.task.ExecutorAction;import org.apache.commons.exec.CommandLine;import java.io.IOException;import java.nio.file.Path;import java.nio.file.Paths;import java.util.concurrent.Executors;import java.util.concurrent.ScheduledExecutorService;import java.util.concurrent.TimeUnit;/** * @Program: distest * @Description: * @Author: wen * @Create: 2018-05-15 14:28 **/public abstract class AbstractExecutor {    protected UTF8CommonExecs logexecs;    protected final Path logcatTempFile = Paths.get(Constant.localLogcatPath, Thread.currentThread().getId() + ".txt");    protected final ScheduledExecutorService scheduledExecutor = Executors.newScheduledThreadPool(2);    /**     * 初始化     */    public abstract void init(RemoteRunCommand cmd);    /**     * 下载app     */    public abstract void downloadApp() throws DownloadFailException, IOException;    /**     * 任务启动入口     */    public abstract void start();    /**     * 安装APP     */    public abstract void installApp() throws InstallAppException;    /**     * 启动APP     */    public abstract void launch() throws LaunchAppException;    /**     * 操作设备     */    public abstract void run() throws ScriptExecuteException;    /**     * 卸载APP     */    public abstract void uninstallApp() throws UninstallAppException;    /**     * 执行完成     */    public abstract void complete();    /**     * 停止任务     */    public abstract void stop();    /**     *@Description: 启动logcat，并记录     *@Param: []     *@Return: void     *@Author: wen     *@Date: 2018/5/14     */    protected void logger(String deviceId) {        CommandLine commandLine = ADBCommandUtils.getADBCommandLine(deviceId);        commandLine.addArgument("shell");        commandLine.addArgument("logcat");        commandLine.addArgument("-v");        commandLine.addArgument("threadtime");        commandLine.addArgument("*:E");        logexecs = new UTF8CommonExecs(commandLine);        // 设置最大执行时间，10分钟        logexecs.setTimeout(10*60*1000L);        try {            loggerClear(deviceId);            logexecs.asyncexec();            // 启动任务            int initialDelay = 0;            int period = 10;            scheduledExecutor.scheduleWithFixedDelay(saveLogcatToFileTask, initialDelay, period, TimeUnit.SECONDS);        } catch (IOException e) {            e.printStackTrace();        }    }    private Runnable saveLogcatToFileTask = () -> logexecs.outputToFile(logcatTempFile);    private void loggerClear(String deviceId) throws IOException {        CommandLine commandLine = ADBCommandUtils.getADBCommandLine(deviceId);        commandLine.addArgument("shell");        commandLine.addArgument("logcat");        commandLine.addArgument("-c");        UTF8CommonExecs clexec = new UTF8CommonExecs(commandLine);        clexec.exec();    }    protected void loggerStop() {        if(this.logexecs != null){            this.logexecs.destroy();        }        this.scheduledExecutor.shutdown();    }}