package com.testwa.distest.client.component.executor.factory;import com.github.cosysoft.device.android.AndroidDevice;import com.github.cosysoft.device.android.impl.AndroidDeviceStore;import com.github.cosysoft.device.android.impl.DefaultAndroidApp;import com.testwa.core.cmd.AppInfo;import com.testwa.core.cmd.KeyCode;import com.testwa.core.cmd.RemoteRunCommand;import com.testwa.core.shell.UTF8CommonExecs;import com.testwa.distest.client.ApplicationContextUtil;import com.testwa.distest.client.component.ADBCommandUtils;import com.testwa.distest.client.component.Constant;import com.testwa.distest.client.component.FlowResult;import com.testwa.distest.client.component.StepResult;import com.testwa.distest.client.component.appium.utils.Config;import com.testwa.distest.client.component.executor.commands.Ui2Command;import com.testwa.distest.client.component.executor.uiautomator2.Bounds;import com.testwa.distest.client.download.Downloader;import com.testwa.distest.client.exception.*;import com.testwa.distest.client.model.UserInfo;import com.testwa.distest.client.service.GrpcClientService;import io.rpc.testwa.task.StepRequest;import lombok.extern.slf4j.Slf4j;import org.apache.commons.exec.CommandLine;import org.apache.commons.lang3.StringUtils;import java.io.File;import java.io.IOException;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.util.HashMap;import java.util.Map;import java.util.concurrent.*;/** * @Program: distest * @Description: * @Author: wen * @Create: 2018-05-15 14:28 **/@Slf4jpublic abstract class AbstractExecutor {    public static final String TESTWA_PWD = "testwa123";    protected final Path logcatTempFile = Paths.get(Constant.localLogcatPath, Thread.currentThread().getId() + ".txt");    protected UTF8CommonExecs logexecs;    protected UTF8CommonExecs ui2ServerExec;    protected int uiServerPort;    protected GrpcClientService grpcClientService;    protected RemoteRunCommand cmd;    protected String distestApiWeb;    protected AppInfo appInfo;    protected String deviceId;    protected Downloader downloader;    protected Integer cpukel;    protected AndroidDevice device;    protected boolean install;    protected String appLocalPath;    protected DefaultAndroidApp androidApp;    private FlowResult startFlow;    private Integer lastFps;    protected final ScheduledExecutorService scheduledExecutor = Executors.newScheduledThreadPool(15);    private Ui2Command ui2Command;    private ScheduledFuture uiCheckFuture;    private ScheduledFuture performFuture;//    private ScheduledFuture installCheckFuture;    private ScheduledFuture runningAlterFuture;//    private List<ScheduledFuture> installFutures = new ArrayList<>();    private Map<String, ScheduledFuture> installFutures = new HashMap<>();    /**     * 初始化     */    public void init(RemoteRunCommand cmd) {        this.grpcClientService = (GrpcClientService) ApplicationContextUtil.getBean("grpcClientService");        this.cmd = cmd;        this.distestApiWeb = Config.getString("distest.api.web");        this.appInfo = cmd.getAppInfo();        this.deviceId = cmd.getDeviceId();        this.downloader = new Downloader();        this.device = AndroidDeviceStore.getInstance().getDeviceBySerial(deviceId);        this.install = cmd.getInstall();        this.cpukel = ADBCommandUtils.getCpuKel(deviceId);        try {            log.info("logcat 临时文件: {}", logcatTempFile.toString());            Files.deleteIfExists(logcatTempFile);            Files.createFile(logcatTempFile);        } catch (IOException e) {        }    };    /**     * 下载app     */    public void downloadApp(){        String appUrl = String.format("http://%s/app/%s", distestApiWeb, appInfo.getPath());        this.appLocalPath = Constant.localAppPath + File.separator + appInfo.getMd5() + File.separator + appInfo.getFileAliasName();        // 检查是否有和该app md5一致的        StepResult result = new StepResult(StepRequest.StepAction.downloadApp);        Long start = System.currentTimeMillis();        try {            downloader.start(appUrl, appLocalPath);        } catch (DownloadFailException | IOException e) {            result.setStatus(StepRequest.StepStatus.FAIL);            result.setErrormsg(e.getMessage());        }finally {            Long end = System.currentTimeMillis();            result.setTotalTime(end - start);        }        sendStepRequest(result);        androidApp = new DefaultAndroidApp(new File(appLocalPath));    }    /**     * 任务启动入口     */    public abstract void start();    /**     * 安装APP     */    public void installApp() throws InstallAppException {        ADBCommandUtils.inputCode(deviceId, KeyCode.KEYCODE_HOME, 2000L);        if(ADBCommandUtils.isInstalledBasepackage(deviceId, androidApp.getBasePackage())){            ADBCommandUtils.uninstallApp(deviceId, androidApp.getBasePackage());        }        // 最多等待一分钟        waitAutoServerStart(60);        if(ui2Command.status()){            startInstallCheck();        }        StepResult result = ADBCommandUtils.installApp(deviceId, appLocalPath);        stopInstallCheck();        sendStepRequest(result);        if(StepRequest.StepStatus.FAIL.equals(result.getStatus())){            throw new InstallAppException(result.getErrormsg());        }    }    /**     * 启动APP     */    public void launch() throws LaunchAppException {        startProcessRunningAlter();        StepResult result = ADBCommandUtils.launcherApp(deviceId, appLocalPath);        sendStepRequest(result);        if(StepRequest.StepStatus.FAIL.equals(result.getStatus())){            throw new LaunchAppException(result.getErrormsg());        }    };    /**     * 操作设备     */    public abstract void run() throws ScriptExecuteException;    /**     * 卸载APP     */    public void uninstallApp() throws UninstallAppException {        StepResult result = ADBCommandUtils.uninstallApp(deviceId, androidApp.getBasePackage());        sendStepRequest(result);        if(StepRequest.StepStatus.FAIL.equals(result.getStatus())){            throw new UninstallAppException(result.getErrormsg());        }    };    /**     * 执行完成     */    public void complete() {        this.grpcClientService.logcatFileUpload(logcatTempFile, cmd.getTaskCode(), deviceId);        StepRequest request = StepRequest.newBuilder()                .setToken(UserInfo.token)                .setTaskCode(cmd.getTaskCode())                .setDeviceId(deviceId)                .setAction(StepRequest.StepAction.complete)                .setStatus(StepRequest.StepStatus.SUCCESS)                .build();        grpcClientService.saveStep(request);        log.info("{} 完成 {}", deviceId, cmd.getTaskCode());    };    /**     * 停止任务     */    public abstract void stop();    void startRecodPerformance() {        int initialDelay = 0;        int period = 1;        // 性能抓取任务参数初始化        performFuture = scheduledExecutor.scheduleWithFixedDelay(getPerformanceTask, initialDelay, period, TimeUnit.SECONDS);    }    void stopRecodPerformance() {        performFuture.cancel(true);    }    private Runnable getPerformanceTask = new Runnable() {        @Override        public void run() {            try {                String pid = ADBCommandUtils.getPid(deviceId, androidApp.getBasePackage());                if(startFlow == null){                    startFlow = ADBCommandUtils.getFlow(deviceId, pid);                }                Double cpu = null;                if(cpukel == null) {                    log.error("设备 {} 获取cpu指标错误，cpu数量为空", deviceId);                    cpukel = ADBCommandUtils.getCpuKel(deviceId);                }                if(cpukel != null) {                    try {                        cpu = ADBCommandUtils.cpuRate(deviceId, pid, cpukel);                    } catch (Exception e) {                    }finally {                        if(cpu == null) {                            cpu = 0.0;                        }                    }                }                // 获得累计流量                FlowResult[] flows = ADBCommandUtils.flow(deviceId, pid, startFlow); // kb                startFlow = flows[0];                FlowResult resultFlow = flows[1];                Integer mem = ADBCommandUtils.ram(deviceId, androidApp.getBasePackage()); // kb                if(mem == null) {                    mem = 0;                }                Integer bat = ADBCommandUtils.battery(deviceId);                if(bat == null) {                    bat = 0;                }                Integer fps = ADBCommandUtils.fps(deviceId, androidApp.getBasePackage());                if(fps == null){                    if (lastFps != null){                        fps = lastFps;                    }else{                        fps = 0;                    }                }else{                    lastFps = fps;                }                log.debug("ram: {}, bat: {}, cpu: {}, fps: {} flow: {}", mem, bat, cpu, fps, resultFlow);                grpcClientService.savePreformance(cpu, mem, bat, fps, resultFlow, cmd.getTaskCode(), deviceId);            } catch (Exception e) {                log.error("设备 {} 获取指标异常", deviceId, e);            }        }    };    /**     *@Description: 启动logcat，并记录     *@Param: []     *@Return: void     *@Author: wen     *@Date: 2018/5/14     */    void logger() {        CommandLine commandLine = ADBCommandUtils.getADBCommandLine(deviceId);        commandLine.addArgument("shell");        commandLine.addArgument("logcat");        commandLine.addArgument("-v");        commandLine.addArgument("threadtime");        commandLine.addArgument("*:E");        logexecs = new UTF8CommonExecs(commandLine);        // 设置最大执行时间，10分钟        logexecs.setTimeout(10*60*1000L);        try {            loggerClear(deviceId);            logexecs.asyncexec();            // 启动任务            int initialDelay = 0;            int period = 10;            scheduledExecutor.scheduleWithFixedDelay(saveLogcatToFileTask, initialDelay, period, TimeUnit.SECONDS);        } catch (IOException e) {            e.printStackTrace();        }    }    private Runnable saveLogcatToFileTask = () -> logexecs.outputToFile(logcatTempFile);    private void loggerClear(String deviceId) throws IOException {        CommandLine commandLine = ADBCommandUtils.getADBCommandLine(deviceId);        commandLine.addArgument("shell");        commandLine.addArgument("logcat");        commandLine.addArgument("-c");        UTF8CommonExecs clexec = new UTF8CommonExecs(commandLine);        clexec.exec();    }    void loggerStop() {        if(this.logexecs != null){            this.logexecs.destroy();        }        this.scheduledExecutor.shutdown();    }    /**     *@Description: 启动一个uiautomator2     *@Param:     *@Return:     *@Author: wen     *@Date: 2018/6/6     */    void uiautomator2ServerStart() {        String resourcesPath = Config.getString("distest.agent.resources");        Path ui2 = Paths.get(resourcesPath, Constant.getAppiumUI2());        if(!ADBCommandUtils.isInstalledApp(deviceId, ui2.toString())){            ADBCommandUtils.installApp(deviceId, ui2.toString());        }        Path ui2Debug = Paths.get(resourcesPath, Constant.getAppiumUI2Debug());        if(!ADBCommandUtils.isInstalledApp(deviceId, ui2Debug.toString())){            ADBCommandUtils.installApp(deviceId, ui2Debug.toString());        }        // 运行appium automator2 server        // adb shell am instrument -w io.appium.uiautomator2.server.test/android.support.test.runner.AndroidJUnitRunner        CommandLine commandLine = ADBCommandUtils.getADBCommandLine(deviceId);        commandLine.addArgument("shell");        commandLine.addArgument("am");        commandLine.addArgument("instrument");        commandLine.addArgument("-w");        commandLine.addArgument("io.appium.uiautomator2.server.test/android.support.test.runner.AndroidJUnitRunner");        this.ui2ServerExec = new UTF8CommonExecs(commandLine);        this.uiServerPort = ADBCommandUtils.forwardTcp(deviceId, 6790);        this.ui2Command = new Ui2Command(uiServerPort);        startUi2Server();        uiCheckFuture = scheduledExecutor.scheduleWithFixedDelay(ui2serverDaemon, 3, 3, TimeUnit.SECONDS);    }    private void startUi2Server() {        try {            ui2ServerExec.asyncexec();        } catch (IOException e) {            e.printStackTrace();        }    }    private Runnable ui2serverDaemon = () -> {        try {            String output = ui2ServerExec.getOutput();            String ui2output = "io.appium.uiautomator2.server.test.AppiumUiAutomator2Server:";            if(StringUtils.isNotBlank(output) && output.trim().startsWith(ui2output)) {                if(StringUtils.isNotBlank(this.ui2Command.getSessionId()) &&  !this.ui2Command.getSource()) {                    log.error(output);                    startUi2Server();                }            }        } catch (Exception e) {            e.printStackTrace();        }    };    void waitAutoServerStart(int time) {        while(!ui2Command.status() && time > 0) {            sleep(1);            time--;        }    }    void uiautomator2ServerStop() {        if(this.ui2ServerExec != null){            log.warn("Uiautomator2 server stop!");            this.uiCheckFuture.cancel(true);            stopProcessRunningAlter();            sleep(5);            ui2ServerExec.destroy();            ADBCommandUtils.removeForward(deviceId, uiServerPort);        }    }    void startInstallCheck() {        if(device.getName().toLowerCase().startsWith("xiaomi")){            processXIAOMI();        }        if(device.getName().toLowerCase().startsWith("oppo")){            processOPPO();        }        if(device.getName().toLowerCase().startsWith("vivo")){            processVIVO();        }    }    void stopInstallCheck() {        installFutures.values().forEach(f -> {            if(!f.isCancelled()) {                f.cancel(true);            }        });    }    void processXIAOMI() {        int initialDelay = 2;        int period = 1;        ScheduledFuture future = scheduledExecutor.scheduleWithFixedDelay(this::clickContinueInstall, initialDelay, period, TimeUnit.SECONDS);        installFutures.put("clickContinueInstall", future);    }    void processOPPO() {        int period = 2;        ScheduledFuture inputFuture = scheduledExecutor.scheduleWithFixedDelay(this::oppoPwd, 2, period, TimeUnit.SECONDS);        installFutures.put("oppoPwd", inputFuture);        ScheduledFuture clickContinueInstallFuture = scheduledExecutor.scheduleWithFixedDelay(this::clickContinueInstall, 3, period, TimeUnit.SECONDS);        installFutures.put("clickContinueInstall", clickContinueInstallFuture);        ScheduledFuture clickContinueInstallOldFuture = scheduledExecutor.scheduleWithFixedDelay(this::clickContinueInstallOld, 3, period, TimeUnit.SECONDS);        installFutures.put("clickContinueInstallOld", clickContinueInstallOldFuture);        ScheduledFuture clickInstallXYFuture = scheduledExecutor.scheduleWithFixedDelay(this::clickInstallXY, 4, period, TimeUnit.SECONDS);        installFutures.put("clickInstallXY", clickInstallXYFuture);    }    void oppoPwd() {        if(inputPwd()) {            clickInstall();        }    }    protected void processVIVO() {        int period = 2;        ScheduledFuture inputFuture = scheduledExecutor.scheduleWithFixedDelay(this::vivoPwd, 2, period, TimeUnit.SECONDS);        installFutures.put("vivoPwd", inputFuture);        ScheduledFuture clickContinueInstallFuture = scheduledExecutor.scheduleWithFixedDelay(this::clickContinueInstall, 3, period, TimeUnit.SECONDS);        installFutures.put("clickContinueInstall", clickContinueInstallFuture);        ScheduledFuture clickContinueInstallOldFuture = scheduledExecutor.scheduleWithFixedDelay(this::clickContinueInstallOld, 3, period, TimeUnit.SECONDS);        installFutures.put("clickContinueInstallOld", clickContinueInstallOldFuture);        ScheduledFuture clickInstallFuture = scheduledExecutor.scheduleWithFixedDelay(this::clickInstall, 4, period, TimeUnit.SECONDS);        installFutures.put("clickInstall", clickInstallFuture);    }    void vivoPwd() {        if(inputPwd()) {            clickOK();        }    }    private boolean inputPwd() {        try {            ui2Command.createSession();            String elementId = ui2Command.findElement("new UiSelector().className(\"android.widget.EditText\")");            if(StringUtils.isNotBlank(elementId)) {                if(ui2Command.inputText(elementId, TESTWA_PWD)) {    //                ScheduledFuture future = installFutures.get("inputPwd");    //                future.cancel(true);                    return true;                }            }        } catch (Exception e) {            e.printStackTrace();        }        return false;    }    private boolean clickInstall() {        try {            String elementId = ui2Command.findElement("new UiSelector().text(\"安装\")");            if(StringUtils.isNotBlank(elementId)) {                if(ui2Command.click(elementId)) {                    // 安装按钮在输入密码之前是灰色，点击后无响应    //                ScheduledFuture future = installFutures.get("clickInstall");    //                future.cancel(true);                    return true;                }            }        } catch (Exception e) {            e.printStackTrace();        }        return false;    }    private boolean clickOK() {        try {            ui2Command.createSession();            String elementId = ui2Command.findElement("new UiSelector().text(\"确定\")");            if(StringUtils.isNotBlank(elementId)) {                if(ui2Command.click(elementId)) {    //                ScheduledFuture future = installFutures.get("clickOK");    //                future.cancel(true);                    return true;                }            }        } catch (Exception e) {            e.printStackTrace();        }        return false;    }    private boolean clickContinueInstall() {        try {            ui2Command.createSession();            String elementId = ui2Command.findElement("new UiSelector().text(\"继续安装\")");            if(StringUtils.isNotBlank(elementId)) {                if(ui2Command.click(elementId)) {    //                ScheduledFuture future = installFutures.get("clickContinueInstall");    //                future.cancel(true);                    return true;                }            }        } catch (Exception e) {            e.printStackTrace();        }        return false;    }    /**     *@Description: oppo com.android.packageinstaller:id/btn_continue_install_old     *@Param: []     *@Return: boolean     *@Author: wen     *@Date: 2018/6/11     */    private boolean clickContinueInstallOld() {        try {            ui2Command.createSession();            String elementId = ui2Command.findElement("new UiSelector().text(\"继续安装旧版本\")");            if(StringUtils.isNotBlank(elementId)) {                if(ui2Command.click(elementId)) {    //                ScheduledFuture future = installFutures.get("clickContinueInstallOld");    //                future.cancel(true);                    return true;                }            }        } catch (Exception e) {            e.printStackTrace();        }        return false;    }    private boolean clickInstallXY() {        try {            ui2Command.createSession();            String elementId = ui2Command.findElement("new UiSelector().text(\"应用权限\")");            if(StringUtils.isNotBlank(elementId)) {                log.warn("点击'安装'按钮!");                String bottomButtonId = ui2Command.findElementById("com.android.packageinstaller:id/bottom_button_layout");                if(StringUtils.isNotBlank(bottomButtonId)) {                    Bounds bounds = ui2Command.rect(bottomButtonId);                    if(bounds != null) {                        int y = bounds.getY();                        int x = bounds.getX();                        int h = bounds.getHight();                        int w = bounds.getWidth();                        if(ui2Command.click((w + x)/2, y+(h/3))) {                            return true;                        }                    }                }            }        } catch (Exception e) {            e.printStackTrace();        }        return false;    }    void startProcessRunningAlter() {        int initialDelay = 500;        int period = 300;        log.warn("{} 开始检查启动页面弹框检测", deviceId);        runningAlterFuture = scheduledExecutor.scheduleWithFixedDelay(this::processRunningAlter, initialDelay, period, TimeUnit.MILLISECONDS);    }    void stopProcessRunningAlter() {        log.warn("{} 启动页面弹框检测 退出... ... ...", deviceId);        runningAlterFuture.cancel(true);    }    private void processRunningAlter() {        clickAllowBtn();        clickAlwaysAllowBtn();    }    private void clickAllowBtn() {        try {            ui2Command.createSession();            String elementId = ui2Command.findElement("new UiSelector().text(\"允许\")");            if(StringUtils.isNotBlank(elementId)) {                ui2Command.click(elementId);            }        } catch (Exception e) {            e.printStackTrace();        }    }    private void clickAlwaysAllowBtn() {        try {            ui2Command.createSession();            String elementId = ui2Command.findElement("new UiSelector().text(\"始终允许\")");            if(StringUtils.isNotBlank(elementId)) {                ui2Command.click(elementId);            }        } catch (Exception e) {            e.printStackTrace();        }    }    void sleep(int second) {        try {            TimeUnit.SECONDS.sleep(second);        } catch (InterruptedException e) {        }    }    void sendStepRequest(StepResult result) {        StepRequest request = StepRequest.newBuilder()                .setToken(UserInfo.token)                .setTaskCode(cmd.getTaskCode())                .setDeviceId(deviceId)                .setAction(result.getAction())                .setStatus(result.getStatus())                .setRuntime(result.getTotalTime())                .setErrormsg(result.getErrormsg())                .setTimestamp(System.currentTimeMillis())                .build();        grpcClientService.saveStep(request);    }}