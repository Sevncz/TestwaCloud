package com.testwa.distest.client.component.stfagent;import com.testwa.distest.client.android.ADBCommandUtils;import com.testwa.distest.client.android.ADBTools;import com.testwa.distest.client.component.port.ApkPortProvider;import com.testwa.distest.client.util.CommandLineExecutor;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.StringUtils;import org.zeroturnaround.exec.StartedProcess;import java.io.*;import java.util.concurrent.TimeUnit;@Slf4jpublic class StfAgentServer {    private static final String TAG = "Sursoft ServiceStfInstall ";    private static final String cmdStartService = "am startservice --user 0 -a jp.co.cyberagent.stf.ACTION_START -n jp.co.cyberagent.stf/.Service";    private static final String cmdStartAgent = "app_process /system/bin jp.co.cyberagent.stf.Agent";    private static final String pgk = "jp.co.cyberagent.stf";    private static final String main = "jp.co.cyberagent.stf.Agent";    private static final String apkName = "STFService.apk";    private static final String action = "jp.co.cyberagent.stf.ACTION_START";    private static final String componet = "jp.co.cyberagent.stf/.Service";    private static final String installPath = "/data/local/tmp/";    private static final String PATH_SERVICE_APK = "STFService" + File.separator + "STFService.apk";    private static final String AB_service_NAME = "stfservice";    private static final String AB_agent_NAME = "stfagent";    private String deviceId;    private Integer port;    private Integer agentPort;    private String resourcePath;    private StartedProcess mainProcess;    public StfAgentServer(String deviceId, String resourcePath) {        this.resourcePath = resourcePath;        this.deviceId = deviceId;    }    /**     * 是否运行     * @return true 已运行 false 未运行     */    public boolean isRunning() {        if(mainProcess != null) {            return this.mainProcess.getProcess().isAlive();        }        return false;    }    public void close() {        release();    }    /**     * 重启     */    public synchronized void restart() {        close();        try {            TimeUnit.SECONDS.sleep(1);        } catch (InterruptedException e) {        }        start();    }    private void release() {        if(this.mainProcess != null) {            CommandLineExecutor.processQuit(mainProcess);        }        if(this.port != null) {            ADBTools.forwardRemove(deviceId, this.port);            ADBTools.forwardRemove(deviceId, this.agentPort);            ApkPortProvider.pushPort(this.port);            ApkPortProvider.pushPort(this.agentPort);        }    }    public synchronized void start() {        installService();        this.port = ApkPortProvider.pullPort();        this.agentPort = ApkPortProvider.pullPort();        try {            ADBTools.forward(deviceId, port, AB_service_NAME);            ADBTools.forward(deviceId, agentPort, AB_agent_NAME);            String command = getCommand() + " && " + cmdStartAgent;            mainProcess = ADBTools.asyncCommandShell(deviceId, command);        } catch (Exception e) {            throw new IllegalStateException("STFservice服务启动失败", e);        }    }    private String getCommand() throws StfServiceInstallException {        String result = ADBTools.commandShell(deviceId, "pm", "path", pgk);        if(StringUtils.isBlank(result)) {            throw new StfServiceInstallException("stf service未安装");        }        String apkpath = result.replace("package:", "").trim();        return String.format("export CLASSPATH=\"%s\"", apkpath);    }    private void installService() {        String apkFile = this.resourcePath + File.separator + PATH_SERVICE_APK;        if(!ADBCommandUtils.isInstalledApp(this.deviceId, apkFile)) {            ADBCommandUtils.installApp(this.deviceId, apkFile);        }    }    public int getPort() {        return this.port;    }    public int getAgentPort() {        return this.agentPort;    }}