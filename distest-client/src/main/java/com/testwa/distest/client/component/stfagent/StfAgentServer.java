package com.testwa.distest.client.component.stfagent;import com.android.ddmlib.*;import com.testwa.distest.client.android.ADBCommandUtils;import com.testwa.distest.client.android.AndroidHelper;import com.testwa.distest.client.component.appium.utils.Config;import com.testwa.distest.client.component.port.ApkPortProvider;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.StringUtils;import java.io.*;import java.util.concurrent.TimeUnit;import java.util.concurrent.atomic.AtomicBoolean;@Slf4jpublic class StfAgentServer extends Thread implements Closeable {    private static final String TAG = "Sursoft ServiceStfInstall ";    private static final String cmdStartService = "am startservice --user 0 -a jp.co.cyberagent.stf.ACTION_START -n jp.co.cyberagent.stf/.Service";    private static final String cmdStartAgent = "app_process /system/bin jp.co.cyberagent.stf.Agent";    private static final String pgk = "jp.co.cyberagent.stf";    private static final String main = "jp.co.cyberagent.stf.Agent";    private static final String apkName = "STFService.apk";    private static final String action = "jp.co.cyberagent.stf.ACTION_START";    private static final String componet = "jp.co.cyberagent.stf/.Service";    private static final String installPath = "/data/local/tmp/";    private static final String PATH_SERVICE_APK = "STFService" + File.separator + "STFService.apk";    private static final String AB_service_NAME = "stfservice";    private static final String AB_agent_NAME = "stfagent";    private IDevice device;    private Integer port;    private Integer agentPort;    private String resourcePath;    /** 是否运行 */    private AtomicBoolean isRunning = new AtomicBoolean(false);    /** 是否启动完成 */    private AtomicBoolean isReady = new AtomicBoolean(false);    /** 是否重启 */    private AtomicBoolean restart = new AtomicBoolean(false);    public StfAgentServer(String deviceId) {        super("stf-agent-server");        this.resourcePath = Config.getString("distest.agent.resources");        this.device = AndroidHelper.getInstance().getAndroidDevice(deviceId).getDevice();    }    /**     * 是否运行     * @return true 已运行 false 未运行     */    public boolean isRunning() {        return this.isRunning.get();    }    public boolean isReady() {        return this.isReady.get();    }    @Override    public void close() {        this.isRunning.set(false);        this.isReady.set(false);        this.restart.set(false);        this.interrupt();    }    /**     * 重启     */    public synchronized void restart() {        this.isReady.set(false);        this.restart.set(true);    }    @Override    public synchronized void start() {        if (this.isRunning.get()) {            throw new IllegalStateException("stf-service 服务端已运行");        } else {            this.isRunning.set(true);        }        installService();        this.port = ApkPortProvider.pullPort();        this.agentPort = ApkPortProvider.pullPort();        try {            device.createForward(port, AB_service_NAME, IDevice.DeviceUnixSocketNamespace.ABSTRACT);            device.createForward(agentPort, AB_agent_NAME, IDevice.DeviceUnixSocketNamespace.ABSTRACT);        } catch (Exception e) {            throw new IllegalStateException("STFservice服务启动失败");        }        super.start();    }    @Override    public void run() {        while (this.isRunning.get()) {            try {                CollectingOutputReceiver output = new CollectingOutputReceiver();                // run stf-agent server                log.info("拉起 stf-service 服务 {} ", device.getName());                device.executeShellCommand(cmdStartService, output);                log.info("stf-service {} output = {}", device.getName(), output.getOutput());                String command = getCommand() + " && " + cmdStartAgent;                log.info("拉起 stf-service 服务 shellCommand: {}", command);                device.executeShellCommand(command, new IShellOutputReceiver() {                    @Override                    public void addOutput(byte[] bytes, int i, int i1) {                        String ret = new String(bytes, i, i1);                        String[] split = ret.split("\n");                        for (String line : split) {                            if (StringUtils.isNotEmpty(line)) {                                if(line.contains("Listening on @stfagent")) {                                    if(!isReady.get()){                                        isReady.set(true);                                    }                                }                                log.info("----stfservice----{}", line.trim());                            }                        }                    }                    @Override                    public void flush() {                    }                    @Override                    public boolean isCancelled() {                        return false;                    }                }, Integer.MAX_VALUE, TimeUnit.DAYS);                log.info("------stf-service {}", output.getOutput());            } catch (Exception e) {                log.warn("{} stf-service 服务运行异常, {}", device.getName(), e.getMessage());            }        }        try {            device.removeForward(port, AB_service_NAME, IDevice.DeviceUnixSocketNamespace.ABSTRACT);        } catch (Exception e) {            log.error("移除端口转发失败. port: {}", e, port);        }        this.isReady.set(false);        this.isRunning.set(false);        if(this.port != null) {            ApkPortProvider.pushPort(this.port);        }        log.info("stf-service 服务已关闭");    }    private String getCommand() throws StfServiceInstallException {        CollectingOutputReceiver output = new CollectingOutputReceiver();        try {            device.executeShellCommand("pm path " + pgk, output);        } catch (TimeoutException e) {            e.printStackTrace();        } catch (AdbCommandRejectedException e) {            e.printStackTrace();        } catch (ShellCommandUnresponsiveException e) {            e.printStackTrace();        } catch (IOException e) {            e.printStackTrace();        }        if(StringUtils.isBlank(output.getOutput())) {            throw new StfServiceInstallException("stf service未安装");        }        String apkpath = output.getOutput().replace("package:", "").trim();        return String.format("export CLASSPATH=\"%s\"", apkpath);    }    private void installService() {        String apkFile = this.resourcePath + File.separator + PATH_SERVICE_APK;        if(!ADBCommandUtils.isInstalledApp(device.getSerialNumber(), apkFile)) {            ADBCommandUtils.installApp(device.getSerialNumber(), apkFile);        }    }    public int getPort() {        return this.port;    }    public int getAgentPort() {        return this.agentPort;    }}