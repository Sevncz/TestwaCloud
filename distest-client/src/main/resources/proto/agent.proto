syntax = "proto2";

//protoc --java_out=../../java/ agent.proto
option java_package = "com.testwa.distest.client.rpc.proto";

enum MessageType {
  CopyMessageType                = 33;
  DeviceIntroductionMessageType  = 74;
  DeviceAbsentMessageType        = 1;
  DeviceIdentityMessageType      = 2;
  DeviceLogcatEntryMessageType   = 3;
  DeviceLogMessageType           = 4;
  DeviceReadyMessageType         = 5;
  DevicePresentMessageType       = 6;
  DevicePropertiesMessageType    = 7;
  DeviceRegisteredMessageType    = 8;
  DeviceStatusMessageType        = 9;
  GroupMessageType               = 10;
  InstallMessageType             = 30;
  PhysicalIdentifyMessageType    = 29;
  JoinGroupMessageType           = 11;
  JoinGroupByAdbFingerprintMessageType = 69;
  JoinGroupByVncAuthResponseMessageType = 90;
  VncAuthResponsesUpdatedMessageType = 91;
  AutoGroupMessageType           = 70;
  AdbKeysUpdatedMessageType      = 71;
  KeyDownMessageType             = 12;
  KeyPressMessageType            = 13;
  KeyUpMessageType               = 14;
  LaunchActivityMessageType      = 31;
  LeaveGroupMessageType          = 15;
  LogcatApplyFiltersMessageType  = 16;
  PasteMessageType               = 32;
  ProbeMessageType               = 17;
  ShellCommandMessageType        = 18;
  ShellKeepAliveMessageType      = 19;
  TouchDownMessageType           = 21;
  TouchMoveMessageType           = 22;
  TouchUpMessageType             = 23;
  TouchCommitMessageType         = 65;
  TouchResetMessageType          = 66;
  GestureStartMessageType        = 67;
  GestureStopMessageType         = 68;
  TransactionDoneMessageType     = 24;
  TransactionProgressMessageType = 25;
  TypeMessageType                = 26;
  UngroupMessageType             = 27;
  UninstallMessageType           = 34;
  RotateMessageType              = 35;
  ForwardTestMessageType         = 36;
  ForwardCreateMessageType       = 37;
  ForwardRemoveMessageType       = 38;
  LogcatStartMessageType         = 39;
  LogcatStopMessageType          = 40;
  BrowserOpenMessageType         = 41;
  BrowserClearMessageType        = 42;
  AirplaneModeEvent          = 43;
  BatteryEvent               = 44;
  DeviceBrowserMessageType       = 45;
  ConnectivityEvent          = 46;
  PhoneStateEvent            = 47;
  RotationEvent              = 48;
  StoreOpenMessageType           = 49;
  ScreenCaptureMessageType       = 50;
  DeviceHeartbeatMessageType     = 73;
  RebootMessageType              = 52;
  ConnectStartMessageType        = 53;
  ConnectStopMessageType         = 54;
  RingerSetMessageType           = 56;
  RingerGetMessageType           = 64;
  WifiSetEnabledMessageType      = 57;
  WifiGetStatusMessageType       = 58;
  AccountAddMenuMessageType      = 59;
  AccountAddMessageType          = 60;
  AccountCheckMessageType        = 63;
  AccountGetMessageType          = 62;
  AccountRemoveMessageType       = 55;
  SdStatusMessageType            = 61;
  ReverseForwardsEvent       = 72;
  FileSystemListMessageType      = 81;
  FileSystemGetMessageType       = 82;
  ConnectStartedMessageType      = 92;
  ConnectStoppedMessageType      = 93;


}

message Device {
  required string deviceId = 1;
  required string cpuabi = 3; // armeabi-v7a
  required string sdk = 4; // 23
  required string width = 5;
  required string height = 6;
  required string osName = 7; // 设备系统 ANDROID23(6.0)
  required string density = 8; // 密度
  required string model = 9; // 型号  Nexus 6
  required string brand = 10; // 品牌 google
  required string version = 11; // 系统版本 6.0.1
  required string host = 12; // vpba27.mtv.corp.google.com

  enum LineStatus {
      OFF = 0;
      ON = 1;
    }
  optional LineStatus status = 13 [default = ON];
}

message Devices{
  required int32 count = 1;
  repeated Device device = 2;
}


message NoUsedDevice{

  required string deviceId = 1;
  enum LineStatus {
        OFF = 0;
        DISCONNECTED = 1;
      }
  optional LineStatus status = 2 [default = OFF];

}

message SystemInfo{

    required string agentKey = 1;
    required string mac = 2;
    required string host = 3;
    required string osName = 4;
    required string osVersion = 5;
    required string osArch = 6;

}

// Logging

message DeviceLogMessage {
  required string serial = 1;
  required double timestamp = 2;
  required uint32 priority = 3;
  required string tag = 4;
  required uint32 pid = 5;
  required string message = 6;
  required string identifier = 7;
}

// Introductions

message DeviceIdentityMessage {
  required string serial = 1;
  required string platform = 2;
  required string manufacturer = 3;
  optional string operator = 4;
  required string model = 5;
  required string version = 6;
  required string abi = 7;
  required string sdk = 8;
  required DeviceDisplayMessage display = 9;
  required DevicePhoneMessage phone = 11;
  optional string product = 12;
}

message DevicePhoneMessage {
  optional string imei = 1;
  optional string phoneNumber = 2;
  optional string iccid = 3;
  optional string network = 4;
}

message DeviceDisplayMessage {
  required int32 id = 1;
  required int32 width = 2;
  required int32 height = 3;
  required int32 rotation = 4;
  required float xdpi = 5;
  required float ydpi = 6;
  required float fps = 7;
  required float density = 8;
  required bool secure = 9;
  required string url = 10;
  optional float size = 11;
}

message DeviceBrowserAppMessage {
  required string id = 1;
  required string type = 2;
  required string name = 3;
  required bool selected = 4;
  required bool system = 5;
}

message DeviceBrowserMessage {
  required string serial = 1;
  required bool selected = 2;
  repeated DeviceBrowserAppMessage apps = 3;
}

// Output

message DeviceLogcatEntryMessage {
  required string serial = 1;
  required double date = 2;
  required uint32 pid = 3;
  required uint32 tid = 4;
  required uint32 priority = 5;
  required string tag = 6;
  required string message = 7;
}

message LogcatFilter {
  required string tag = 1;
  required uint32 priority = 2;
}

message LogcatStartMessage {
  repeated LogcatFilter filters = 1;
}

message LogcatStopMessage {
}

message LogcatApplyFiltersMessage {
  repeated LogcatFilter filters = 1;
}

// Commands

message ShellCommandMessage {
  required string command = 1;
  required uint32 timeout = 2;
}

message ShellKeepAliveMessage {
  required uint32 timeout = 1;
}

message InstallMessage {
  required string href = 1;
  required bool launch = 2;
  optional string manifest = 3;
}

message UninstallMessage {
  required string packageName = 1;
}

// 业务相关


message AppiumStartFeedback{
  required string serial = 1;
  required string reportDetailId = 3;
  required string status = 4;
  required string code = 5;
  required string feedback = 6;
}

message RunningLogFeedback{
    required int32 status = 1;
    optional string value = 2;
    required int32 runtime = 3;
    required string cpurate = 4;
    required string memory = 5;
    optional string sessionId = 6;
    optional string deviceId = 7;
    optional string reportDetailId = 9;
    optional string screenshotPath = 10;
    optional string description = 11;
    required string action = 12;
    required string params = 13;
    required string scriptId = 14;
    required int64 timestamp = 15;
    optional string logcatFile = 16;
}

message MapFieldEntry {
  required string key = 1;
  required string value = 2;
}


message TestcaseMessage {
  required string reportDetailId = 1;
  required string serial = 2;
  required string install = 3;
  required string appId = 4;
  repeated string scriptIds = 5;
  required int32 frequency = 6;
}

message ScreenCaptureMessage {
  required string serial = 1;
}

message ScreenCaptureFeedback {
  required bytes img = 1;
  optional string serial = 2;
  required string name = 3;
}

message AppiumLogFeedback {
  required bytes log = 1;
  optional string serial = 2;
  required string name = 3;
  optional string reportDetailId = 4;
}

message AppiumRunErrorFeedback {
  required string reportDetailId = 1;
  required string errormsg = 2;
}

message ReportSdetailFeedback {
  required string reportDetailId = 1;
  required string scriptId = 2;
  optional string matchineName = 3;
  required ReportSdetailType type = 4;
}
enum ReportSdetailType {
  start = 1;
  end = 2;
}

message RunningLogFeedbackEnd{
  required string reportDetailId = 1;
  required string scriptId = 2;
}