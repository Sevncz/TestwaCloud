package com.testwa.distest.client.component;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.serializer.SerializerFeature;import com.fasterxml.jackson.databind.JsonNode;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.dataformat.yaml.YAMLMapper;import com.testerhome.appcrawler.Crawler;import com.testerhome.appcrawler.CrawlerConf;import com.testwa.distest.client.DistestClientApplication;import com.testwa.distest.client.appcrawler.JCrawlerConfig;import lombok.extern.slf4j.Slf4j;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.TestPropertySource;import org.springframework.test.context.junit4.SpringRunner;import java.nio.file.Path;import java.nio.file.Paths;/** * @Program: distest * @Description: * @Author: wen * @Create: 2018-07-23 19:29 **/@Slf4j@RunWith(SpringRunner.class)@SpringBootTest(classes = DistestClientApplication.class)@TestPropertySource(locations="classpath:application-dev.properties")public class BLTest {    @Test    public void testRunCustom(){//        BLExecutor.run();        log.info("start....");        try {            Path resultDir = Paths.get("/Users/wen/dev/BL-test/output");            JCrawlerConfig twCrawlerConfig = new JCrawlerConfig();            twCrawlerConfig.setReportTitle("TESTWA遍历测试报告");            twCrawlerConfig.setResultDir(resultDir.toString());            twCrawlerConfig.getPluginList().add("com.testerhome.appcrawler.plugin.ReportPlugin");            twCrawlerConfig.getCapability().put("app", "/Users/wen/dev/BL-test/ContactManager.apk");            twCrawlerConfig.getCapability().put("appium", "http://127.0.0.1:4723/wd/hub");            twCrawlerConfig.getCapability().put("platformName", "Android");            twCrawlerConfig.getCapability().put("dontStopAppOnReset", true);//        twCrawlerConfig.getCapability().put("automationName", "uiautomator2");            twCrawlerConfig.getAndroidCapability().put("deviceName", "8c2b6aee");            String jsonNodeString = JSON.toJSONString(twCrawlerConfig, SerializerFeature.WriteMapNullValue);            JsonNode jsonNodeTree = new ObjectMapper().readTree(jsonNodeString);            String yaml = new YAMLMapper().writeValueAsString(jsonNodeTree);            CrawlerConf crawlerConf = new CrawlerConf();            crawlerConf = crawlerConf.loadYaml(yaml);            crawlerConf.androidInit();            Crawler crawler = new Crawler();            crawler.loadConf(crawlerConf);            crawler.start(null);        } catch (Exception e) {            log.error("" , e);        }    }}