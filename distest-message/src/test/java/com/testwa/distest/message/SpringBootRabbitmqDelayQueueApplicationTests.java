package com.testwa.distest.message;import com.testwa.distest.message.config.ExpirationMessagePostProcessor;import com.testwa.distest.message.config.ProcessReceiver;import com.testwa.distest.message.config.QueueConfig;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.amqp.rabbit.core.RabbitTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.TestPropertySource;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.test.context.junit4.SpringRunner;import java.util.concurrent.CountDownLatch;@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes = DistestMessageApplication.class)@TestPropertySource(locations="classpath:application-test.properties")public class SpringBootRabbitmqDelayQueueApplicationTests {    @Autowired    private RabbitTemplate rabbitTemplate;    @Test    public void testDelayQueuePerMessageTTL() throws InterruptedException {        ProcessReceiver.latch = new CountDownLatch(3);        for (int i = 1; i <= 3; i++) {            long expiration = i * 1000;            rabbitTemplate.convertAndSend(QueueConfig.DELAY_QUEUE_PER_MESSAGE_TTL_NAME,                    (Object) ("Message From delay_queue_per_message_ttl with expiration " + expiration), new ExpirationMessagePostProcessor(expiration));        }        ProcessReceiver.latch.await();    }    @Test    public void testDelayQueuePerQueueTTL() throws InterruptedException {        ProcessReceiver.latch = new CountDownLatch(3);        for (int i = 1; i <= 3; i++) {            rabbitTemplate.convertAndSend(QueueConfig.DELAY_QUEUE_PER_QUEUE_TTL_NAME,                    "Message From delay_queue_per_queue_ttl with expiration " + QueueConfig.QUEUE_EXPIRATION);        }        ProcessReceiver.latch.await();    }    @Test    public void testFailMessage() throws InterruptedException {        ProcessReceiver.latch = new CountDownLatch(6);        for (int i = 1; i <= 3; i++) {            rabbitTemplate.convertAndSend(QueueConfig.DELAY_PROCESS_QUEUE_NAME, ProcessReceiver.FAIL_MESSAGE);        }        ProcessReceiver.latch.await();    }}