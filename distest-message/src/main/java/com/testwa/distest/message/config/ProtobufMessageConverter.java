package com.testwa.distest.message.config;import com.google.protobuf.InvalidProtocolBufferException;import com.google.protobuf.MessageLite;import io.rpc.testwa.msg.Forget;import io.rpc.testwa.msg.Invite;import io.rpc.testwa.msg.Register;import io.rpc.testwa.msg.UserInfo;import org.apache.commons.lang3.StringUtils;import org.springframework.amqp.core.Message;import org.springframework.amqp.core.MessageProperties;import org.springframework.amqp.support.converter.MessageConversionException;import org.springframework.amqp.support.converter.MessageConverter;import java.util.HashMap;import java.util.Map;public final class ProtobufMessageConverter implements MessageConverter {    private static Map<String, MessageLite.Builder> builderMap;    static {        builderMap = new HashMap<>();        builderMap.put(UserInfo.class.getSimpleName(), UserInfo.newBuilder());        builderMap.put(Register.class.getSimpleName(), Register.newBuilder());        builderMap.put(Forget.class.getSimpleName(), Forget.newBuilder());        builderMap.put(Invite.class.getSimpleName(), Invite.newBuilder());    }    public Message toMessage(Object object, MessageProperties messageProperties) throws MessageConversionException {        String messageType = object.getClass().getSimpleName();        if (!builderMap.containsKey(messageType)) {            throw new MessageConversionException("not support message type:" + messageType);        }        messageProperties.setHeader("messageType", messageType);        MessageLite messageLite = (MessageLite) object;        return new Message(messageLite.toByteArray(), messageProperties);    }    public Object fromMessage(Message message) throws MessageConversionException {        if(message.getMessageProperties().getHeaders() == null || message.getMessageProperties().getHeaders().get("messageType") == null) {            throw new MessageConversionException("not support message");        }        String messageType = message.getMessageProperties().getHeaders().get("messageType").toString();        if (!builderMap.containsKey(messageType)) {            throw new MessageConversionException("not support message type:" + messageType);        }        try {            MessageLite.Builder builder = builderMap.get(messageType).clear();            builder = builder.mergeFrom(message.getBody());            return builder.build();        } catch (InvalidProtocolBufferException e) {            throw new MessageConversionException("deserialize message error", e);        }    }}